
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac58  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800af28  0800af28  0001af28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b210  0800b210  0001b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b21c  0800b21c  0001b21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000474  24000000  0800b220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000086c  24000474  0800b694  00020474  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ce0  0800b694  00020ce0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 10 .debug_info   000291be  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000037e4  00000000  00000000  00049660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001018  00000000  00000000  0004ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f28  00000000  00000000  0004de60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000400c  00000000  00000000  0004ed88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018d5e  00000000  00000000  00052d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157443  00000000  00000000  0006baf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000d1  00000000  00000000  001c2f35  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004404  00000000  00000000  001c3008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800af10 	.word	0x0800af10

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	0800af10 	.word	0x0800af10

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_SAI_ErrorCallback+0x28>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d103      	bne.n	8000622 <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f80a 	bl	8000634 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8000620:	e002      	b.n	8000628 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f94e 	bl	80008c4 <BSP_AUDIO_IN_Error_CallBack>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40015824 	.word	0x40015824

08000634 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d002      	beq.n	8000666 <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8000660:	f06f 0301 	mvn.w	r3, #1
 8000664:	e085      	b.n	8000772 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000666:	4b45      	ldr	r3, [pc, #276]	; (800077c <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066c:	4a43      	ldr	r2, [pc, #268]	; (800077c <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 800066e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000676:	4b41      	ldr	r3, [pc, #260]	; (800077c <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]


    for(index = 0; index < ChnlNbrIn; index++)
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	e06e      	b.n	8000768 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 800068a:	4a3d      	ldr	r2, [pc, #244]	; (8000780 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	214c      	movs	r1, #76	; 0x4c
 8000690:	fb01 f303 	mul.w	r3, r1, r3
 8000694:	4413      	add	r3, r2
 8000696:	2201      	movs	r2, #1
 8000698:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800069a:	4a39      	ldr	r2, [pc, #228]	; (8000780 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	214c      	movs	r1, #76	; 0x4c
 80006a0:	fb01 f303 	mul.w	r3, r1, r3
 80006a4:	4413      	add	r3, r2
 80006a6:	3302      	adds	r3, #2
 80006a8:	2200      	movs	r2, #0
 80006aa:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	214c      	movs	r1, #76	; 0x4c
 80006b2:	fb01 f303 	mul.w	r3, r1, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	3304      	adds	r3, #4
 80006ba:	4a32      	ldr	r2, [pc, #200]	; (8000784 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 80006bc:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b298      	uxth	r0, r3
 80006c2:	4a2f      	ldr	r2, [pc, #188]	; (8000780 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	214c      	movs	r1, #76	; 0x4c
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	330a      	adds	r3, #10
 80006d0:	4602      	mov	r2, r0
 80006d2:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	b298      	uxth	r0, r3
 80006d8:	4a29      	ldr	r2, [pc, #164]	; (8000780 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	214c      	movs	r1, #76	; 0x4c
 80006de:	fb01 f303 	mul.w	r3, r1, r3
 80006e2:	4413      	add	r3, r2
 80006e4:	3308      	adds	r3, #8
 80006e6:	4602      	mov	r2, r0
 80006e8:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	224c      	movs	r2, #76	; 0x4c
 80006ee:	fb02 f303 	mul.w	r3, r2, r3
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80006f4:	4413      	add	r3, r2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f00a f82e 	bl	800a758 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4a22      	ldr	r2, [pc, #136]	; (8000788 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8000700:	fba2 2303 	umull	r2, r3, r2, r3
 8000704:	099b      	lsrs	r3, r3, #6
 8000706:	b298      	uxth	r0, r3
 8000708:	4920      	ldr	r1, [pc, #128]	; (800078c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800070a:	697a      	ldr	r2, [r7, #20]
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	440b      	add	r3, r1
 8000716:	3302      	adds	r3, #2
 8000718:	4602      	mov	r2, r0
 800071a:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 800071c:	491b      	ldr	r1, [pc, #108]	; (800078c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	4613      	mov	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	4413      	add	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	440b      	add	r3, r1
 800072a:	3304      	adds	r3, #4
 800072c:	2218      	movs	r2, #24
 800072e:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8000730:	4916      	ldr	r1, [pc, #88]	; (800078c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	4613      	mov	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4413      	add	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	440b      	add	r3, r1
 800073e:	2202      	movs	r2, #2
 8000740:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	224c      	movs	r2, #76	; 0x4c
 8000746:	fb02 f303 	mul.w	r3, r2, r3
 800074a:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800074c:	1898      	adds	r0, r3, r2
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800075a:	4413      	add	r3, r2
 800075c:	4619      	mov	r1, r3
 800075e:	f00a f8cb 	bl	800a8f8 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3301      	adds	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	429a      	cmp	r2, r3
 800076e:	d38c      	bcc.n	800068a <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	58024400 	.word	0x58024400
 8000780:	240005c4 	.word	0x240005c4
 8000784:	7e809d48 	.word	0x7e809d48
 8000788:	10624dd3 	.word	0x10624dd3
 800078c:	2400065c 	.word	0x2400065c

08000790 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf    Pointer to PDM buffer data
  * @param  PCMBuf    Pointer to PCM buffer data
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM(uint32_t Instance, uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d002      	beq.n	80007ac <BSP_AUDIO_IN_PDMToPCM+0x1c>
  {
    return BSP_ERROR_WRONG_PARAM;
 80007a6:	f06f 0301 	mvn.w	r3, #1
 80007aa:	e022      	b.n	80007f2 <BSP_AUDIO_IN_PDMToPCM+0x62>
  }
  else
  {
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e012      	b.n	80007d8 <BSP_AUDIO_IN_PDMToPCM+0x48>
    {
      PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	18d0      	adds	r0, r2, r3
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	18d1      	adds	r1, r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	224c      	movs	r2, #76	; 0x4c
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <BSP_AUDIO_IN_PDMToPCM+0x6c>)
 80007ca:	4413      	add	r3, r2
 80007cc:	461a      	mov	r2, r3
 80007ce:	f00a f98d 	bl	800aaec <PDM_Filter>
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	4909      	ldr	r1, [pc, #36]	; (8000800 <BSP_AUDIO_IN_PDMToPCM+0x70>)
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	440b      	add	r3, r1
 80007e6:	3310      	adds	r3, #16
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3e0      	bcc.n	80007b2 <BSP_AUDIO_IN_PDMToPCM+0x22>
    }
  }

  return BSP_ERROR_NONE;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	240005c4 	.word	0x240005c4
 8000800:	240008c4 	.word	0x240008c4

08000804 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d003      	beq.n	8000822 <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800081a:	f06f 0301 	mvn.w	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	e01d      	b.n	800085e <BSP_AUDIO_IN_RecordPDM+0x5a>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[Instance], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2298      	movs	r2, #152	; 0x98
 8000826:	fb02 f303 	mul.w	r3, r2, r3
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <BSP_AUDIO_IN_RecordPDM+0x64>)
 800082c:	1898      	adds	r0, r3, r2
 800082e:	490f      	ldr	r1, [pc, #60]	; (800086c <BSP_AUDIO_IN_RecordPDM+0x68>)
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	440b      	add	r3, r1
 800083c:	330c      	adds	r3, #12
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	08db      	lsrs	r3, r3, #3
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	fbb2 f3f3 	udiv	r3, r2, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	f006 f8db 	bl	8006a08 <HAL_SAI_Receive_DMA>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <BSP_AUDIO_IN_RecordPDM+0x5a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000858:	f06f 0303 	mvn.w	r3, #3
 800085c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 800085e:	697b      	ldr	r3, [r7, #20]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	24000494 	.word	0x24000494
 800086c:	240008c4 	.word	0x240008c4

08000870 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f819 	bl	80008b0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 f804 	bl	800089c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008de:	2003      	movs	r0, #3
 80008e0:	f000 f95c 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008e4:	f003 fbe2 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 80008e8:	4602      	mov	r2, r0
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_Init+0x68>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	4913      	ldr	r1, [pc, #76]	; (8000944 <HAL_Init+0x6c>)
 80008f6:	5ccb      	ldrb	r3, [r1, r3]
 80008f8:	f003 031f 	and.w	r3, r3, #31
 80008fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000900:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_Init+0x68>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_Init+0x6c>)
 800090c:	5cd3      	ldrb	r3, [r2, r3]
 800090e:	f003 031f 	and.w	r3, r3, #31
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <HAL_Init+0x70>)
 800091a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <HAL_Init+0x74>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000922:	2000      	movs	r0, #0
 8000924:	f000 f814 	bl	8000950 <HAL_InitTick>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e002      	b.n	8000938 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000932:	f007 ff1f 	bl	8008774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	58024400 	.word	0x58024400
 8000944:	0800af90 	.word	0x0800af90
 8000948:	2400040c 	.word	0x2400040c
 800094c:	24000408 	.word	0x24000408

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_InitTick+0x60>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	e021      	b.n	80009a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_InitTick+0x64>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_InitTick+0x60>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f941 	bl	8000c02 <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000998:	f000 f90b 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_InitTick+0x68>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000404 	.word	0x24000404
 80009b4:	24000408 	.word	0x24000408
 80009b8:	24000400 	.word	0x24000400

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	24000404 	.word	0x24000404
 80009e0:	24000954 	.word	0x24000954

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	24000954 	.word	0x24000954

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <__NVIC_SetPriorityGrouping+0x40>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x40>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	05fa0000 	.word	0x05fa0000

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0b      	blt.n	8000a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	f003 021f 	and.w	r2, r3, #31
 8000a78:	4907      	ldr	r1, [pc, #28]	; (8000a98 <__NVIC_EnableIRQ+0x38>)
 8000a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a7e:	095b      	lsrs	r3, r3, #5
 8000a80:	2001      	movs	r0, #1
 8000a82:	fa00 f202 	lsl.w	r2, r0, r2
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff29 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc0:	f7ff ff40 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000bc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	6978      	ldr	r0, [r7, #20]
 8000bcc:	f7ff ff90 	bl	8000af0 <NVIC_EncodePriority>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff5f 	bl	8000a9c <__NVIC_SetPriority>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff33 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ffa4 	bl	8000b58 <SysTick_Config>
 8000c10:	4603      	mov	r3, r0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d101      	bne.n	8000c2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e054      	b.n	8000cd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7f5b      	ldrb	r3, [r3, #29]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d105      	bne.n	8000c44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f007 fdb2 	bl	80087a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2202      	movs	r2, #2
 8000c48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10c      	bne.n	8000c6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <HAL_CRC_Init+0xc4>)
 8000c58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0218 	bic.w	r2, r2, #24
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	e00c      	b.n	8000c86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6899      	ldr	r1, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	461a      	mov	r2, r3
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f834 	bl	8000ce4 <HAL_CRCEx_Polynomial_Set>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e028      	b.n	8000cd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	795b      	ldrb	r3, [r3, #5]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d105      	bne.n	8000c9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	e004      	b.n	8000ca4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	6912      	ldr	r2, [r2, #16]
 8000ca2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	04c11db7 	.word	0x04c11db7

08000ce4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000cf4:	231f      	movs	r3, #31
 8000cf6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000cf8:	bf00      	nop
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	613a      	str	r2, [r7, #16]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d009      	beq.n	8000d18 <HAL_CRCEx_Polynomial_Set+0x34>
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	f003 031f 	and.w	r3, r3, #31
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f0      	beq.n	8000cfa <HAL_CRCEx_Polynomial_Set+0x16>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b18      	cmp	r3, #24
 8000d1c:	d846      	bhi.n	8000dac <HAL_CRCEx_Polynomial_Set+0xc8>
 8000d1e:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d24:	08000db3 	.word	0x08000db3
 8000d28:	08000dad 	.word	0x08000dad
 8000d2c:	08000dad 	.word	0x08000dad
 8000d30:	08000dad 	.word	0x08000dad
 8000d34:	08000dad 	.word	0x08000dad
 8000d38:	08000dad 	.word	0x08000dad
 8000d3c:	08000dad 	.word	0x08000dad
 8000d40:	08000dad 	.word	0x08000dad
 8000d44:	08000da1 	.word	0x08000da1
 8000d48:	08000dad 	.word	0x08000dad
 8000d4c:	08000dad 	.word	0x08000dad
 8000d50:	08000dad 	.word	0x08000dad
 8000d54:	08000dad 	.word	0x08000dad
 8000d58:	08000dad 	.word	0x08000dad
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000dad 	.word	0x08000dad
 8000d64:	08000d95 	.word	0x08000d95
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000dad 	.word	0x08000dad
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dad 	.word	0x08000dad
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000d89 	.word	0x08000d89
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d913      	bls.n	8000db6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000d92:	e010      	b.n	8000db6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b07      	cmp	r3, #7
 8000d98:	d90f      	bls.n	8000dba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000d9e:	e00c      	b.n	8000dba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	2b0f      	cmp	r3, #15
 8000da4:	d90b      	bls.n	8000dbe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000daa:	e008      	b.n	8000dbe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	75fb      	strb	r3, [r7, #23]
      break;
 8000db0:	e006      	b.n	8000dc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000db2:	bf00      	nop
 8000db4:	e004      	b.n	8000dc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000db6:	bf00      	nop
 8000db8:	e002      	b.n	8000dc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dba:	bf00      	nop
 8000dbc:	e000      	b.n	8000dc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dbe:	bf00      	nop
  }
  if (status == HAL_OK)
 8000dc0:	7dfb      	ldrb	r3, [r7, #23]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10d      	bne.n	8000de2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f023 0118 	bic.w	r1, r3, #24
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	371c      	adds	r7, #28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff fdf4 	bl	80009e4 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e314      	b.n	8001432 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a66      	ldr	r2, [pc, #408]	; (8000fa8 <HAL_DMA_Init+0x1b8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d04a      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a65      	ldr	r2, [pc, #404]	; (8000fac <HAL_DMA_Init+0x1bc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d045      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a63      	ldr	r2, [pc, #396]	; (8000fb0 <HAL_DMA_Init+0x1c0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d040      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a62      	ldr	r2, [pc, #392]	; (8000fb4 <HAL_DMA_Init+0x1c4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d03b      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a60      	ldr	r2, [pc, #384]	; (8000fb8 <HAL_DMA_Init+0x1c8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d036      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a5f      	ldr	r2, [pc, #380]	; (8000fbc <HAL_DMA_Init+0x1cc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d031      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a5d      	ldr	r2, [pc, #372]	; (8000fc0 <HAL_DMA_Init+0x1d0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d02c      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a5c      	ldr	r2, [pc, #368]	; (8000fc4 <HAL_DMA_Init+0x1d4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d027      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a5a      	ldr	r2, [pc, #360]	; (8000fc8 <HAL_DMA_Init+0x1d8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d022      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a59      	ldr	r2, [pc, #356]	; (8000fcc <HAL_DMA_Init+0x1dc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d01d      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a57      	ldr	r2, [pc, #348]	; (8000fd0 <HAL_DMA_Init+0x1e0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d018      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a56      	ldr	r2, [pc, #344]	; (8000fd4 <HAL_DMA_Init+0x1e4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a54      	ldr	r2, [pc, #336]	; (8000fd8 <HAL_DMA_Init+0x1e8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00e      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a53      	ldr	r2, [pc, #332]	; (8000fdc <HAL_DMA_Init+0x1ec>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d009      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a51      	ldr	r2, [pc, #324]	; (8000fe0 <HAL_DMA_Init+0x1f0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d004      	beq.n	8000ea8 <HAL_DMA_Init+0xb8>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <HAL_DMA_Init+0x1f4>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d101      	bne.n	8000eac <HAL_DMA_Init+0xbc>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_DMA_Init+0xbe>
 8000eac:	2300      	movs	r3, #0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 813c 	beq.w	800112c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a37      	ldr	r2, [pc, #220]	; (8000fa8 <HAL_DMA_Init+0x1b8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d04a      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a36      	ldr	r2, [pc, #216]	; (8000fac <HAL_DMA_Init+0x1bc>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d045      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a34      	ldr	r2, [pc, #208]	; (8000fb0 <HAL_DMA_Init+0x1c0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d040      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a33      	ldr	r2, [pc, #204]	; (8000fb4 <HAL_DMA_Init+0x1c4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d03b      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <HAL_DMA_Init+0x1c8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d036      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <HAL_DMA_Init+0x1cc>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d031      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a2e      	ldr	r2, [pc, #184]	; (8000fc0 <HAL_DMA_Init+0x1d0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d02c      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a2d      	ldr	r2, [pc, #180]	; (8000fc4 <HAL_DMA_Init+0x1d4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d027      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a2b      	ldr	r2, [pc, #172]	; (8000fc8 <HAL_DMA_Init+0x1d8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d022      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <HAL_DMA_Init+0x1dc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d01d      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <HAL_DMA_Init+0x1e0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d018      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <HAL_DMA_Init+0x1e4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d013      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <HAL_DMA_Init+0x1e8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00e      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <HAL_DMA_Init+0x1ec>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d009      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <HAL_DMA_Init+0x1f0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d004      	beq.n	8000f64 <HAL_DMA_Init+0x174>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <HAL_DMA_Init+0x1f4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d108      	bne.n	8000f76 <HAL_DMA_Init+0x186>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0201 	bic.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e007      	b.n	8000f86 <HAL_DMA_Init+0x196>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0201 	bic.w	r2, r2, #1
 8000f84:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000f86:	e02f      	b.n	8000fe8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f88:	f7ff fd2c 	bl	80009e4 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d928      	bls.n	8000fe8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2220      	movs	r2, #32
 8000f9a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e244      	b.n	8001432 <HAL_DMA_Init+0x642>
 8000fa8:	40020010 	.word	0x40020010
 8000fac:	40020028 	.word	0x40020028
 8000fb0:	40020040 	.word	0x40020040
 8000fb4:	40020058 	.word	0x40020058
 8000fb8:	40020070 	.word	0x40020070
 8000fbc:	40020088 	.word	0x40020088
 8000fc0:	400200a0 	.word	0x400200a0
 8000fc4:	400200b8 	.word	0x400200b8
 8000fc8:	40020410 	.word	0x40020410
 8000fcc:	40020428 	.word	0x40020428
 8000fd0:	40020440 	.word	0x40020440
 8000fd4:	40020458 	.word	0x40020458
 8000fd8:	40020470 	.word	0x40020470
 8000fdc:	40020488 	.word	0x40020488
 8000fe0:	400204a0 	.word	0x400204a0
 8000fe4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1c8      	bne.n	8000f88 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4b84      	ldr	r3, [pc, #528]	; (8001214 <HAL_DMA_Init+0x424>)
 8001002:	4013      	ands	r3, r2
 8001004:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800100e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001026:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	2b04      	cmp	r3, #4
 800103a:	d107      	bne.n	800104c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	4313      	orrs	r3, r2
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4313      	orrs	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b28      	cmp	r3, #40	; 0x28
 8001052:	d903      	bls.n	800105c <HAL_DMA_Init+0x26c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b2e      	cmp	r3, #46	; 0x2e
 800105a:	d91f      	bls.n	800109c <HAL_DMA_Init+0x2ac>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b3e      	cmp	r3, #62	; 0x3e
 8001062:	d903      	bls.n	800106c <HAL_DMA_Init+0x27c>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b42      	cmp	r3, #66	; 0x42
 800106a:	d917      	bls.n	800109c <HAL_DMA_Init+0x2ac>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b46      	cmp	r3, #70	; 0x46
 8001072:	d903      	bls.n	800107c <HAL_DMA_Init+0x28c>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b48      	cmp	r3, #72	; 0x48
 800107a:	d90f      	bls.n	800109c <HAL_DMA_Init+0x2ac>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b4e      	cmp	r3, #78	; 0x4e
 8001082:	d903      	bls.n	800108c <HAL_DMA_Init+0x29c>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b52      	cmp	r3, #82	; 0x52
 800108a:	d907      	bls.n	800109c <HAL_DMA_Init+0x2ac>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b73      	cmp	r3, #115	; 0x73
 8001092:	d905      	bls.n	80010a0 <HAL_DMA_Init+0x2b0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b77      	cmp	r3, #119	; 0x77
 800109a:	d801      	bhi.n	80010a0 <HAL_DMA_Init+0x2b0>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <HAL_DMA_Init+0x2b2>
 80010a0:	2300      	movs	r3, #0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010ac:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f023 0307 	bic.w	r3, r3, #7
 80010c4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d117      	bne.n	8001108 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	4313      	orrs	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00e      	beq.n	8001108 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f001 fdd8 	bl	8002ca0 <DMA_CheckFifoParam>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2240      	movs	r2, #64	; 0x40
 80010fa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e194      	b.n	8001432 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 fd13 	bl	8002b3c <DMA_CalcBaseAndBitshift>
 8001116:	4603      	mov	r3, r0
 8001118:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	223f      	movs	r2, #63	; 0x3f
 8001124:	409a      	lsls	r2, r3
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	e0ca      	b.n	80012c2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a39      	ldr	r2, [pc, #228]	; (8001218 <HAL_DMA_Init+0x428>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d022      	beq.n	800117c <HAL_DMA_Init+0x38c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a38      	ldr	r2, [pc, #224]	; (800121c <HAL_DMA_Init+0x42c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d01d      	beq.n	800117c <HAL_DMA_Init+0x38c>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a36      	ldr	r2, [pc, #216]	; (8001220 <HAL_DMA_Init+0x430>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d018      	beq.n	800117c <HAL_DMA_Init+0x38c>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a35      	ldr	r2, [pc, #212]	; (8001224 <HAL_DMA_Init+0x434>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d013      	beq.n	800117c <HAL_DMA_Init+0x38c>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a33      	ldr	r2, [pc, #204]	; (8001228 <HAL_DMA_Init+0x438>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00e      	beq.n	800117c <HAL_DMA_Init+0x38c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <HAL_DMA_Init+0x43c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d009      	beq.n	800117c <HAL_DMA_Init+0x38c>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a30      	ldr	r2, [pc, #192]	; (8001230 <HAL_DMA_Init+0x440>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d004      	beq.n	800117c <HAL_DMA_Init+0x38c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <HAL_DMA_Init+0x444>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_DMA_Init+0x390>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_DMA_Init+0x392>
 8001180:	2300      	movs	r3, #0
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8094 	beq.w	80012b0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a22      	ldr	r2, [pc, #136]	; (8001218 <HAL_DMA_Init+0x428>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d021      	beq.n	80011d6 <HAL_DMA_Init+0x3e6>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a21      	ldr	r2, [pc, #132]	; (800121c <HAL_DMA_Init+0x42c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d01c      	beq.n	80011d6 <HAL_DMA_Init+0x3e6>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_DMA_Init+0x430>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d017      	beq.n	80011d6 <HAL_DMA_Init+0x3e6>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_DMA_Init+0x434>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d012      	beq.n	80011d6 <HAL_DMA_Init+0x3e6>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <HAL_DMA_Init+0x438>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_DMA_Init+0x3e6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_DMA_Init+0x43c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d008      	beq.n	80011d6 <HAL_DMA_Init+0x3e6>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	; (8001230 <HAL_DMA_Init+0x440>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d003      	beq.n	80011d6 <HAL_DMA_Init+0x3e6>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <HAL_DMA_Init+0x444>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_DMA_Init+0x448>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b40      	cmp	r3, #64	; 0x40
 80011fe:	d01d      	beq.n	800123c <HAL_DMA_Init+0x44c>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b80      	cmp	r3, #128	; 0x80
 8001206:	d102      	bne.n	800120e <HAL_DMA_Init+0x41e>
 8001208:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800120c:	e017      	b.n	800123e <HAL_DMA_Init+0x44e>
 800120e:	2300      	movs	r3, #0
 8001210:	e015      	b.n	800123e <HAL_DMA_Init+0x44e>
 8001212:	bf00      	nop
 8001214:	fe10803f 	.word	0xfe10803f
 8001218:	58025408 	.word	0x58025408
 800121c:	5802541c 	.word	0x5802541c
 8001220:	58025430 	.word	0x58025430
 8001224:	58025444 	.word	0x58025444
 8001228:	58025458 	.word	0x58025458
 800122c:	5802546c 	.word	0x5802546c
 8001230:	58025480 	.word	0x58025480
 8001234:	58025494 	.word	0x58025494
 8001238:	fffe000f 	.word	0xfffe000f
 800123c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68d2      	ldr	r2, [r2, #12]
 8001242:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001244:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800124c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001254:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800125c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001264:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800126c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4313      	orrs	r3, r2
 8001272:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b6e      	ldr	r3, [pc, #440]	; (800143c <HAL_DMA_Init+0x64c>)
 8001284:	4413      	add	r3, r2
 8001286:	4a6e      	ldr	r2, [pc, #440]	; (8001440 <HAL_DMA_Init+0x650>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	009a      	lsls	r2, r3, #2
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f001 fc51 	bl	8002b3c <DMA_CalcBaseAndBitshift>
 800129a:	4603      	mov	r3, r0
 800129c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	2201      	movs	r2, #1
 80012a8:	409a      	lsls	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	e008      	b.n	80012c2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2240      	movs	r2, #64	; 0x40
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0b7      	b.n	8001432 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_DMA_Init+0x654>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d072      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a5d      	ldr	r2, [pc, #372]	; (8001448 <HAL_DMA_Init+0x658>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d06d      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a5c      	ldr	r2, [pc, #368]	; (800144c <HAL_DMA_Init+0x65c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d068      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a5a      	ldr	r2, [pc, #360]	; (8001450 <HAL_DMA_Init+0x660>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d063      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a59      	ldr	r2, [pc, #356]	; (8001454 <HAL_DMA_Init+0x664>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d05e      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_DMA_Init+0x668>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d059      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a56      	ldr	r2, [pc, #344]	; (800145c <HAL_DMA_Init+0x66c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d054      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_DMA_Init+0x670>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d04f      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_DMA_Init+0x674>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d04a      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_DMA_Init+0x678>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d045      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_DMA_Init+0x67c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d040      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <HAL_DMA_Init+0x680>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d03b      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <HAL_DMA_Init+0x684>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d036      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <HAL_DMA_Init+0x688>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d031      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a4a      	ldr	r2, [pc, #296]	; (800147c <HAL_DMA_Init+0x68c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d02c      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_DMA_Init+0x690>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d027      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_DMA_Init+0x694>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d022      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a45      	ldr	r2, [pc, #276]	; (8001488 <HAL_DMA_Init+0x698>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01d      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a44      	ldr	r2, [pc, #272]	; (800148c <HAL_DMA_Init+0x69c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d018      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a42      	ldr	r2, [pc, #264]	; (8001490 <HAL_DMA_Init+0x6a0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a41      	ldr	r2, [pc, #260]	; (8001494 <HAL_DMA_Init+0x6a4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d00e      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <HAL_DMA_Init+0x6a8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d009      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a3e      	ldr	r2, [pc, #248]	; (800149c <HAL_DMA_Init+0x6ac>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d004      	beq.n	80013b2 <HAL_DMA_Init+0x5c2>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_DMA_Init+0x6b0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_DMA_Init+0x5c6>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_DMA_Init+0x5c8>
 80013b6:	2300      	movs	r3, #0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d032      	beq.n	8001422 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f001 fceb 	bl	8002d98 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b80      	cmp	r3, #128	; 0x80
 80013c8:	d102      	bne.n	80013d0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80013e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d010      	beq.n	8001410 <HAL_DMA_Init+0x620>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d80c      	bhi.n	8001410 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f001 fd68 	bl	8002ecc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	e008      	b.n	8001422 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	a7fdabf8 	.word	0xa7fdabf8
 8001440:	cccccccd 	.word	0xcccccccd
 8001444:	40020010 	.word	0x40020010
 8001448:	40020028 	.word	0x40020028
 800144c:	40020040 	.word	0x40020040
 8001450:	40020058 	.word	0x40020058
 8001454:	40020070 	.word	0x40020070
 8001458:	40020088 	.word	0x40020088
 800145c:	400200a0 	.word	0x400200a0
 8001460:	400200b8 	.word	0x400200b8
 8001464:	40020410 	.word	0x40020410
 8001468:	40020428 	.word	0x40020428
 800146c:	40020440 	.word	0x40020440
 8001470:	40020458 	.word	0x40020458
 8001474:	40020470 	.word	0x40020470
 8001478:	40020488 	.word	0x40020488
 800147c:	400204a0 	.word	0x400204a0
 8001480:	400204b8 	.word	0x400204b8
 8001484:	58025408 	.word	0x58025408
 8001488:	5802541c 	.word	0x5802541c
 800148c:	58025430 	.word	0x58025430
 8001490:	58025444 	.word	0x58025444
 8001494:	58025458 	.word	0x58025458
 8001498:	5802546c 	.word	0x5802546c
 800149c:	58025480 	.word	0x58025480
 80014a0:	58025494 	.word	0x58025494

080014a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e226      	b.n	800190e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Start_IT+0x2a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e21f      	b.n	800190e <HAL_DMA_Start_IT+0x46a>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b01      	cmp	r3, #1
 80014e0:	f040 820a 	bne.w	80018f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a68      	ldr	r2, [pc, #416]	; (8001698 <HAL_DMA_Start_IT+0x1f4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d04a      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a66      	ldr	r2, [pc, #408]	; (800169c <HAL_DMA_Start_IT+0x1f8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d045      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a65      	ldr	r2, [pc, #404]	; (80016a0 <HAL_DMA_Start_IT+0x1fc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d040      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <HAL_DMA_Start_IT+0x200>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d03b      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a62      	ldr	r2, [pc, #392]	; (80016a8 <HAL_DMA_Start_IT+0x204>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d036      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a60      	ldr	r2, [pc, #384]	; (80016ac <HAL_DMA_Start_IT+0x208>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d031      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a5f      	ldr	r2, [pc, #380]	; (80016b0 <HAL_DMA_Start_IT+0x20c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d02c      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a5d      	ldr	r2, [pc, #372]	; (80016b4 <HAL_DMA_Start_IT+0x210>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d027      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a5c      	ldr	r2, [pc, #368]	; (80016b8 <HAL_DMA_Start_IT+0x214>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d022      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a5a      	ldr	r2, [pc, #360]	; (80016bc <HAL_DMA_Start_IT+0x218>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01d      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a59      	ldr	r2, [pc, #356]	; (80016c0 <HAL_DMA_Start_IT+0x21c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d018      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <HAL_DMA_Start_IT+0x220>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a56      	ldr	r2, [pc, #344]	; (80016c8 <HAL_DMA_Start_IT+0x224>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00e      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a54      	ldr	r2, [pc, #336]	; (80016cc <HAL_DMA_Start_IT+0x228>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d009      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a53      	ldr	r2, [pc, #332]	; (80016d0 <HAL_DMA_Start_IT+0x22c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d004      	beq.n	8001592 <HAL_DMA_Start_IT+0xee>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a51      	ldr	r2, [pc, #324]	; (80016d4 <HAL_DMA_Start_IT+0x230>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d108      	bne.n	80015a4 <HAL_DMA_Start_IT+0x100>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e007      	b.n	80015b4 <HAL_DMA_Start_IT+0x110>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f001 f912 	bl	80027e4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a34      	ldr	r2, [pc, #208]	; (8001698 <HAL_DMA_Start_IT+0x1f4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d04a      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a33      	ldr	r2, [pc, #204]	; (800169c <HAL_DMA_Start_IT+0x1f8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d045      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a31      	ldr	r2, [pc, #196]	; (80016a0 <HAL_DMA_Start_IT+0x1fc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d040      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a30      	ldr	r2, [pc, #192]	; (80016a4 <HAL_DMA_Start_IT+0x200>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d03b      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2e      	ldr	r2, [pc, #184]	; (80016a8 <HAL_DMA_Start_IT+0x204>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d036      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a2d      	ldr	r2, [pc, #180]	; (80016ac <HAL_DMA_Start_IT+0x208>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d031      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2b      	ldr	r2, [pc, #172]	; (80016b0 <HAL_DMA_Start_IT+0x20c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d02c      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <HAL_DMA_Start_IT+0x210>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d027      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <HAL_DMA_Start_IT+0x214>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d022      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a27      	ldr	r2, [pc, #156]	; (80016bc <HAL_DMA_Start_IT+0x218>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d01d      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <HAL_DMA_Start_IT+0x21c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d018      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a24      	ldr	r2, [pc, #144]	; (80016c4 <HAL_DMA_Start_IT+0x220>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d013      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <HAL_DMA_Start_IT+0x224>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00e      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HAL_DMA_Start_IT+0x228>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d009      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <HAL_DMA_Start_IT+0x22c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d004      	beq.n	8001660 <HAL_DMA_Start_IT+0x1bc>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <HAL_DMA_Start_IT+0x230>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_DMA_Start_IT+0x1c0>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_DMA_Start_IT+0x1c2>
 8001664:	2300      	movs	r3, #0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d036      	beq.n	80016d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 021e 	bic.w	r2, r3, #30
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0216 	orr.w	r2, r2, #22
 800167c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d03e      	beq.n	8001704 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0208 	orr.w	r2, r2, #8
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e035      	b.n	8001704 <HAL_DMA_Start_IT+0x260>
 8001698:	40020010 	.word	0x40020010
 800169c:	40020028 	.word	0x40020028
 80016a0:	40020040 	.word	0x40020040
 80016a4:	40020058 	.word	0x40020058
 80016a8:	40020070 	.word	0x40020070
 80016ac:	40020088 	.word	0x40020088
 80016b0:	400200a0 	.word	0x400200a0
 80016b4:	400200b8 	.word	0x400200b8
 80016b8:	40020410 	.word	0x40020410
 80016bc:	40020428 	.word	0x40020428
 80016c0:	40020440 	.word	0x40020440
 80016c4:	40020458 	.word	0x40020458
 80016c8:	40020470 	.word	0x40020470
 80016cc:	40020488 	.word	0x40020488
 80016d0:	400204a0 	.word	0x400204a0
 80016d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 020e 	bic.w	r2, r3, #14
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 020a 	orr.w	r2, r2, #10
 80016ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0204 	orr.w	r2, r2, #4
 8001702:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a83      	ldr	r2, [pc, #524]	; (8001918 <HAL_DMA_Start_IT+0x474>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d072      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a82      	ldr	r2, [pc, #520]	; (800191c <HAL_DMA_Start_IT+0x478>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d06d      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a80      	ldr	r2, [pc, #512]	; (8001920 <HAL_DMA_Start_IT+0x47c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d068      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <HAL_DMA_Start_IT+0x480>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d063      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a7d      	ldr	r2, [pc, #500]	; (8001928 <HAL_DMA_Start_IT+0x484>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d05e      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7c      	ldr	r2, [pc, #496]	; (800192c <HAL_DMA_Start_IT+0x488>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d059      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a7a      	ldr	r2, [pc, #488]	; (8001930 <HAL_DMA_Start_IT+0x48c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d054      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a79      	ldr	r2, [pc, #484]	; (8001934 <HAL_DMA_Start_IT+0x490>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d04f      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a77      	ldr	r2, [pc, #476]	; (8001938 <HAL_DMA_Start_IT+0x494>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d04a      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a76      	ldr	r2, [pc, #472]	; (800193c <HAL_DMA_Start_IT+0x498>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d045      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a74      	ldr	r2, [pc, #464]	; (8001940 <HAL_DMA_Start_IT+0x49c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d040      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a73      	ldr	r2, [pc, #460]	; (8001944 <HAL_DMA_Start_IT+0x4a0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d03b      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a71      	ldr	r2, [pc, #452]	; (8001948 <HAL_DMA_Start_IT+0x4a4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d036      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a70      	ldr	r2, [pc, #448]	; (800194c <HAL_DMA_Start_IT+0x4a8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d031      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a6e      	ldr	r2, [pc, #440]	; (8001950 <HAL_DMA_Start_IT+0x4ac>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d02c      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6d      	ldr	r2, [pc, #436]	; (8001954 <HAL_DMA_Start_IT+0x4b0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d027      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a6b      	ldr	r2, [pc, #428]	; (8001958 <HAL_DMA_Start_IT+0x4b4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d022      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6a      	ldr	r2, [pc, #424]	; (800195c <HAL_DMA_Start_IT+0x4b8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d01d      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a68      	ldr	r2, [pc, #416]	; (8001960 <HAL_DMA_Start_IT+0x4bc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d018      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a67      	ldr	r2, [pc, #412]	; (8001964 <HAL_DMA_Start_IT+0x4c0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d013      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_DMA_Start_IT+0x4c4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00e      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a64      	ldr	r2, [pc, #400]	; (800196c <HAL_DMA_Start_IT+0x4c8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d009      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a62      	ldr	r2, [pc, #392]	; (8001970 <HAL_DMA_Start_IT+0x4cc>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d004      	beq.n	80017f4 <HAL_DMA_Start_IT+0x350>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a61      	ldr	r2, [pc, #388]	; (8001974 <HAL_DMA_Start_IT+0x4d0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_DMA_Start_IT+0x354>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_DMA_Start_IT+0x356>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01a      	beq.n	8001834 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800181a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800182e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001832:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a37      	ldr	r2, [pc, #220]	; (8001918 <HAL_DMA_Start_IT+0x474>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d04a      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a36      	ldr	r2, [pc, #216]	; (800191c <HAL_DMA_Start_IT+0x478>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d045      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a34      	ldr	r2, [pc, #208]	; (8001920 <HAL_DMA_Start_IT+0x47c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d040      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a33      	ldr	r2, [pc, #204]	; (8001924 <HAL_DMA_Start_IT+0x480>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d03b      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a31      	ldr	r2, [pc, #196]	; (8001928 <HAL_DMA_Start_IT+0x484>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d036      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a30      	ldr	r2, [pc, #192]	; (800192c <HAL_DMA_Start_IT+0x488>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d031      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <HAL_DMA_Start_IT+0x48c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d02c      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2d      	ldr	r2, [pc, #180]	; (8001934 <HAL_DMA_Start_IT+0x490>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d027      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <HAL_DMA_Start_IT+0x494>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d022      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2a      	ldr	r2, [pc, #168]	; (800193c <HAL_DMA_Start_IT+0x498>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d01d      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a28      	ldr	r2, [pc, #160]	; (8001940 <HAL_DMA_Start_IT+0x49c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d018      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a27      	ldr	r2, [pc, #156]	; (8001944 <HAL_DMA_Start_IT+0x4a0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d013      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a25      	ldr	r2, [pc, #148]	; (8001948 <HAL_DMA_Start_IT+0x4a4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00e      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a24      	ldr	r2, [pc, #144]	; (800194c <HAL_DMA_Start_IT+0x4a8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d009      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_DMA_Start_IT+0x4ac>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d004      	beq.n	80018d4 <HAL_DMA_Start_IT+0x430>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a21      	ldr	r2, [pc, #132]	; (8001954 <HAL_DMA_Start_IT+0x4b0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d108      	bne.n	80018e6 <HAL_DMA_Start_IT+0x442>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e012      	b.n	800190c <HAL_DMA_Start_IT+0x468>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e009      	b.n	800190c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800190c:	7dfb      	ldrb	r3, [r7, #23]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40020010 	.word	0x40020010
 800191c:	40020028 	.word	0x40020028
 8001920:	40020040 	.word	0x40020040
 8001924:	40020058 	.word	0x40020058
 8001928:	40020070 	.word	0x40020070
 800192c:	40020088 	.word	0x40020088
 8001930:	400200a0 	.word	0x400200a0
 8001934:	400200b8 	.word	0x400200b8
 8001938:	40020410 	.word	0x40020410
 800193c:	40020428 	.word	0x40020428
 8001940:	40020440 	.word	0x40020440
 8001944:	40020458 	.word	0x40020458
 8001948:	40020470 	.word	0x40020470
 800194c:	40020488 	.word	0x40020488
 8001950:	400204a0 	.word	0x400204a0
 8001954:	400204b8 	.word	0x400204b8
 8001958:	58025408 	.word	0x58025408
 800195c:	5802541c 	.word	0x5802541c
 8001960:	58025430 	.word	0x58025430
 8001964:	58025444 	.word	0x58025444
 8001968:	58025458 	.word	0x58025458
 800196c:	5802546c 	.word	0x5802546c
 8001970:	58025480 	.word	0x58025480
 8001974:	58025494 	.word	0x58025494

08001978 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001984:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <HAL_DMA_IRQHandler+0x1ac>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a67      	ldr	r2, [pc, #412]	; (8001b28 <HAL_DMA_IRQHandler+0x1b0>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0a9b      	lsrs	r3, r3, #10
 8001990:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a5f      	ldr	r2, [pc, #380]	; (8001b2c <HAL_DMA_IRQHandler+0x1b4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d04a      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5d      	ldr	r2, [pc, #372]	; (8001b30 <HAL_DMA_IRQHandler+0x1b8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d045      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a5c      	ldr	r2, [pc, #368]	; (8001b34 <HAL_DMA_IRQHandler+0x1bc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d040      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a5a      	ldr	r2, [pc, #360]	; (8001b38 <HAL_DMA_IRQHandler+0x1c0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d03b      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a59      	ldr	r2, [pc, #356]	; (8001b3c <HAL_DMA_IRQHandler+0x1c4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d036      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a57      	ldr	r2, [pc, #348]	; (8001b40 <HAL_DMA_IRQHandler+0x1c8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d031      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a56      	ldr	r2, [pc, #344]	; (8001b44 <HAL_DMA_IRQHandler+0x1cc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d02c      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a54      	ldr	r2, [pc, #336]	; (8001b48 <HAL_DMA_IRQHandler+0x1d0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d027      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a53      	ldr	r2, [pc, #332]	; (8001b4c <HAL_DMA_IRQHandler+0x1d4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d022      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a51      	ldr	r2, [pc, #324]	; (8001b50 <HAL_DMA_IRQHandler+0x1d8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01d      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a50      	ldr	r2, [pc, #320]	; (8001b54 <HAL_DMA_IRQHandler+0x1dc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d018      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_DMA_IRQHandler+0x1e0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a4d      	ldr	r2, [pc, #308]	; (8001b5c <HAL_DMA_IRQHandler+0x1e4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00e      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_DMA_IRQHandler+0x1e8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_DMA_IRQHandler+0x1ec>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d004      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xd2>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a48      	ldr	r2, [pc, #288]	; (8001b68 <HAL_DMA_IRQHandler+0x1f0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_DMA_IRQHandler+0xd6>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_DMA_IRQHandler+0xd8>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 842b 	beq.w	80022ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2208      	movs	r2, #8
 8001a60:	409a      	lsls	r2, r3
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80a2 	beq.w	8001bb0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a2e      	ldr	r2, [pc, #184]	; (8001b2c <HAL_DMA_IRQHandler+0x1b4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d04a      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <HAL_DMA_IRQHandler+0x1b8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d045      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2b      	ldr	r2, [pc, #172]	; (8001b34 <HAL_DMA_IRQHandler+0x1bc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d040      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_DMA_IRQHandler+0x1c0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d03b      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a28      	ldr	r2, [pc, #160]	; (8001b3c <HAL_DMA_IRQHandler+0x1c4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d036      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <HAL_DMA_IRQHandler+0x1c8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d031      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <HAL_DMA_IRQHandler+0x1cc>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d02c      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a24      	ldr	r2, [pc, #144]	; (8001b48 <HAL_DMA_IRQHandler+0x1d0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d027      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_DMA_IRQHandler+0x1d4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d022      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <HAL_DMA_IRQHandler+0x1d8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d01d      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_DMA_IRQHandler+0x1dc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d018      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_DMA_IRQHandler+0x1e0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <HAL_DMA_IRQHandler+0x1e4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00e      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_DMA_IRQHandler+0x1e8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_DMA_IRQHandler+0x1ec>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x194>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <HAL_DMA_IRQHandler+0x1f0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d12f      	bne.n	8001b6c <HAL_DMA_IRQHandler+0x1f4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf14      	ite	ne
 8001b1a:	2301      	movne	r3, #1
 8001b1c:	2300      	moveq	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	e02e      	b.n	8001b80 <HAL_DMA_IRQHandler+0x208>
 8001b22:	bf00      	nop
 8001b24:	24000408 	.word	0x24000408
 8001b28:	1b4e81b5 	.word	0x1b4e81b5
 8001b2c:	40020010 	.word	0x40020010
 8001b30:	40020028 	.word	0x40020028
 8001b34:	40020040 	.word	0x40020040
 8001b38:	40020058 	.word	0x40020058
 8001b3c:	40020070 	.word	0x40020070
 8001b40:	40020088 	.word	0x40020088
 8001b44:	400200a0 	.word	0x400200a0
 8001b48:	400200b8 	.word	0x400200b8
 8001b4c:	40020410 	.word	0x40020410
 8001b50:	40020428 	.word	0x40020428
 8001b54:	40020440 	.word	0x40020440
 8001b58:	40020458 	.word	0x40020458
 8001b5c:	40020470 	.word	0x40020470
 8001b60:	40020488 	.word	0x40020488
 8001b64:	400204a0 	.word	0x400204a0
 8001b68:	400204b8 	.word	0x400204b8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d015      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0204 	bic.w	r2, r2, #4
 8001b92:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06e      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a69      	ldr	r2, [pc, #420]	; (8001d70 <HAL_DMA_IRQHandler+0x3f8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04a      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a67      	ldr	r2, [pc, #412]	; (8001d74 <HAL_DMA_IRQHandler+0x3fc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d045      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <HAL_DMA_IRQHandler+0x400>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d040      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a64      	ldr	r2, [pc, #400]	; (8001d7c <HAL_DMA_IRQHandler+0x404>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d03b      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a63      	ldr	r2, [pc, #396]	; (8001d80 <HAL_DMA_IRQHandler+0x408>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d036      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a61      	ldr	r2, [pc, #388]	; (8001d84 <HAL_DMA_IRQHandler+0x40c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d031      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a60      	ldr	r2, [pc, #384]	; (8001d88 <HAL_DMA_IRQHandler+0x410>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d02c      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5e      	ldr	r2, [pc, #376]	; (8001d8c <HAL_DMA_IRQHandler+0x414>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d027      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a5d      	ldr	r2, [pc, #372]	; (8001d90 <HAL_DMA_IRQHandler+0x418>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d022      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a5b      	ldr	r2, [pc, #364]	; (8001d94 <HAL_DMA_IRQHandler+0x41c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01d      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a5a      	ldr	r2, [pc, #360]	; (8001d98 <HAL_DMA_IRQHandler+0x420>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d018      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <HAL_DMA_IRQHandler+0x424>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a57      	ldr	r2, [pc, #348]	; (8001da0 <HAL_DMA_IRQHandler+0x428>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00e      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a55      	ldr	r2, [pc, #340]	; (8001da4 <HAL_DMA_IRQHandler+0x42c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d009      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a54      	ldr	r2, [pc, #336]	; (8001da8 <HAL_DMA_IRQHandler+0x430>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d004      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2ee>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_DMA_IRQHandler+0x434>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10a      	bne.n	8001c7c <HAL_DMA_IRQHandler+0x304>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e003      	b.n	8001c84 <HAL_DMA_IRQHandler+0x30c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00d      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2201      	movs	r2, #1
 8001c92:	409a      	lsls	r2, r3
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f043 0202 	orr.w	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2204      	movs	r2, #4
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 808f 	beq.w	8001dd8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2c      	ldr	r2, [pc, #176]	; (8001d70 <HAL_DMA_IRQHandler+0x3f8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d04a      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <HAL_DMA_IRQHandler+0x3fc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d045      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <HAL_DMA_IRQHandler+0x400>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d040      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_DMA_IRQHandler+0x404>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d03b      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a26      	ldr	r2, [pc, #152]	; (8001d80 <HAL_DMA_IRQHandler+0x408>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d036      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_DMA_IRQHandler+0x40c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d031      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <HAL_DMA_IRQHandler+0x410>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d02c      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <HAL_DMA_IRQHandler+0x414>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d027      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_DMA_IRQHandler+0x418>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <HAL_DMA_IRQHandler+0x41c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01d      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_DMA_IRQHandler+0x420>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d018      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <HAL_DMA_IRQHandler+0x424>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <HAL_DMA_IRQHandler+0x428>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00e      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <HAL_DMA_IRQHandler+0x42c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d009      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_DMA_IRQHandler+0x430>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d004      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x3e2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a15      	ldr	r2, [pc, #84]	; (8001dac <HAL_DMA_IRQHandler+0x434>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d12a      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x438>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e023      	b.n	8001db8 <HAL_DMA_IRQHandler+0x440>
 8001d70:	40020010 	.word	0x40020010
 8001d74:	40020028 	.word	0x40020028
 8001d78:	40020040 	.word	0x40020040
 8001d7c:	40020058 	.word	0x40020058
 8001d80:	40020070 	.word	0x40020070
 8001d84:	40020088 	.word	0x40020088
 8001d88:	400200a0 	.word	0x400200a0
 8001d8c:	400200b8 	.word	0x400200b8
 8001d90:	40020410 	.word	0x40020410
 8001d94:	40020428 	.word	0x40020428
 8001d98:	40020440 	.word	0x40020440
 8001d9c:	40020458 	.word	0x40020458
 8001da0:	40020470 	.word	0x40020470
 8001da4:	40020488 	.word	0x40020488
 8001da8:	400204a0 	.word	0x400204a0
 8001dac:	400204b8 	.word	0x400204b8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2300      	movs	r3, #0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f043 0204 	orr.w	r2, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2210      	movs	r2, #16
 8001de2:	409a      	lsls	r2, r3
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a6 	beq.w	8001f3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a85      	ldr	r2, [pc, #532]	; (8002008 <HAL_DMA_IRQHandler+0x690>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d04a      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a83      	ldr	r2, [pc, #524]	; (800200c <HAL_DMA_IRQHandler+0x694>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d045      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a82      	ldr	r2, [pc, #520]	; (8002010 <HAL_DMA_IRQHandler+0x698>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d040      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a80      	ldr	r2, [pc, #512]	; (8002014 <HAL_DMA_IRQHandler+0x69c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d03b      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7f      	ldr	r2, [pc, #508]	; (8002018 <HAL_DMA_IRQHandler+0x6a0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d036      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a7d      	ldr	r2, [pc, #500]	; (800201c <HAL_DMA_IRQHandler+0x6a4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d031      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7c      	ldr	r2, [pc, #496]	; (8002020 <HAL_DMA_IRQHandler+0x6a8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d02c      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a7a      	ldr	r2, [pc, #488]	; (8002024 <HAL_DMA_IRQHandler+0x6ac>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d027      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a79      	ldr	r2, [pc, #484]	; (8002028 <HAL_DMA_IRQHandler+0x6b0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d022      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a77      	ldr	r2, [pc, #476]	; (800202c <HAL_DMA_IRQHandler+0x6b4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01d      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a76      	ldr	r2, [pc, #472]	; (8002030 <HAL_DMA_IRQHandler+0x6b8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d018      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a74      	ldr	r2, [pc, #464]	; (8002034 <HAL_DMA_IRQHandler+0x6bc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a73      	ldr	r2, [pc, #460]	; (8002038 <HAL_DMA_IRQHandler+0x6c0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00e      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a71      	ldr	r2, [pc, #452]	; (800203c <HAL_DMA_IRQHandler+0x6c4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a70      	ldr	r2, [pc, #448]	; (8002040 <HAL_DMA_IRQHandler+0x6c8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d004      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x516>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6e      	ldr	r2, [pc, #440]	; (8002044 <HAL_DMA_IRQHandler+0x6cc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d10a      	bne.n	8001ea4 <HAL_DMA_IRQHandler+0x52c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e009      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x540>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf14      	ite	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	2300      	moveq	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03e      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d018      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d108      	bne.n	8001efa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d024      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
 8001ef8:	e01f      	b.n	8001f3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01b      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
 8001f0a:	e016      	b.n	8001f3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d107      	bne.n	8001f2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0208 	bic.w	r2, r2, #8
 8001f28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2220      	movs	r2, #32
 8001f44:	409a      	lsls	r2, r3
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8110 	beq.w	8002170 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2c      	ldr	r2, [pc, #176]	; (8002008 <HAL_DMA_IRQHandler+0x690>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d04a      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a2b      	ldr	r2, [pc, #172]	; (800200c <HAL_DMA_IRQHandler+0x694>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d045      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a29      	ldr	r2, [pc, #164]	; (8002010 <HAL_DMA_IRQHandler+0x698>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d040      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a28      	ldr	r2, [pc, #160]	; (8002014 <HAL_DMA_IRQHandler+0x69c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d03b      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <HAL_DMA_IRQHandler+0x6a0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d036      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a25      	ldr	r2, [pc, #148]	; (800201c <HAL_DMA_IRQHandler+0x6a4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d031      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a23      	ldr	r2, [pc, #140]	; (8002020 <HAL_DMA_IRQHandler+0x6a8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02c      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a22      	ldr	r2, [pc, #136]	; (8002024 <HAL_DMA_IRQHandler+0x6ac>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d027      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a20      	ldr	r2, [pc, #128]	; (8002028 <HAL_DMA_IRQHandler+0x6b0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d022      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_DMA_IRQHandler+0x6b4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d01d      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_DMA_IRQHandler+0x6b8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d018      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_DMA_IRQHandler+0x6bc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <HAL_DMA_IRQHandler+0x6c0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_DMA_IRQHandler+0x6c4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a17      	ldr	r2, [pc, #92]	; (8002040 <HAL_DMA_IRQHandler+0x6c8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x678>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_DMA_IRQHandler+0x6cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d12b      	bne.n	8002048 <HAL_DMA_IRQHandler+0x6d0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	e02a      	b.n	800205c <HAL_DMA_IRQHandler+0x6e4>
 8002006:	bf00      	nop
 8002008:	40020010 	.word	0x40020010
 800200c:	40020028 	.word	0x40020028
 8002010:	40020040 	.word	0x40020040
 8002014:	40020058 	.word	0x40020058
 8002018:	40020070 	.word	0x40020070
 800201c:	40020088 	.word	0x40020088
 8002020:	400200a0 	.word	0x400200a0
 8002024:	400200b8 	.word	0x400200b8
 8002028:	40020410 	.word	0x40020410
 800202c:	40020428 	.word	0x40020428
 8002030:	40020440 	.word	0x40020440
 8002034:	40020458 	.word	0x40020458
 8002038:	40020470 	.word	0x40020470
 800203c:	40020488 	.word	0x40020488
 8002040:	400204a0 	.word	0x400204a0
 8002044:	400204b8 	.word	0x400204b8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8087 	beq.w	8002170 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2220      	movs	r2, #32
 800206c:	409a      	lsls	r2, r3
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b04      	cmp	r3, #4
 800207c:	d139      	bne.n	80020f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0216 	bic.w	r2, r2, #22
 800208c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800209c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <HAL_DMA_IRQHandler+0x736>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	223f      	movs	r2, #63	; 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 834a 	beq.w	800277c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
          }
          return;
 80020f0:	e344      	b.n	800277c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d018      	beq.n	8002132 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d108      	bne.n	8002120 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	2b00      	cmp	r3, #0
 8002114:	d02c      	beq.n	8002170 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	e027      	b.n	8002170 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d023      	beq.n	8002170 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
 8002130:	e01e      	b.n	8002170 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10f      	bne.n	8002160 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0210 	bic.w	r2, r2, #16
 800214e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8306 	beq.w	8002786 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8088 	beq.w	8002298 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2204      	movs	r2, #4
 800218c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a7a      	ldr	r2, [pc, #488]	; (8002380 <HAL_DMA_IRQHandler+0xa08>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d04a      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a79      	ldr	r2, [pc, #484]	; (8002384 <HAL_DMA_IRQHandler+0xa0c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d045      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a77      	ldr	r2, [pc, #476]	; (8002388 <HAL_DMA_IRQHandler+0xa10>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d040      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a76      	ldr	r2, [pc, #472]	; (800238c <HAL_DMA_IRQHandler+0xa14>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d03b      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a74      	ldr	r2, [pc, #464]	; (8002390 <HAL_DMA_IRQHandler+0xa18>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d036      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a73      	ldr	r2, [pc, #460]	; (8002394 <HAL_DMA_IRQHandler+0xa1c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d031      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a71      	ldr	r2, [pc, #452]	; (8002398 <HAL_DMA_IRQHandler+0xa20>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d02c      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a70      	ldr	r2, [pc, #448]	; (800239c <HAL_DMA_IRQHandler+0xa24>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d027      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a6e      	ldr	r2, [pc, #440]	; (80023a0 <HAL_DMA_IRQHandler+0xa28>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d022      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a6d      	ldr	r2, [pc, #436]	; (80023a4 <HAL_DMA_IRQHandler+0xa2c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d01d      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6b      	ldr	r2, [pc, #428]	; (80023a8 <HAL_DMA_IRQHandler+0xa30>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d018      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6a      	ldr	r2, [pc, #424]	; (80023ac <HAL_DMA_IRQHandler+0xa34>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a68      	ldr	r2, [pc, #416]	; (80023b0 <HAL_DMA_IRQHandler+0xa38>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00e      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <HAL_DMA_IRQHandler+0xa3c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <HAL_DMA_IRQHandler+0xa40>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d004      	beq.n	8002230 <HAL_DMA_IRQHandler+0x8b8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a64      	ldr	r2, [pc, #400]	; (80023bc <HAL_DMA_IRQHandler+0xa44>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d108      	bne.n	8002242 <HAL_DMA_IRQHandler+0x8ca>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e007      	b.n	8002252 <HAL_DMA_IRQHandler+0x8da>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3301      	adds	r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	429a      	cmp	r2, r3
 800225c:	d307      	bcc.n	800226e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f2      	bne.n	8002252 <HAL_DMA_IRQHandler+0x8da>
 800226c:	e000      	b.n	8002270 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800226e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2203      	movs	r2, #3
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002286:	e003      	b.n	8002290 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8272 	beq.w	8002786 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
 80022aa:	e26c      	b.n	8002786 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a43      	ldr	r2, [pc, #268]	; (80023c0 <HAL_DMA_IRQHandler+0xa48>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d022      	beq.n	80022fc <HAL_DMA_IRQHandler+0x984>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a42      	ldr	r2, [pc, #264]	; (80023c4 <HAL_DMA_IRQHandler+0xa4c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d01d      	beq.n	80022fc <HAL_DMA_IRQHandler+0x984>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a40      	ldr	r2, [pc, #256]	; (80023c8 <HAL_DMA_IRQHandler+0xa50>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d018      	beq.n	80022fc <HAL_DMA_IRQHandler+0x984>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a3f      	ldr	r2, [pc, #252]	; (80023cc <HAL_DMA_IRQHandler+0xa54>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d013      	beq.n	80022fc <HAL_DMA_IRQHandler+0x984>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3d      	ldr	r2, [pc, #244]	; (80023d0 <HAL_DMA_IRQHandler+0xa58>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00e      	beq.n	80022fc <HAL_DMA_IRQHandler+0x984>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a3c      	ldr	r2, [pc, #240]	; (80023d4 <HAL_DMA_IRQHandler+0xa5c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d009      	beq.n	80022fc <HAL_DMA_IRQHandler+0x984>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a3a      	ldr	r2, [pc, #232]	; (80023d8 <HAL_DMA_IRQHandler+0xa60>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_DMA_IRQHandler+0x984>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a39      	ldr	r2, [pc, #228]	; (80023dc <HAL_DMA_IRQHandler+0xa64>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_DMA_IRQHandler+0x988>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_DMA_IRQHandler+0x98a>
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 823f 	beq.w	8002786 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2204      	movs	r2, #4
 800231a:	409a      	lsls	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80cd 	beq.w	80024c0 <HAL_DMA_IRQHandler+0xb48>
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80c7 	beq.w	80024c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2204      	movs	r2, #4
 800233c:	409a      	lsls	r2, r3
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d049      	beq.n	80023e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8210 	beq.w	8002780 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002368:	e20a      	b.n	8002780 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8206 	beq.w	8002780 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800237c:	e200      	b.n	8002780 <HAL_DMA_IRQHandler+0xe08>
 800237e:	bf00      	nop
 8002380:	40020010 	.word	0x40020010
 8002384:	40020028 	.word	0x40020028
 8002388:	40020040 	.word	0x40020040
 800238c:	40020058 	.word	0x40020058
 8002390:	40020070 	.word	0x40020070
 8002394:	40020088 	.word	0x40020088
 8002398:	400200a0 	.word	0x400200a0
 800239c:	400200b8 	.word	0x400200b8
 80023a0:	40020410 	.word	0x40020410
 80023a4:	40020428 	.word	0x40020428
 80023a8:	40020440 	.word	0x40020440
 80023ac:	40020458 	.word	0x40020458
 80023b0:	40020470 	.word	0x40020470
 80023b4:	40020488 	.word	0x40020488
 80023b8:	400204a0 	.word	0x400204a0
 80023bc:	400204b8 	.word	0x400204b8
 80023c0:	58025408 	.word	0x58025408
 80023c4:	5802541c 	.word	0x5802541c
 80023c8:	58025430 	.word	0x58025430
 80023cc:	58025444 	.word	0x58025444
 80023d0:	58025458 	.word	0x58025458
 80023d4:	5802546c 	.word	0x5802546c
 80023d8:	58025480 	.word	0x58025480
 80023dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d160      	bne.n	80024ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a8c      	ldr	r2, [pc, #560]	; (8002620 <HAL_DMA_IRQHandler+0xca8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d04a      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a8a      	ldr	r2, [pc, #552]	; (8002624 <HAL_DMA_IRQHandler+0xcac>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d045      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a89      	ldr	r2, [pc, #548]	; (8002628 <HAL_DMA_IRQHandler+0xcb0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d040      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a87      	ldr	r2, [pc, #540]	; (800262c <HAL_DMA_IRQHandler+0xcb4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d03b      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a86      	ldr	r2, [pc, #536]	; (8002630 <HAL_DMA_IRQHandler+0xcb8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d036      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a84      	ldr	r2, [pc, #528]	; (8002634 <HAL_DMA_IRQHandler+0xcbc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d031      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a83      	ldr	r2, [pc, #524]	; (8002638 <HAL_DMA_IRQHandler+0xcc0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d02c      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a81      	ldr	r2, [pc, #516]	; (800263c <HAL_DMA_IRQHandler+0xcc4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d027      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a80      	ldr	r2, [pc, #512]	; (8002640 <HAL_DMA_IRQHandler+0xcc8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d022      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a7e      	ldr	r2, [pc, #504]	; (8002644 <HAL_DMA_IRQHandler+0xccc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01d      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7d      	ldr	r2, [pc, #500]	; (8002648 <HAL_DMA_IRQHandler+0xcd0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d018      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a7b      	ldr	r2, [pc, #492]	; (800264c <HAL_DMA_IRQHandler+0xcd4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7a      	ldr	r2, [pc, #488]	; (8002650 <HAL_DMA_IRQHandler+0xcd8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00e      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a78      	ldr	r2, [pc, #480]	; (8002654 <HAL_DMA_IRQHandler+0xcdc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a77      	ldr	r2, [pc, #476]	; (8002658 <HAL_DMA_IRQHandler+0xce0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_DMA_IRQHandler+0xb12>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a75      	ldr	r2, [pc, #468]	; (800265c <HAL_DMA_IRQHandler+0xce4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d108      	bne.n	800249c <HAL_DMA_IRQHandler+0xb24>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0208 	bic.w	r2, r2, #8
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <HAL_DMA_IRQHandler+0xb34>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0204 	bic.w	r2, r2, #4
 80024aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8165 	beq.w	8002780 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024be:	e15f      	b.n	8002780 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2202      	movs	r2, #2
 80024ca:	409a      	lsls	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80c5 	beq.w	8002660 <HAL_DMA_IRQHandler+0xce8>
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80bf 	beq.w	8002660 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2202      	movs	r2, #2
 80024ec:	409a      	lsls	r2, r3
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d018      	beq.n	800252e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 813a 	beq.w	8002784 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002518:	e134      	b.n	8002784 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8130 	beq.w	8002784 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800252c:	e12a      	b.n	8002784 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d168      	bne.n	800260a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a38      	ldr	r2, [pc, #224]	; (8002620 <HAL_DMA_IRQHandler+0xca8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d04a      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a37      	ldr	r2, [pc, #220]	; (8002624 <HAL_DMA_IRQHandler+0xcac>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d045      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a35      	ldr	r2, [pc, #212]	; (8002628 <HAL_DMA_IRQHandler+0xcb0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d040      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a34      	ldr	r2, [pc, #208]	; (800262c <HAL_DMA_IRQHandler+0xcb4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d03b      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a32      	ldr	r2, [pc, #200]	; (8002630 <HAL_DMA_IRQHandler+0xcb8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d036      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a31      	ldr	r2, [pc, #196]	; (8002634 <HAL_DMA_IRQHandler+0xcbc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d031      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2f      	ldr	r2, [pc, #188]	; (8002638 <HAL_DMA_IRQHandler+0xcc0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d02c      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2e      	ldr	r2, [pc, #184]	; (800263c <HAL_DMA_IRQHandler+0xcc4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d027      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2c      	ldr	r2, [pc, #176]	; (8002640 <HAL_DMA_IRQHandler+0xcc8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d022      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <HAL_DMA_IRQHandler+0xccc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d01d      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a29      	ldr	r2, [pc, #164]	; (8002648 <HAL_DMA_IRQHandler+0xcd0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d018      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a28      	ldr	r2, [pc, #160]	; (800264c <HAL_DMA_IRQHandler+0xcd4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d013      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a26      	ldr	r2, [pc, #152]	; (8002650 <HAL_DMA_IRQHandler+0xcd8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00e      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a25      	ldr	r2, [pc, #148]	; (8002654 <HAL_DMA_IRQHandler+0xcdc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d009      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a23      	ldr	r2, [pc, #140]	; (8002658 <HAL_DMA_IRQHandler+0xce0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_DMA_IRQHandler+0xc60>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a22      	ldr	r2, [pc, #136]	; (800265c <HAL_DMA_IRQHandler+0xce4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <HAL_DMA_IRQHandler+0xc72>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0214 	bic.w	r2, r2, #20
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e007      	b.n	80025fa <HAL_DMA_IRQHandler+0xc82>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 020a 	bic.w	r2, r2, #10
 80025f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 80b8 	beq.w	8002784 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800261c:	e0b2      	b.n	8002784 <HAL_DMA_IRQHandler+0xe0c>
 800261e:	bf00      	nop
 8002620:	40020010 	.word	0x40020010
 8002624:	40020028 	.word	0x40020028
 8002628:	40020040 	.word	0x40020040
 800262c:	40020058 	.word	0x40020058
 8002630:	40020070 	.word	0x40020070
 8002634:	40020088 	.word	0x40020088
 8002638:	400200a0 	.word	0x400200a0
 800263c:	400200b8 	.word	0x400200b8
 8002640:	40020410 	.word	0x40020410
 8002644:	40020428 	.word	0x40020428
 8002648:	40020440 	.word	0x40020440
 800264c:	40020458 	.word	0x40020458
 8002650:	40020470 	.word	0x40020470
 8002654:	40020488 	.word	0x40020488
 8002658:	400204a0 	.word	0x400204a0
 800265c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2208      	movs	r2, #8
 800266a:	409a      	lsls	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8088 	beq.w	8002786 <HAL_DMA_IRQHandler+0xe0e>
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8082 	beq.w	8002786 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a41      	ldr	r2, [pc, #260]	; (800278c <HAL_DMA_IRQHandler+0xe14>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d04a      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <HAL_DMA_IRQHandler+0xe18>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d045      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a3e      	ldr	r2, [pc, #248]	; (8002794 <HAL_DMA_IRQHandler+0xe1c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d040      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3c      	ldr	r2, [pc, #240]	; (8002798 <HAL_DMA_IRQHandler+0xe20>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d03b      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a3b      	ldr	r2, [pc, #236]	; (800279c <HAL_DMA_IRQHandler+0xe24>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d036      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a39      	ldr	r2, [pc, #228]	; (80027a0 <HAL_DMA_IRQHandler+0xe28>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d031      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a38      	ldr	r2, [pc, #224]	; (80027a4 <HAL_DMA_IRQHandler+0xe2c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d02c      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a36      	ldr	r2, [pc, #216]	; (80027a8 <HAL_DMA_IRQHandler+0xe30>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d027      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a35      	ldr	r2, [pc, #212]	; (80027ac <HAL_DMA_IRQHandler+0xe34>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a33      	ldr	r2, [pc, #204]	; (80027b0 <HAL_DMA_IRQHandler+0xe38>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a32      	ldr	r2, [pc, #200]	; (80027b4 <HAL_DMA_IRQHandler+0xe3c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d018      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <HAL_DMA_IRQHandler+0xe40>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <HAL_DMA_IRQHandler+0xe44>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00e      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <HAL_DMA_IRQHandler+0xe48>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2c      	ldr	r2, [pc, #176]	; (80027c4 <HAL_DMA_IRQHandler+0xe4c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_DMA_IRQHandler+0xdaa>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <HAL_DMA_IRQHandler+0xe50>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d108      	bne.n	8002734 <HAL_DMA_IRQHandler+0xdbc>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 021c 	bic.w	r2, r2, #28
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e007      	b.n	8002744 <HAL_DMA_IRQHandler+0xdcc>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020e 	bic.w	r2, r2, #14
 8002742:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2201      	movs	r2, #1
 800274e:	409a      	lsls	r2, r3
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
 800277a:	e004      	b.n	8002786 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800277c:	bf00      	nop
 800277e:	e002      	b.n	8002786 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002784:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40020010 	.word	0x40020010
 8002790:	40020028 	.word	0x40020028
 8002794:	40020040 	.word	0x40020040
 8002798:	40020058 	.word	0x40020058
 800279c:	40020070 	.word	0x40020070
 80027a0:	40020088 	.word	0x40020088
 80027a4:	400200a0 	.word	0x400200a0
 80027a8:	400200b8 	.word	0x400200b8
 80027ac:	40020410 	.word	0x40020410
 80027b0:	40020428 	.word	0x40020428
 80027b4:	40020440 	.word	0x40020440
 80027b8:	40020458 	.word	0x40020458
 80027bc:	40020470 	.word	0x40020470
 80027c0:	40020488 	.word	0x40020488
 80027c4:	400204a0 	.word	0x400204a0
 80027c8:	400204b8 	.word	0x400204b8

080027cc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a84      	ldr	r2, [pc, #528]	; (8002a14 <DMA_SetConfig+0x230>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d072      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a82      	ldr	r2, [pc, #520]	; (8002a18 <DMA_SetConfig+0x234>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d06d      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a81      	ldr	r2, [pc, #516]	; (8002a1c <DMA_SetConfig+0x238>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d068      	beq.n	80028ee <DMA_SetConfig+0x10a>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a7f      	ldr	r2, [pc, #508]	; (8002a20 <DMA_SetConfig+0x23c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d063      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7e      	ldr	r2, [pc, #504]	; (8002a24 <DMA_SetConfig+0x240>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d05e      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a7c      	ldr	r2, [pc, #496]	; (8002a28 <DMA_SetConfig+0x244>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d059      	beq.n	80028ee <DMA_SetConfig+0x10a>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a7b      	ldr	r2, [pc, #492]	; (8002a2c <DMA_SetConfig+0x248>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d054      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a79      	ldr	r2, [pc, #484]	; (8002a30 <DMA_SetConfig+0x24c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d04f      	beq.n	80028ee <DMA_SetConfig+0x10a>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a78      	ldr	r2, [pc, #480]	; (8002a34 <DMA_SetConfig+0x250>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d04a      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a76      	ldr	r2, [pc, #472]	; (8002a38 <DMA_SetConfig+0x254>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d045      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a75      	ldr	r2, [pc, #468]	; (8002a3c <DMA_SetConfig+0x258>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d040      	beq.n	80028ee <DMA_SetConfig+0x10a>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a73      	ldr	r2, [pc, #460]	; (8002a40 <DMA_SetConfig+0x25c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d03b      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a72      	ldr	r2, [pc, #456]	; (8002a44 <DMA_SetConfig+0x260>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d036      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a70      	ldr	r2, [pc, #448]	; (8002a48 <DMA_SetConfig+0x264>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d031      	beq.n	80028ee <DMA_SetConfig+0x10a>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6f      	ldr	r2, [pc, #444]	; (8002a4c <DMA_SetConfig+0x268>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d02c      	beq.n	80028ee <DMA_SetConfig+0x10a>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6d      	ldr	r2, [pc, #436]	; (8002a50 <DMA_SetConfig+0x26c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d027      	beq.n	80028ee <DMA_SetConfig+0x10a>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6c      	ldr	r2, [pc, #432]	; (8002a54 <DMA_SetConfig+0x270>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d022      	beq.n	80028ee <DMA_SetConfig+0x10a>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a6a      	ldr	r2, [pc, #424]	; (8002a58 <DMA_SetConfig+0x274>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01d      	beq.n	80028ee <DMA_SetConfig+0x10a>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <DMA_SetConfig+0x278>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d018      	beq.n	80028ee <DMA_SetConfig+0x10a>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a67      	ldr	r2, [pc, #412]	; (8002a60 <DMA_SetConfig+0x27c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <DMA_SetConfig+0x10a>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a66      	ldr	r2, [pc, #408]	; (8002a64 <DMA_SetConfig+0x280>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00e      	beq.n	80028ee <DMA_SetConfig+0x10a>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a64      	ldr	r2, [pc, #400]	; (8002a68 <DMA_SetConfig+0x284>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d009      	beq.n	80028ee <DMA_SetConfig+0x10a>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a63      	ldr	r2, [pc, #396]	; (8002a6c <DMA_SetConfig+0x288>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d004      	beq.n	80028ee <DMA_SetConfig+0x10a>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a61      	ldr	r2, [pc, #388]	; (8002a70 <DMA_SetConfig+0x28c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <DMA_SetConfig+0x10e>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <DMA_SetConfig+0x110>
 80028f2:	2300      	movs	r3, #0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002900:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d004      	beq.n	8002914 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002912:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3e      	ldr	r2, [pc, #248]	; (8002a14 <DMA_SetConfig+0x230>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d04a      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a3d      	ldr	r2, [pc, #244]	; (8002a18 <DMA_SetConfig+0x234>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d045      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <DMA_SetConfig+0x238>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d040      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3a      	ldr	r2, [pc, #232]	; (8002a20 <DMA_SetConfig+0x23c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d03b      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a38      	ldr	r2, [pc, #224]	; (8002a24 <DMA_SetConfig+0x240>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d036      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a37      	ldr	r2, [pc, #220]	; (8002a28 <DMA_SetConfig+0x244>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d031      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a35      	ldr	r2, [pc, #212]	; (8002a2c <DMA_SetConfig+0x248>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02c      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <DMA_SetConfig+0x24c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d027      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a32      	ldr	r2, [pc, #200]	; (8002a34 <DMA_SetConfig+0x250>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d022      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <DMA_SetConfig+0x254>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d01d      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2f      	ldr	r2, [pc, #188]	; (8002a3c <DMA_SetConfig+0x258>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d018      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <DMA_SetConfig+0x25c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d013      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2c      	ldr	r2, [pc, #176]	; (8002a44 <DMA_SetConfig+0x260>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00e      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <DMA_SetConfig+0x264>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d009      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <DMA_SetConfig+0x268>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <DMA_SetConfig+0x1d0>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <DMA_SetConfig+0x26c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <DMA_SetConfig+0x1d4>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <DMA_SetConfig+0x1d6>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d05a      	beq.n	8002a74 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	223f      	movs	r2, #63	; 0x3f
 80029c8:	409a      	lsls	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029dc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d108      	bne.n	8002a00 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80029fe:	e087      	b.n	8002b10 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
}
 8002a10:	e07e      	b.n	8002b10 <DMA_SetConfig+0x32c>
 8002a12:	bf00      	nop
 8002a14:	40020010 	.word	0x40020010
 8002a18:	40020028 	.word	0x40020028
 8002a1c:	40020040 	.word	0x40020040
 8002a20:	40020058 	.word	0x40020058
 8002a24:	40020070 	.word	0x40020070
 8002a28:	40020088 	.word	0x40020088
 8002a2c:	400200a0 	.word	0x400200a0
 8002a30:	400200b8 	.word	0x400200b8
 8002a34:	40020410 	.word	0x40020410
 8002a38:	40020428 	.word	0x40020428
 8002a3c:	40020440 	.word	0x40020440
 8002a40:	40020458 	.word	0x40020458
 8002a44:	40020470 	.word	0x40020470
 8002a48:	40020488 	.word	0x40020488
 8002a4c:	400204a0 	.word	0x400204a0
 8002a50:	400204b8 	.word	0x400204b8
 8002a54:	58025408 	.word	0x58025408
 8002a58:	5802541c 	.word	0x5802541c
 8002a5c:	58025430 	.word	0x58025430
 8002a60:	58025444 	.word	0x58025444
 8002a64:	58025458 	.word	0x58025458
 8002a68:	5802546c 	.word	0x5802546c
 8002a6c:	58025480 	.word	0x58025480
 8002a70:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <DMA_SetConfig+0x338>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <DMA_SetConfig+0x2e0>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <DMA_SetConfig+0x33c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01d      	beq.n	8002ac4 <DMA_SetConfig+0x2e0>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <DMA_SetConfig+0x340>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <DMA_SetConfig+0x2e0>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <DMA_SetConfig+0x344>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <DMA_SetConfig+0x2e0>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <DMA_SetConfig+0x348>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <DMA_SetConfig+0x2e0>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <DMA_SetConfig+0x34c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <DMA_SetConfig+0x2e0>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <DMA_SetConfig+0x350>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <DMA_SetConfig+0x2e0>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1e      	ldr	r2, [pc, #120]	; (8002b38 <DMA_SetConfig+0x354>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <DMA_SetConfig+0x2e4>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <DMA_SetConfig+0x2e6>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d020      	beq.n	8002b10 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d108      	bne.n	8002b00 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	60da      	str	r2, [r3, #12]
}
 8002afe:	e007      	b.n	8002b10 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	60da      	str	r2, [r3, #12]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	58025408 	.word	0x58025408
 8002b20:	5802541c 	.word	0x5802541c
 8002b24:	58025430 	.word	0x58025430
 8002b28:	58025444 	.word	0x58025444
 8002b2c:	58025458 	.word	0x58025458
 8002b30:	5802546c 	.word	0x5802546c
 8002b34:	58025480 	.word	0x58025480
 8002b38:	58025494 	.word	0x58025494

08002b3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a42      	ldr	r2, [pc, #264]	; (8002c54 <DMA_CalcBaseAndBitshift+0x118>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d04a      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a41      	ldr	r2, [pc, #260]	; (8002c58 <DMA_CalcBaseAndBitshift+0x11c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d045      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a3f      	ldr	r2, [pc, #252]	; (8002c5c <DMA_CalcBaseAndBitshift+0x120>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d040      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a3e      	ldr	r2, [pc, #248]	; (8002c60 <DMA_CalcBaseAndBitshift+0x124>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d03b      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3c      	ldr	r2, [pc, #240]	; (8002c64 <DMA_CalcBaseAndBitshift+0x128>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d036      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3b      	ldr	r2, [pc, #236]	; (8002c68 <DMA_CalcBaseAndBitshift+0x12c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d031      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a39      	ldr	r2, [pc, #228]	; (8002c6c <DMA_CalcBaseAndBitshift+0x130>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d02c      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <DMA_CalcBaseAndBitshift+0x134>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d027      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a36      	ldr	r2, [pc, #216]	; (8002c74 <DMA_CalcBaseAndBitshift+0x138>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d022      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <DMA_CalcBaseAndBitshift+0x13c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d01d      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a33      	ldr	r2, [pc, #204]	; (8002c7c <DMA_CalcBaseAndBitshift+0x140>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d018      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <DMA_CalcBaseAndBitshift+0x144>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a30      	ldr	r2, [pc, #192]	; (8002c84 <DMA_CalcBaseAndBitshift+0x148>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00e      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2f      	ldr	r2, [pc, #188]	; (8002c88 <DMA_CalcBaseAndBitshift+0x14c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d009      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <DMA_CalcBaseAndBitshift+0x150>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <DMA_CalcBaseAndBitshift+0xa8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <DMA_CalcBaseAndBitshift+0x154>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <DMA_CalcBaseAndBitshift+0xac>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <DMA_CalcBaseAndBitshift+0xae>
 8002be8:	2300      	movs	r3, #0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d024      	beq.n	8002c38 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3b10      	subs	r3, #16
 8002bf6:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <DMA_CalcBaseAndBitshift+0x158>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <DMA_CalcBaseAndBitshift+0x15c>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d908      	bls.n	8002c28 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <DMA_CalcBaseAndBitshift+0x160>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	1d1a      	adds	r2, r3, #4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	659a      	str	r2, [r3, #88]	; 0x58
 8002c26:	e00d      	b.n	8002c44 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <DMA_CalcBaseAndBitshift+0x160>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6593      	str	r3, [r2, #88]	; 0x58
 8002c36:	e005      	b.n	8002c44 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40020010 	.word	0x40020010
 8002c58:	40020028 	.word	0x40020028
 8002c5c:	40020040 	.word	0x40020040
 8002c60:	40020058 	.word	0x40020058
 8002c64:	40020070 	.word	0x40020070
 8002c68:	40020088 	.word	0x40020088
 8002c6c:	400200a0 	.word	0x400200a0
 8002c70:	400200b8 	.word	0x400200b8
 8002c74:	40020410 	.word	0x40020410
 8002c78:	40020428 	.word	0x40020428
 8002c7c:	40020440 	.word	0x40020440
 8002c80:	40020458 	.word	0x40020458
 8002c84:	40020470 	.word	0x40020470
 8002c88:	40020488 	.word	0x40020488
 8002c8c:	400204a0 	.word	0x400204a0
 8002c90:	400204b8 	.word	0x400204b8
 8002c94:	aaaaaaab 	.word	0xaaaaaaab
 8002c98:	0800af60 	.word	0x0800af60
 8002c9c:	fffffc00 	.word	0xfffffc00

08002ca0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d120      	bne.n	8002cf6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d858      	bhi.n	8002d6e <DMA_CheckFifoParam+0xce>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <DMA_CheckFifoParam+0x24>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002ce7 	.word	0x08002ce7
 8002ccc:	08002cd5 	.word	0x08002cd5
 8002cd0:	08002d6f 	.word	0x08002d6f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d048      	beq.n	8002d72 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ce4:	e045      	b.n	8002d72 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cee:	d142      	bne.n	8002d76 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002cf4:	e03f      	b.n	8002d76 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	d123      	bne.n	8002d48 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d838      	bhi.n	8002d7a <DMA_CheckFifoParam+0xda>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <DMA_CheckFifoParam+0x70>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002d27 	.word	0x08002d27
 8002d18:	08002d21 	.word	0x08002d21
 8002d1c:	08002d39 	.word	0x08002d39
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
        break;
 8002d24:	e030      	b.n	8002d88 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d025      	beq.n	8002d7e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d36:	e022      	b.n	8002d7e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d40:	d11f      	bne.n	8002d82 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d46:	e01c      	b.n	8002d82 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d902      	bls.n	8002d56 <DMA_CheckFifoParam+0xb6>
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d003      	beq.n	8002d5c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002d54:	e018      	b.n	8002d88 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
        break;
 8002d5a:	e015      	b.n	8002d88 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8002d6c:	e00b      	b.n	8002d86 <DMA_CheckFifoParam+0xe6>
        break;
 8002d6e:	bf00      	nop
 8002d70:	e00a      	b.n	8002d88 <DMA_CheckFifoParam+0xe8>
        break;
 8002d72:	bf00      	nop
 8002d74:	e008      	b.n	8002d88 <DMA_CheckFifoParam+0xe8>
        break;
 8002d76:	bf00      	nop
 8002d78:	e006      	b.n	8002d88 <DMA_CheckFifoParam+0xe8>
        break;
 8002d7a:	bf00      	nop
 8002d7c:	e004      	b.n	8002d88 <DMA_CheckFifoParam+0xe8>
        break;
 8002d7e:	bf00      	nop
 8002d80:	e002      	b.n	8002d88 <DMA_CheckFifoParam+0xe8>
        break;
 8002d82:	bf00      	nop
 8002d84:	e000      	b.n	8002d88 <DMA_CheckFifoParam+0xe8>
    break;
 8002d86:	bf00      	nop
    }
  }

  return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop

08002d98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d022      	beq.n	8002df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a36      	ldr	r2, [pc, #216]	; (8002e90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01d      	beq.n	8002df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a35      	ldr	r2, [pc, #212]	; (8002e94 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d018      	beq.n	8002df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a33      	ldr	r2, [pc, #204]	; (8002e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00e      	beq.n	8002df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d009      	beq.n	8002df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2f      	ldr	r2, [pc, #188]	; (8002ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d004      	beq.n	8002df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01a      	beq.n	8002e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3b08      	subs	r3, #8
 8002e08:	4a28      	ldr	r2, [pc, #160]	; (8002eac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a24      	ldr	r2, [pc, #144]	; (8002eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002e24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002e34:	e024      	b.n	8002e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3b10      	subs	r3, #16
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d806      	bhi.n	8002e5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d902      	bls.n	8002e5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002e70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2201      	movs	r2, #1
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	58025408 	.word	0x58025408
 8002e90:	5802541c 	.word	0x5802541c
 8002e94:	58025430 	.word	0x58025430
 8002e98:	58025444 	.word	0x58025444
 8002e9c:	58025458 	.word	0x58025458
 8002ea0:	5802546c 	.word	0x5802546c
 8002ea4:	58025480 	.word	0x58025480
 8002ea8:	58025494 	.word	0x58025494
 8002eac:	cccccccd 	.word	0xcccccccd
 8002eb0:	16009600 	.word	0x16009600
 8002eb4:	58025880 	.word	0x58025880
 8002eb8:	aaaaaaab 	.word	0xaaaaaaab
 8002ebc:	400204b8 	.word	0x400204b8
 8002ec0:	4002040f 	.word	0x4002040f
 8002ec4:	10008200 	.word	0x10008200
 8002ec8:	40020880 	.word	0x40020880

08002ecc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04a      	beq.n	8002f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d847      	bhi.n	8002f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a25      	ldr	r2, [pc, #148]	; (8002f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a24      	ldr	r2, [pc, #144]	; (8002f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01d      	beq.n	8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002f54:	671a      	str	r2, [r3, #112]	; 0x70
 8002f56:	e009      	b.n	8002f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002f6a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	2201      	movs	r2, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	58025408 	.word	0x58025408
 8002f88:	5802541c 	.word	0x5802541c
 8002f8c:	58025430 	.word	0x58025430
 8002f90:	58025444 	.word	0x58025444
 8002f94:	58025458 	.word	0x58025458
 8002f98:	5802546c 	.word	0x5802546c
 8002f9c:	58025480 	.word	0x58025480
 8002fa0:	58025494 	.word	0x58025494
 8002fa4:	1600963f 	.word	0x1600963f
 8002fa8:	58025940 	.word	0x58025940
 8002fac:	1000823f 	.word	0x1000823f
 8002fb0:	40020940 	.word	0x40020940

08002fb4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	7a1b      	ldrb	r3, [r3, #8]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d155      	bne.n	800307a <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a4b      	ldr	r2, [pc, #300]	; (8003100 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d049      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a49      	ldr	r2, [pc, #292]	; (8003104 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d044      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a48      	ldr	r2, [pc, #288]	; (8003108 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d03f      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a46      	ldr	r2, [pc, #280]	; (800310c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d03a      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a45      	ldr	r2, [pc, #276]	; (8003110 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d035      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a43      	ldr	r2, [pc, #268]	; (8003114 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d030      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a42      	ldr	r2, [pc, #264]	; (8003118 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d02b      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a40      	ldr	r2, [pc, #256]	; (800311c <HAL_DMAEx_ConfigMuxSync+0x168>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d026      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a3f      	ldr	r2, [pc, #252]	; (8003120 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d021      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3d      	ldr	r2, [pc, #244]	; (8003124 <HAL_DMAEx_ConfigMuxSync+0x170>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01c      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3c      	ldr	r2, [pc, #240]	; (8003128 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d017      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3a      	ldr	r2, [pc, #232]	; (800312c <HAL_DMAEx_ConfigMuxSync+0x178>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d012      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a39      	ldr	r2, [pc, #228]	; (8003130 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00d      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a37      	ldr	r2, [pc, #220]	; (8003134 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d008      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a36      	ldr	r2, [pc, #216]	; (8003138 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <HAL_DMAEx_ConfigMuxSync+0xb8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a34      	ldr	r2, [pc, #208]	; (800313c <HAL_DMAEx_ConfigMuxSync+0x188>)
 800306a:	4293      	cmp	r3, r2
 800306c:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d131      	bne.n	80030ea <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8003090:	2302      	movs	r3, #2
 8003092:	e02f      	b.n	80030f4 <HAL_DMAEx_ConfigMuxSync+0x140>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a6:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 80030aa:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b2d9      	uxtb	r1, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	061a      	lsls	r2, r3, #24
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	3b01      	subs	r3, #1
 80030be:	04db      	lsls	r3, r3, #19
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	7a1b      	ldrb	r3, [r3, #8]
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	431a      	orrs	r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	7a5b      	ldrb	r3, [r3, #9]
 80030d2:	025b      	lsls	r3, r3, #9
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e004      	b.n	80030f4 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40020010 	.word	0x40020010
 8003104:	40020028 	.word	0x40020028
 8003108:	40020040 	.word	0x40020040
 800310c:	40020058 	.word	0x40020058
 8003110:	40020070 	.word	0x40020070
 8003114:	40020088 	.word	0x40020088
 8003118:	400200a0 	.word	0x400200a0
 800311c:	400200b8 	.word	0x400200b8
 8003120:	40020410 	.word	0x40020410
 8003124:	40020428 	.word	0x40020428
 8003128:	40020440 	.word	0x40020440
 800312c:	40020458 	.word	0x40020458
 8003130:	40020470 	.word	0x40020470
 8003134:	40020488 	.word	0x40020488
 8003138:	400204a0 	.word	0x400204a0
 800313c:	400204b8 	.word	0x400204b8

08003140 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01a      	beq.n	800318e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003166:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003170:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d022      	beq.n	80031dc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01a      	beq.n	80031dc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
      }
    }
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031f2:	4b86      	ldr	r3, [pc, #536]	; (800340c <HAL_GPIO_Init+0x228>)
 80031f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031f6:	e18c      	b.n	8003512 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2101      	movs	r1, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 817e 	beq.w	800350c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d005      	beq.n	8003228 <HAL_GPIO_Init+0x44>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d130      	bne.n	800328a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800325e:	2201      	movs	r2, #1
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f003 0201 	and.w	r2, r3, #1
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b03      	cmp	r3, #3
 8003294:	d017      	beq.n	80032c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d123      	bne.n	800331a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	08da      	lsrs	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3208      	adds	r2, #8
 8003314:	69b9      	ldr	r1, [r7, #24]
 8003316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0203 	and.w	r2, r3, #3
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80d8 	beq.w	800350c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335c:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <HAL_GPIO_Init+0x22c>)
 800335e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003362:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <HAL_GPIO_Init+0x22c>)
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800336c:	4b28      	ldr	r3, [pc, #160]	; (8003410 <HAL_GPIO_Init+0x22c>)
 800336e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800337a:	4a26      	ldr	r2, [pc, #152]	; (8003414 <HAL_GPIO_Init+0x230>)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3302      	adds	r3, #2
 8003382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	220f      	movs	r2, #15
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <HAL_GPIO_Init+0x234>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d04a      	beq.n	800343c <HAL_GPIO_Init+0x258>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_GPIO_Init+0x238>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02b      	beq.n	8003406 <HAL_GPIO_Init+0x222>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_GPIO_Init+0x23c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d025      	beq.n	8003402 <HAL_GPIO_Init+0x21e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1a      	ldr	r2, [pc, #104]	; (8003424 <HAL_GPIO_Init+0x240>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01f      	beq.n	80033fe <HAL_GPIO_Init+0x21a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_GPIO_Init+0x244>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d019      	beq.n	80033fa <HAL_GPIO_Init+0x216>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a18      	ldr	r2, [pc, #96]	; (800342c <HAL_GPIO_Init+0x248>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_GPIO_Init+0x212>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a17      	ldr	r2, [pc, #92]	; (8003430 <HAL_GPIO_Init+0x24c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00d      	beq.n	80033f2 <HAL_GPIO_Init+0x20e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a16      	ldr	r2, [pc, #88]	; (8003434 <HAL_GPIO_Init+0x250>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <HAL_GPIO_Init+0x20a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a15      	ldr	r2, [pc, #84]	; (8003438 <HAL_GPIO_Init+0x254>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_GPIO_Init+0x206>
 80033e6:	2309      	movs	r3, #9
 80033e8:	e029      	b.n	800343e <HAL_GPIO_Init+0x25a>
 80033ea:	230a      	movs	r3, #10
 80033ec:	e027      	b.n	800343e <HAL_GPIO_Init+0x25a>
 80033ee:	2307      	movs	r3, #7
 80033f0:	e025      	b.n	800343e <HAL_GPIO_Init+0x25a>
 80033f2:	2306      	movs	r3, #6
 80033f4:	e023      	b.n	800343e <HAL_GPIO_Init+0x25a>
 80033f6:	2305      	movs	r3, #5
 80033f8:	e021      	b.n	800343e <HAL_GPIO_Init+0x25a>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e01f      	b.n	800343e <HAL_GPIO_Init+0x25a>
 80033fe:	2303      	movs	r3, #3
 8003400:	e01d      	b.n	800343e <HAL_GPIO_Init+0x25a>
 8003402:	2302      	movs	r3, #2
 8003404:	e01b      	b.n	800343e <HAL_GPIO_Init+0x25a>
 8003406:	2301      	movs	r3, #1
 8003408:	e019      	b.n	800343e <HAL_GPIO_Init+0x25a>
 800340a:	bf00      	nop
 800340c:	58000080 	.word	0x58000080
 8003410:	58024400 	.word	0x58024400
 8003414:	58000400 	.word	0x58000400
 8003418:	58020000 	.word	0x58020000
 800341c:	58020400 	.word	0x58020400
 8003420:	58020800 	.word	0x58020800
 8003424:	58020c00 	.word	0x58020c00
 8003428:	58021000 	.word	0x58021000
 800342c:	58021400 	.word	0x58021400
 8003430:	58021800 	.word	0x58021800
 8003434:	58021c00 	.word	0x58021c00
 8003438:	58022400 	.word	0x58022400
 800343c:	2300      	movs	r3, #0
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	f002 0203 	and.w	r2, r2, #3
 8003444:	0092      	lsls	r2, r2, #2
 8003446:	4093      	lsls	r3, r2
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800344e:	4938      	ldr	r1, [pc, #224]	; (8003530 <HAL_GPIO_Init+0x34c>)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	3302      	adds	r3, #2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800345c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	3301      	adds	r3, #1
 8003510:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	f47f ae6b 	bne.w	80031f8 <HAL_GPIO_Init+0x14>
  }
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	3724      	adds	r7, #36	; 0x24
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	58000400 	.word	0x58000400

08003534 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800353c:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	2b06      	cmp	r3, #6
 8003546:	d00a      	beq.n	800355e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d001      	beq.n	800355a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e03f      	b.n	80035da <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e03d      	b.n	80035da <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800355e:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003566:	491f      	ldr	r1, [pc, #124]	; (80035e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4313      	orrs	r3, r2
 800356c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800356e:	f7fd fa39 	bl	80009e4 <HAL_GetTick>
 8003572:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003574:	e009      	b.n	800358a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003576:	f7fd fa35 	bl	80009e4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003584:	d901      	bls.n	800358a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e027      	b.n	80035da <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800358a:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003596:	d1ee      	bne.n	8003576 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b1e      	cmp	r3, #30
 800359c:	d008      	beq.n	80035b0 <HAL_PWREx_ConfigSupply+0x7c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b2e      	cmp	r3, #46	; 0x2e
 80035a2:	d005      	beq.n	80035b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b1d      	cmp	r3, #29
 80035a8:	d002      	beq.n	80035b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b2d      	cmp	r3, #45	; 0x2d
 80035ae:	d113      	bne.n	80035d8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80035b0:	f7fd fa18 	bl	80009e4 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035b6:	e009      	b.n	80035cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035b8:	f7fd fa14 	bl	80009e4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035c6:	d901      	bls.n	80035cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e006      	b.n	80035da <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0311 	and.w	r3, r3, #17
 80035d4:	2b11      	cmp	r3, #17
 80035d6:	d1ef      	bne.n	80035b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	58024800 	.word	0x58024800

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	; 0x30
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e397      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8087 	beq.w	8003716 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003608:	4b9e      	ldr	r3, [pc, #632]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003612:	4b9c      	ldr	r3, [pc, #624]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	2b10      	cmp	r3, #16
 800361c:	d007      	beq.n	800362e <HAL_RCC_OscConfig+0x46>
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	2b18      	cmp	r3, #24
 8003622:	d110      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d10b      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362e:	4b95      	ldr	r3, [pc, #596]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d06c      	beq.n	8003714 <HAL_RCC_OscConfig+0x12c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d168      	bne.n	8003714 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e371      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x76>
 8003650:	4b8c      	ldr	r3, [pc, #560]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a8b      	ldr	r2, [pc, #556]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e02e      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b87      	ldr	r3, [pc, #540]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a86      	ldr	r2, [pc, #536]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b84      	ldr	r3, [pc, #528]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a83      	ldr	r2, [pc, #524]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e01d      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0xbc>
 800368a:	4b7e      	ldr	r3, [pc, #504]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a7d      	ldr	r2, [pc, #500]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b7b      	ldr	r3, [pc, #492]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7a      	ldr	r2, [pc, #488]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 80036a4:	4b77      	ldr	r3, [pc, #476]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a76      	ldr	r2, [pc, #472]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b74      	ldr	r3, [pc, #464]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a73      	ldr	r2, [pc, #460]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80036b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd f98e 	bl	80009e4 <HAL_GetTick>
 80036c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fd f98a 	bl	80009e4 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e325      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036de:	4b69      	ldr	r3, [pc, #420]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xe4>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fd f97a 	bl	80009e4 <HAL_GetTick>
 80036f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fd f976 	bl	80009e4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e311      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003706:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x10c>
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 808a 	beq.w	8003838 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003724:	4b57      	ldr	r3, [pc, #348]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800372c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800372e:	4b55      	ldr	r3, [pc, #340]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_RCC_OscConfig+0x162>
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	2b18      	cmp	r3, #24
 800373e:	d137      	bne.n	80037b0 <HAL_RCC_OscConfig+0x1c8>
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d132      	bne.n	80037b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374a:	4b4e      	ldr	r3, [pc, #312]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_RCC_OscConfig+0x17a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e2e3      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003762:	4b48      	ldr	r3, [pc, #288]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 0219 	bic.w	r2, r3, #25
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4945      	ldr	r1, [pc, #276]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003774:	f7fd f936 	bl	80009e4 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377c:	f7fd f932 	bl	80009e4 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e2cd      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	061b      	lsls	r3, r3, #24
 80037a8:	4936      	ldr	r1, [pc, #216]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ae:	e043      	b.n	8003838 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d026      	beq.n	8003806 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 0219 	bic.w	r2, r3, #25
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	492f      	ldr	r1, [pc, #188]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd f90b 	bl	80009e4 <HAL_GetTick>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fd f907 	bl	80009e4 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e2a2      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e4:	4b27      	ldr	r3, [pc, #156]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b24      	ldr	r3, [pc, #144]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	4921      	ldr	r1, [pc, #132]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e018      	b.n	8003838 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fd f8e7 	bl	80009e4 <HAL_GetTick>
 8003816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800381a:	f7fd f8e3 	bl	80009e4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e27e      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800382c:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d06d      	beq.n	8003920 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d007      	beq.n	800386a <HAL_RCC_OscConfig+0x282>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b18      	cmp	r3, #24
 800385e:	d11e      	bne.n	800389e <HAL_RCC_OscConfig+0x2b6>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d119      	bne.n	800389e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_OscConfig+0x29c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_RCC_OscConfig+0x2a0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d004      	beq.n	8003888 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e253      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
 8003882:	bf00      	nop
 8003884:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003888:	4ba3      	ldr	r3, [pc, #652]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	49a0      	ldr	r1, [pc, #640]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800389c:	e040      	b.n	8003920 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d023      	beq.n	80038ee <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038a6:	4b9c      	ldr	r3, [pc, #624]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a9b      	ldr	r2, [pc, #620]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80038ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd f897 	bl	80009e4 <HAL_GetTick>
 80038b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80038ba:	f7fd f893 	bl	80009e4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e22e      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038cc:	4b92      	ldr	r3, [pc, #584]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038d8:	4b8f      	ldr	r3, [pc, #572]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	498c      	ldr	r1, [pc, #560]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60cb      	str	r3, [r1, #12]
 80038ec:	e018      	b.n	8003920 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80038ee:	4b8a      	ldr	r3, [pc, #552]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a89      	ldr	r2, [pc, #548]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80038f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fd f873 	bl	80009e4 <HAL_GetTick>
 80038fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003902:	f7fd f86f 	bl	80009e4 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e20a      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003914:	4b80      	ldr	r3, [pc, #512]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d036      	beq.n	800399a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d019      	beq.n	8003968 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003934:	4b78      	ldr	r3, [pc, #480]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	4a77      	ldr	r2, [pc, #476]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fd f850 	bl	80009e4 <HAL_GetTick>
 8003944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003948:	f7fd f84c 	bl	80009e4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e1e7      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800395a:	4b6f      	ldr	r3, [pc, #444]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 800395c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x360>
 8003966:	e018      	b.n	800399a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003968:	4b6b      	ldr	r3, [pc, #428]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 800396a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396c:	4a6a      	ldr	r2, [pc, #424]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd f836 	bl	80009e4 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397c:	f7fd f832 	bl	80009e4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1cd      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800398e:	4b62      	ldr	r3, [pc, #392]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d036      	beq.n	8003a14 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d019      	beq.n	80039e2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039ae:	4b5a      	ldr	r3, [pc, #360]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a59      	ldr	r2, [pc, #356]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80039b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039ba:	f7fd f813 	bl	80009e4 <HAL_GetTick>
 80039be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039c2:	f7fd f80f 	bl	80009e4 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1aa      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039d4:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3da>
 80039e0:	e018      	b.n	8003a14 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039e2:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4c      	ldr	r2, [pc, #304]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 80039e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039ee:	f7fc fff9 	bl	80009e4 <HAL_GetTick>
 80039f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039f6:	f7fc fff5 	bl	80009e4 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e190      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a08:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8085 	beq.w	8003b2c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a22:	4b3e      	ldr	r3, [pc, #248]	; (8003b1c <HAL_RCC_OscConfig+0x534>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a3d      	ldr	r2, [pc, #244]	; (8003b1c <HAL_RCC_OscConfig+0x534>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a2e:	f7fc ffd9 	bl	80009e4 <HAL_GetTick>
 8003a32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7fc ffd5 	bl	80009e4 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b64      	cmp	r3, #100	; 0x64
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e170      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a48:	4b34      	ldr	r3, [pc, #208]	; (8003b1c <HAL_RCC_OscConfig+0x534>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x482>
 8003a5c:	4b2e      	ldr	r3, [pc, #184]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a2d      	ldr	r2, [pc, #180]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
 8003a68:	e02d      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4de>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4a4>
 8003a72:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a28      	ldr	r2, [pc, #160]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a25      	ldr	r2, [pc, #148]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	e01c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4de>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d10c      	bne.n	8003aae <HAL_RCC_OscConfig+0x4c6>
 8003a94:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4de>
 8003aae:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aba:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d015      	beq.n	8003afa <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fc ff89 	bl	80009e4 <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fc ff85 	bl	80009e4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e11e      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_RCC_OscConfig+0x530>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ee      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x4ee>
 8003af8:	e018      	b.n	8003b2c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afa:	f7fc ff73 	bl	80009e4 <HAL_GetTick>
 8003afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b00:	e00e      	b.n	8003b20 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fc ff6f 	bl	80009e4 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d905      	bls.n	8003b20 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e108      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
 8003b18:	58024400 	.word	0x58024400
 8003b1c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b20:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ea      	bne.n	8003b02 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80f9 	beq.w	8003d28 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b36:	4b7f      	ldr	r3, [pc, #508]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b3e:	2b18      	cmp	r3, #24
 8003b40:	f000 80b4 	beq.w	8003cac <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	f040 8095 	bne.w	8003c78 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4b79      	ldr	r3, [pc, #484]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a78      	ldr	r2, [pc, #480]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fc ff43 	bl	80009e4 <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fc ff3f 	bl	80009e4 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0da      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b74:	4b6f      	ldr	r3, [pc, #444]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b80:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b84:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <HAL_RCC_OscConfig+0x750>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	430a      	orrs	r2, r1
 8003b94:	4967      	ldr	r1, [pc, #412]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	628b      	str	r3, [r1, #40]	; 0x28
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	025b      	lsls	r3, r3, #9
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bca:	495a      	ldr	r1, [pc, #360]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003bd0:	4b58      	ldr	r3, [pc, #352]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	4a57      	ldr	r2, [pc, #348]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bdc:	4b55      	ldr	r3, [pc, #340]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be0:	4b56      	ldr	r3, [pc, #344]	; (8003d3c <HAL_RCC_OscConfig+0x754>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003be8:	00d2      	lsls	r2, r2, #3
 8003bea:	4952      	ldr	r1, [pc, #328]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003bf0:	4b50      	ldr	r3, [pc, #320]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	f023 020c 	bic.w	r2, r3, #12
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	494d      	ldr	r1, [pc, #308]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c02:	4b4c      	ldr	r3, [pc, #304]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f023 0202 	bic.w	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	4949      	ldr	r1, [pc, #292]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c14:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	4a46      	ldr	r2, [pc, #280]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c20:	4b44      	ldr	r3, [pc, #272]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c2c:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c38:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4a3d      	ldr	r2, [pc, #244]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c44:	4b3b      	ldr	r3, [pc, #236]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a3a      	ldr	r2, [pc, #232]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fc fec8 	bl	80009e4 <HAL_GetTick>
 8003c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fc fec4 	bl	80009e4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e05f      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c6a:	4b32      	ldr	r3, [pc, #200]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x670>
 8003c76:	e057      	b.n	8003d28 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c78:	4b2e      	ldr	r3, [pc, #184]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2d      	ldr	r2, [pc, #180]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fc feae 	bl	80009e4 <HAL_GetTick>
 8003c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fc feaa 	bl	80009e4 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e045      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c9e:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x6a4>
 8003caa:	e03d      	b.n	8003d28 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cac:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCC_OscConfig+0x74c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d031      	beq.n	8003d24 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f003 0203 	and.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d12a      	bne.n	8003d24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d122      	bne.n	8003d24 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d11a      	bne.n	8003d24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	0a5b      	lsrs	r3, r3, #9
 8003cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d111      	bne.n	8003d24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	0c1b      	lsrs	r3, r3, #16
 8003d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d108      	bne.n	8003d24 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	0e1b      	lsrs	r3, r3, #24
 8003d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3730      	adds	r7, #48	; 0x30
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	58024400 	.word	0x58024400
 8003d38:	fffffc0c 	.word	0xfffffc0c
 8003d3c:	ffff0007 	.word	0xffff0007

08003d40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e19c      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b8a      	ldr	r3, [pc, #552]	; (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d910      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b87      	ldr	r3, [pc, #540]	; (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	4985      	ldr	r1, [pc, #532]	; (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b83      	ldr	r3, [pc, #524]	; (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e184      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d010      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	4b7b      	ldr	r3, [pc, #492]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d908      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003da0:	4b78      	ldr	r3, [pc, #480]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	4975      	ldr	r1, [pc, #468]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d010      	beq.n	8003de0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	4b70      	ldr	r3, [pc, #448]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d908      	bls.n	8003de0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003dce:	4b6d      	ldr	r3, [pc, #436]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	496a      	ldr	r1, [pc, #424]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d010      	beq.n	8003e0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	4b64      	ldr	r3, [pc, #400]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d908      	bls.n	8003e0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dfc:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	495e      	ldr	r1, [pc, #376]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d908      	bls.n	8003e3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e2a:	4b56      	ldr	r3, [pc, #344]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4953      	ldr	r1, [pc, #332]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d010      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d908      	bls.n	8003e6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e58:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f023 020f 	bic.w	r2, r3, #15
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4947      	ldr	r1, [pc, #284]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d055      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e76:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	4940      	ldr	r1, [pc, #256]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e90:	4b3c      	ldr	r3, [pc, #240]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d121      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0f6      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ea8:	4b36      	ldr	r3, [pc, #216]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d115      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0ea      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ec0:	4b30      	ldr	r3, [pc, #192]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0de      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0d6      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f023 0207 	bic.w	r2, r3, #7
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4925      	ldr	r1, [pc, #148]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fc fd77 	bl	80009e4 <HAL_GetTick>
 8003ef6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efa:	f7fc fd73 	bl	80009e4 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0be      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f10:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d1eb      	bne.n	8003efa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d208      	bcs.n	8003f50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f023 020f 	bic.w	r2, r3, #15
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	490e      	ldr	r1, [pc, #56]	; (8003f84 <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d214      	bcs.n	8003f88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 020f 	bic.w	r2, r3, #15
 8003f66:	4906      	ldr	r1, [pc, #24]	; (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <HAL_RCC_ClockConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e086      	b.n	800408e <HAL_RCC_ClockConfig+0x34e>
 8003f80:	52002000 	.word	0x52002000
 8003f84:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d208      	bcs.n	8003fb6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fa4:	4b3c      	ldr	r3, [pc, #240]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	4939      	ldr	r1, [pc, #228]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d010      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d208      	bcs.n	8003fe4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fd2:	4b31      	ldr	r3, [pc, #196]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	492e      	ldr	r1, [pc, #184]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d010      	beq.n	8004012 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d208      	bcs.n	8004012 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004000:	4b25      	ldr	r3, [pc, #148]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	4922      	ldr	r1, [pc, #136]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 800400e:	4313      	orrs	r3, r2
 8004010:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d010      	beq.n	8004040 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800402a:	429a      	cmp	r2, r3
 800402c:	d208      	bcs.n	8004040 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800402e:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	4917      	ldr	r1, [pc, #92]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 800403c:	4313      	orrs	r3, r2
 800403e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004040:	f000 f834 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	4912      	ldr	r1, [pc, #72]	; (800409c <HAL_RCC_ClockConfig+0x35c>)
 8004052:	5ccb      	ldrb	r3, [r1, r3]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <HAL_RCC_ClockConfig+0x358>)
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	4a0d      	ldr	r2, [pc, #52]	; (800409c <HAL_RCC_ClockConfig+0x35c>)
 8004068:	5cd3      	ldrb	r3, [r2, r3]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
 8004074:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <HAL_RCC_ClockConfig+0x360>)
 8004076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <HAL_RCC_ClockConfig+0x364>)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_RCC_ClockConfig+0x368>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fc fc64 	bl	8000950 <HAL_InitTick>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	58024400 	.word	0x58024400
 800409c:	0800af90 	.word	0x0800af90
 80040a0:	2400040c 	.word	0x2400040c
 80040a4:	24000408 	.word	0x24000408
 80040a8:	24000400 	.word	0x24000400

080040ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b2:	4bb3      	ldr	r3, [pc, #716]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ba:	2b18      	cmp	r3, #24
 80040bc:	f200 8155 	bhi.w	800436a <HAL_RCC_GetSysClockFreq+0x2be>
 80040c0:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	0800412d 	.word	0x0800412d
 80040cc:	0800436b 	.word	0x0800436b
 80040d0:	0800436b 	.word	0x0800436b
 80040d4:	0800436b 	.word	0x0800436b
 80040d8:	0800436b 	.word	0x0800436b
 80040dc:	0800436b 	.word	0x0800436b
 80040e0:	0800436b 	.word	0x0800436b
 80040e4:	0800436b 	.word	0x0800436b
 80040e8:	08004153 	.word	0x08004153
 80040ec:	0800436b 	.word	0x0800436b
 80040f0:	0800436b 	.word	0x0800436b
 80040f4:	0800436b 	.word	0x0800436b
 80040f8:	0800436b 	.word	0x0800436b
 80040fc:	0800436b 	.word	0x0800436b
 8004100:	0800436b 	.word	0x0800436b
 8004104:	0800436b 	.word	0x0800436b
 8004108:	08004159 	.word	0x08004159
 800410c:	0800436b 	.word	0x0800436b
 8004110:	0800436b 	.word	0x0800436b
 8004114:	0800436b 	.word	0x0800436b
 8004118:	0800436b 	.word	0x0800436b
 800411c:	0800436b 	.word	0x0800436b
 8004120:	0800436b 	.word	0x0800436b
 8004124:	0800436b 	.word	0x0800436b
 8004128:	0800415f 	.word	0x0800415f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800412c:	4b94      	ldr	r3, [pc, #592]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d009      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004138:	4b91      	ldr	r3, [pc, #580]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	4a90      	ldr	r2, [pc, #576]	; (8004384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800414a:	e111      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800414c:	4b8d      	ldr	r3, [pc, #564]	; (8004384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800414e:	61bb      	str	r3, [r7, #24]
    break;
 8004150:	e10e      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004152:	4b8d      	ldr	r3, [pc, #564]	; (8004388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004154:	61bb      	str	r3, [r7, #24]
    break;
 8004156:	e10b      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004158:	4b8c      	ldr	r3, [pc, #560]	; (800438c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800415a:	61bb      	str	r3, [r7, #24]
    break;
 800415c:	e108      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800415e:	4b88      	ldr	r3, [pc, #544]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004168:	4b85      	ldr	r3, [pc, #532]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004172:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004174:	4b82      	ldr	r3, [pc, #520]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800417e:	4b80      	ldr	r3, [pc, #512]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	08db      	lsrs	r3, r3, #3
 8004184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80e1 	beq.w	8004364 <HAL_RCC_GetSysClockFreq+0x2b8>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	f000 8083 	beq.w	80042b0 <HAL_RCC_GetSysClockFreq+0x204>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	f200 80a1 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x248>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x114>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d056      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x1c0>
 80041be:	e099      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041c0:	4b6f      	ldr	r3, [pc, #444]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d02d      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041cc:	4b6c      	ldr	r3, [pc, #432]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	08db      	lsrs	r3, r3, #3
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	4a6b      	ldr	r2, [pc, #428]	; (8004384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
 80041dc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f6:	4b62      	ldr	r3, [pc, #392]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004206:	ed97 6a02 	vldr	s12, [r7, #8]
 800420a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800420e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800421a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800421e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004222:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004226:	e087      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004394 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800423a:	4b51      	ldr	r3, [pc, #324]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800424a:	ed97 6a02 	vldr	s12, [r7, #8]
 800424e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800425a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800425e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800426a:	e065      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004398 <HAL_RCC_GetSysClockFreq+0x2ec>
 800427a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427e:	4b40      	ldr	r3, [pc, #256]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004292:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800429a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ae:	e043      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800439c <HAL_RCC_GetSysClockFreq+0x2f0>
 80042be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c2:	4b2f      	ldr	r3, [pc, #188]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042f2:	e021      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004398 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004306:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004316:	ed97 6a02 	vldr	s12, [r7, #8]
 800431a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800431e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800432a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004336:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	0a5b      	lsrs	r3, r3, #9
 800433e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004342:	3301      	adds	r3, #1
 8004344:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004350:	edd7 6a07 	vldr	s13, [r7, #28]
 8004354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435c:	ee17 3a90 	vmov	r3, s15
 8004360:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004362:	e005      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	61bb      	str	r3, [r7, #24]
    break;
 8004368:	e002      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800436c:	61bb      	str	r3, [r7, #24]
    break;
 800436e:	bf00      	nop
  }

  return sysclockfreq;
 8004370:	69bb      	ldr	r3, [r7, #24]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3724      	adds	r7, #36	; 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400
 8004384:	03d09000 	.word	0x03d09000
 8004388:	003d0900 	.word	0x003d0900
 800438c:	017d7840 	.word	0x017d7840
 8004390:	46000000 	.word	0x46000000
 8004394:	4c742400 	.word	0x4c742400
 8004398:	4a742400 	.word	0x4a742400
 800439c:	4bbebc20 	.word	0x4bbebc20

080043a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043a6:	f7ff fe81 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 80043aa:	4602      	mov	r2, r0
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	0a1b      	lsrs	r3, r3, #8
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	490f      	ldr	r1, [pc, #60]	; (80043f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80043b8:	5ccb      	ldrb	r3, [r1, r3]
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80043ce:	5cd3      	ldrb	r3, [r2, r3]
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80043dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043de:	4a07      	ldr	r2, [pc, #28]	; (80043fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	58024400 	.word	0x58024400
 80043f4:	0800af90 	.word	0x0800af90
 80043f8:	2400040c 	.word	0x2400040c
 80043fc:	24000408 	.word	0x24000408

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004404:	f7ff ffcc 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4904      	ldr	r1, [pc, #16]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	58024400 	.word	0x58024400
 8004428:	0800af90 	.word	0x0800af90

0800442c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004430:	f7ff ffb6 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4904      	ldr	r1, [pc, #16]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	58024400 	.word	0x58024400
 8004454:	0800af90 	.word	0x0800af90

08004458 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004460:	2300      	movs	r3, #0
 8004462:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004464:	2300      	movs	r3, #0
 8004466:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03f      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800447c:	d02a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800447e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004482:	d824      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004488:	d018      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800448a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800448e:	d81e      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004498:	d007      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 800449a:	e018      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449c:	4bab      	ldr	r3, [pc, #684]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	4aaa      	ldr	r2, [pc, #680]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044a8:	e015      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3304      	adds	r3, #4
 80044ae:	2102      	movs	r1, #2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 feff 	bl	80062b4 <RCCEx_PLL2_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044ba:	e00c      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3324      	adds	r3, #36	; 0x24
 80044c0:	2102      	movs	r1, #2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f001 ffa8 	bl	8006418 <RCCEx_PLL3_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044cc:	e003      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
      break;
 80044d2:	e000      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d109      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044dc:	4b9b      	ldr	r3, [pc, #620]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e8:	4998      	ldr	r1, [pc, #608]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	650b      	str	r3, [r1, #80]	; 0x50
 80044ee:	e001      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d03d      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	2b04      	cmp	r3, #4
 8004506:	d826      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004508:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004525 	.word	0x08004525
 8004514:	08004533 	.word	0x08004533
 8004518:	08004545 	.word	0x08004545
 800451c:	0800455d 	.word	0x0800455d
 8004520:	0800455d 	.word	0x0800455d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004524:	4b89      	ldr	r3, [pc, #548]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a88      	ldr	r2, [pc, #544]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800452a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004530:	e015      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3304      	adds	r3, #4
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f001 febb 	bl	80062b4 <RCCEx_PLL2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004542:	e00c      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3324      	adds	r3, #36	; 0x24
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f001 ff64 	bl	8006418 <RCCEx_PLL3_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004554:	e003      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
      break;
 800455a:	e000      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800455c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004564:	4b79      	ldr	r3, [pc, #484]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	f023 0207 	bic.w	r2, r3, #7
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	4976      	ldr	r1, [pc, #472]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	650b      	str	r3, [r1, #80]	; 0x50
 8004576:	e001      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004584:	2b00      	cmp	r3, #0
 8004586:	d051      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800458e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004592:	d036      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004594:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004598:	d830      	bhi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800459a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800459e:	d032      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80045a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045a4:	d82a      	bhi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80045a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045aa:	d02e      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80045ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045b0:	d824      	bhi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80045b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b6:	d018      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x192>
 80045b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045bc:	d81e      	bhi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x172>
 80045c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045c6:	d007      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80045c8:	e018      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ca:	4b60      	ldr	r3, [pc, #384]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	4a5f      	ldr	r2, [pc, #380]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045d6:	e019      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 fe68 	bl	80062b4 <RCCEx_PLL2_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045e8:	e010      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3324      	adds	r3, #36	; 0x24
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 ff11 	bl	8006418 <RCCEx_PLL3_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045fa:	e007      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004600:	e004      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004602:	bf00      	nop
 8004604:	e002      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800460a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004612:	4b4e      	ldr	r3, [pc, #312]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004616:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004620:	494a      	ldr	r1, [pc, #296]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004622:	4313      	orrs	r3, r2
 8004624:	658b      	str	r3, [r1, #88]	; 0x58
 8004626:	e001      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004634:	2b00      	cmp	r3, #0
 8004636:	d051      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800463e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004642:	d036      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004644:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004648:	d830      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800464a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800464e:	d032      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004654:	d82a      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004656:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800465a:	d02e      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x262>
 800465c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004660:	d824      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004666:	d018      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800466c:	d81e      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004676:	d007      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004678:	e018      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467a:	4b34      	ldr	r3, [pc, #208]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	4a33      	ldr	r2, [pc, #204]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004684:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004686:	e019      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fe10 	bl	80062b4 <RCCEx_PLL2_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004698:	e010      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3324      	adds	r3, #36	; 0x24
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 feb9 	bl	8006418 <RCCEx_PLL3_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046aa:	e007      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	75fb      	strb	r3, [r7, #23]
      break;
 80046b0:	e004      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80046b2:	bf00      	nop
 80046b4:	e002      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80046b6:	bf00      	nop
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80046ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046c2:	4b22      	ldr	r3, [pc, #136]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046d0:	491e      	ldr	r1, [pc, #120]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	658b      	str	r3, [r1, #88]	; 0x58
 80046d6:	e001      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
 80046da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d035      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ec:	2b30      	cmp	r3, #48	; 0x30
 80046ee:	d01c      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80046f0:	2b30      	cmp	r3, #48	; 0x30
 80046f2:	d817      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d00c      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d813      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d016      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004700:	2b10      	cmp	r3, #16
 8004702:	d10f      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	4a10      	ldr	r2, [pc, #64]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800470a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800470e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004710:	e00e      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	2102      	movs	r1, #2
 8004718:	4618      	mov	r0, r3
 800471a:	f001 fdcb 	bl	80062b4 <RCCEx_PLL2_Config>
 800471e:	4603      	mov	r3, r0
 8004720:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004722:	e005      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	75fb      	strb	r3, [r7, #23]
      break;
 8004728:	e002      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800472a:	bf00      	nop
 800472c:	e000      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800472e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10c      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004742:	4902      	ldr	r1, [pc, #8]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004744:	4313      	orrs	r3, r2
 8004746:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004748:	e004      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800474a:	bf00      	nop
 800474c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d047      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004768:	d030      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800476a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476e:	d82a      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004770:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004774:	d02c      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004776:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800477a:	d824      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800477c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004780:	d018      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004786:	d81e      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004790:	d007      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004792:	e018      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004794:	4bac      	ldr	r3, [pc, #688]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	4aab      	ldr	r2, [pc, #684]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800479a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047a0:	e017      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 fd83 	bl	80062b4 <RCCEx_PLL2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047b2:	e00e      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3324      	adds	r3, #36	; 0x24
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 fe2c 	bl	8006418 <RCCEx_PLL3_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80047c4:	e005      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ca:	e002      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80047cc:	bf00      	nop
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80047d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047d8:	4b9b      	ldr	r3, [pc, #620]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	4998      	ldr	r1, [pc, #608]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	650b      	str	r3, [r1, #80]	; 0x50
 80047ea:	e001      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
 80047ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d049      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004804:	d02e      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480a:	d828      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800480c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004810:	d02a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004812:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004816:	d822      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004818:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800481c:	d026      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800481e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004822:	d81c      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004828:	d010      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800482a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800482e:	d816      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01d      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d111      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f001 fd37 	bl	80062b4 <RCCEx_PLL2_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800484a:	e012      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3324      	adds	r3, #36	; 0x24
 8004850:	2101      	movs	r1, #1
 8004852:	4618      	mov	r0, r3
 8004854:	f001 fde0 	bl	8006418 <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800485c:	e009      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	75fb      	strb	r3, [r7, #23]
      break;
 8004862:	e006      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004864:	bf00      	nop
 8004866:	e004      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004868:	bf00      	nop
 800486a:	e002      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004878:	4b73      	ldr	r3, [pc, #460]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	4970      	ldr	r1, [pc, #448]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004886:	4313      	orrs	r3, r2
 8004888:	650b      	str	r3, [r1, #80]	; 0x50
 800488a:	e001      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d04b      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048a6:	d02e      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80048a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ac:	d828      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d02a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d822      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048be:	d026      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80048c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048c4:	d81c      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ca:	d010      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x496>
 80048cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048d0:	d816      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01d      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80048d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048da:	d111      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	2101      	movs	r1, #1
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 fce6 	bl	80062b4 <RCCEx_PLL2_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80048ec:	e012      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3324      	adds	r3, #36	; 0x24
 80048f2:	2101      	movs	r1, #1
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 fd8f 	bl	8006418 <RCCEx_PLL3_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80048fe:	e009      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
      break;
 8004904:	e006      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004906:	bf00      	nop
 8004908:	e004      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800490a:	bf00      	nop
 800490c:	e002      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004914:	7dfb      	ldrb	r3, [r7, #23]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800491a:	4b4b      	ldr	r3, [pc, #300]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004928:	4947      	ldr	r1, [pc, #284]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	658b      	str	r3, [r1, #88]	; 0x58
 800492e:	e001      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02f      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004948:	d00e      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800494a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800494e:	d814      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d015      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004958:	d10f      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800495a:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4a3a      	ldr	r2, [pc, #232]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004966:	e00c      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f001 fca0 	bl	80062b4 <RCCEx_PLL2_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004978:	e003      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
      break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004988:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800498a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004994:	492c      	ldr	r1, [pc, #176]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004996:	4313      	orrs	r3, r2
 8004998:	650b      	str	r3, [r1, #80]	; 0x50
 800499a:	e001      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7dfb      	ldrb	r3, [r7, #23]
 800499e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d032      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d81b      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x594>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049f3 	.word	0x080049f3
 80049c0:	080049cd 	.word	0x080049cd
 80049c4:	080049db 	.word	0x080049db
 80049c8:	080049f3 	.word	0x080049f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049cc:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80049d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80049d8:	e00c      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	2102      	movs	r1, #2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fc67 	bl	80062b4 <RCCEx_PLL2_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80049ea:	e003      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	75fb      	strb	r3, [r7, #23]
      break;
 80049f0:	e000      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80049f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049fa:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	f023 0203 	bic.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	4910      	ldr	r1, [pc, #64]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a0c:	e001      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 808a 	beq.w	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a2c:	f7fb ffda 	bl	80009e4 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a32:	e00d      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fb ffd6 	bl	80009e4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d906      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	75fb      	strb	r3, [r7, #23]
        break;
 8004a46:	e009      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004a48:	58024400 	.word	0x58024400
 8004a4c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a50:	4bb9      	ldr	r3, [pc, #740]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0eb      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d166      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a62:	4bb6      	ldr	r3, [pc, #728]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a6c:	4053      	eors	r3, r2
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d013      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a76:	4bb1      	ldr	r3, [pc, #708]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a80:	4bae      	ldr	r3, [pc, #696]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	4aad      	ldr	r2, [pc, #692]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a8c:	4bab      	ldr	r3, [pc, #684]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4aaa      	ldr	r2, [pc, #680]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a98:	4aa8      	ldr	r2, [pc, #672]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa8:	d115      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fb ff9b 	bl	80009e4 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ab0:	e00b      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7fb ff97 	bl	80009e4 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d902      	bls.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	75fb      	strb	r3, [r7, #23]
            break;
 8004ac8:	e005      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aca:	4b9c      	ldr	r3, [pc, #624]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0ed      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d126      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aea:	d10d      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004aec:	4b93      	ldr	r3, [pc, #588]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004afa:	0919      	lsrs	r1, r3, #4
 8004afc:	4b90      	ldr	r3, [pc, #576]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004afe:	400b      	ands	r3, r1
 8004b00:	498e      	ldr	r1, [pc, #568]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	610b      	str	r3, [r1, #16]
 8004b06:	e005      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004b08:	4b8c      	ldr	r3, [pc, #560]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	4a8b      	ldr	r2, [pc, #556]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b12:	6113      	str	r3, [r2, #16]
 8004b14:	4b89      	ldr	r3, [pc, #548]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b22:	4986      	ldr	r1, [pc, #536]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	670b      	str	r3, [r1, #112]	; 0x70
 8004b28:	e004      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	75bb      	strb	r3, [r7, #22]
 8004b2e:	e001      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d07e      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b44:	2b28      	cmp	r3, #40	; 0x28
 8004b46:	d867      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004c1f 	.word	0x08004c1f
 8004b54:	08004c19 	.word	0x08004c19
 8004b58:	08004c19 	.word	0x08004c19
 8004b5c:	08004c19 	.word	0x08004c19
 8004b60:	08004c19 	.word	0x08004c19
 8004b64:	08004c19 	.word	0x08004c19
 8004b68:	08004c19 	.word	0x08004c19
 8004b6c:	08004c19 	.word	0x08004c19
 8004b70:	08004bf5 	.word	0x08004bf5
 8004b74:	08004c19 	.word	0x08004c19
 8004b78:	08004c19 	.word	0x08004c19
 8004b7c:	08004c19 	.word	0x08004c19
 8004b80:	08004c19 	.word	0x08004c19
 8004b84:	08004c19 	.word	0x08004c19
 8004b88:	08004c19 	.word	0x08004c19
 8004b8c:	08004c19 	.word	0x08004c19
 8004b90:	08004c07 	.word	0x08004c07
 8004b94:	08004c19 	.word	0x08004c19
 8004b98:	08004c19 	.word	0x08004c19
 8004b9c:	08004c19 	.word	0x08004c19
 8004ba0:	08004c19 	.word	0x08004c19
 8004ba4:	08004c19 	.word	0x08004c19
 8004ba8:	08004c19 	.word	0x08004c19
 8004bac:	08004c19 	.word	0x08004c19
 8004bb0:	08004c1f 	.word	0x08004c1f
 8004bb4:	08004c19 	.word	0x08004c19
 8004bb8:	08004c19 	.word	0x08004c19
 8004bbc:	08004c19 	.word	0x08004c19
 8004bc0:	08004c19 	.word	0x08004c19
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004c19 	.word	0x08004c19
 8004bcc:	08004c19 	.word	0x08004c19
 8004bd0:	08004c1f 	.word	0x08004c1f
 8004bd4:	08004c19 	.word	0x08004c19
 8004bd8:	08004c19 	.word	0x08004c19
 8004bdc:	08004c19 	.word	0x08004c19
 8004be0:	08004c19 	.word	0x08004c19
 8004be4:	08004c19 	.word	0x08004c19
 8004be8:	08004c19 	.word	0x08004c19
 8004bec:	08004c19 	.word	0x08004c19
 8004bf0:	08004c1f 	.word	0x08004c1f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fb5a 	bl	80062b4 <RCCEx_PLL2_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c04:	e00c      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3324      	adds	r3, #36	; 0x24
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fc03 	bl	8006418 <RCCEx_PLL3_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c16:	e003      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1c:	e000      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c26:	4b45      	ldr	r3, [pc, #276]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c32:	4942      	ldr	r1, [pc, #264]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	654b      	str	r3, [r1, #84]	; 0x54
 8004c38:	e001      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d037      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d820      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004c52:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c9b 	.word	0x08004c9b
 8004c5c:	08004c71 	.word	0x08004c71
 8004c60:	08004c83 	.word	0x08004c83
 8004c64:	08004c9b 	.word	0x08004c9b
 8004c68:	08004c9b 	.word	0x08004c9b
 8004c6c:	08004c9b 	.word	0x08004c9b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	2101      	movs	r1, #1
 8004c76:	4618      	mov	r0, r3
 8004c78:	f001 fb1c 	bl	80062b4 <RCCEx_PLL2_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c80:	e00c      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3324      	adds	r3, #36	; 0x24
 8004c86:	2101      	movs	r1, #1
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 fbc5 	bl	8006418 <RCCEx_PLL3_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c92:	e003      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	75fb      	strb	r3, [r7, #23]
      break;
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ca2:	4b26      	ldr	r3, [pc, #152]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f023 0207 	bic.w	r2, r3, #7
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	4923      	ldr	r1, [pc, #140]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	654b      	str	r3, [r1, #84]	; 0x54
 8004cb4:	e001      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d040      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ccc:	2b05      	cmp	r3, #5
 8004cce:	d821      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004d1b 	.word	0x08004d1b
 8004cdc:	08004cf1 	.word	0x08004cf1
 8004ce0:	08004d03 	.word	0x08004d03
 8004ce4:	08004d1b 	.word	0x08004d1b
 8004ce8:	08004d1b 	.word	0x08004d1b
 8004cec:	08004d1b 	.word	0x08004d1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 fadc 	bl	80062b4 <RCCEx_PLL2_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d00:	e00c      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3324      	adds	r3, #36	; 0x24
 8004d06:	2101      	movs	r1, #1
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f001 fb85 	bl	8006418 <RCCEx_PLL3_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d12:	e003      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	75fb      	strb	r3, [r7, #23]
      break;
 8004d18:	e000      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d110      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	f023 0207 	bic.w	r2, r3, #7
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d30:	4902      	ldr	r1, [pc, #8]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	658b      	str	r3, [r1, #88]	; 0x58
 8004d36:	e007      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004d38:	58024800 	.word	0x58024800
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
 8004d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d04b      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d5e:	d02e      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d64:	d828      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6a:	d02a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d70:	d822      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d76:	d026      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004d78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d7c:	d81c      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d82:	d010      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d88:	d816      	bhi.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01d      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d92:	d111      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 fa8a 	bl	80062b4 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004da4:	e012      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3324      	adds	r3, #36	; 0x24
 8004daa:	2102      	movs	r1, #2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 fb33 	bl	8006418 <RCCEx_PLL3_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004db6:	e009      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
      break;
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e004      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e002      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dd2:	4bb2      	ldr	r3, [pc, #712]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	49ae      	ldr	r1, [pc, #696]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	654b      	str	r3, [r1, #84]	; 0x54
 8004de6:	e001      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d04b      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e02:	d02e      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004e04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e08:	d828      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	d02a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e14:	d822      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004e16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e1a:	d026      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004e1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e20:	d81c      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e26:	d010      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e2c:	d816      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01d      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e36:	d111      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fa38 	bl	80062b4 <RCCEx_PLL2_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e48:	e012      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	2102      	movs	r1, #2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 fae1 	bl	8006418 <RCCEx_PLL3_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e5a:	e009      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e60:	e006      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004e62:	bf00      	nop
 8004e64:	e004      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e76:	4b89      	ldr	r3, [pc, #548]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e84:	4985      	ldr	r1, [pc, #532]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	658b      	str	r3, [r1, #88]	; 0x58
 8004e8a:	e001      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d04b      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ea2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ea6:	d02e      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004ea8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004eac:	d828      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb2:	d02a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb8:	d822      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004eba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ebe:	d026      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004ec0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ec4:	d81c      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eca:	d010      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ed0:	d816      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01d      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eda:	d111      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 f9e6 	bl	80062b4 <RCCEx_PLL2_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004eec:	e012      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3324      	adds	r3, #36	; 0x24
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 fa8f 	bl	8006418 <RCCEx_PLL3_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004efe:	e009      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
      break;
 8004f04:	e006      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004f06:	bf00      	nop
 8004f08:	e004      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f1a:	4b60      	ldr	r3, [pc, #384]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f28:	495c      	ldr	r1, [pc, #368]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f2e:	e001      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d018      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f48:	d10a      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3324      	adds	r3, #36	; 0x24
 8004f4e:	2102      	movs	r1, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f001 fa61 	bl	8006418 <RCCEx_PLL3_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004f60:	4b4e      	ldr	r3, [pc, #312]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f6c:	494b      	ldr	r1, [pc, #300]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f88:	d10a      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3324      	adds	r3, #36	; 0x24
 8004f8e:	2102      	movs	r1, #2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 fa41 	bl	8006418 <RCCEx_PLL3_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fa0:	4b3e      	ldr	r3, [pc, #248]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fae:	493b      	ldr	r1, [pc, #236]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d034      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fca:	d01d      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fd0:	d817      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fda:	d009      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004fdc:	e011      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 f965 	bl	80062b4 <RCCEx_PLL2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004fee:	e00c      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3324      	adds	r3, #36	; 0x24
 8004ff4:	2102      	movs	r1, #2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 fa0e 	bl	8006418 <RCCEx_PLL3_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005000:	e003      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
      break;
 8005006:	e000      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005010:	4b22      	ldr	r3, [pc, #136]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800501e:	491f      	ldr	r1, [pc, #124]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005020:	4313      	orrs	r3, r2
 8005022:	658b      	str	r3, [r1, #88]	; 0x58
 8005024:	e001      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d036      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005040:	d01c      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005042:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005046:	d816      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504c:	d003      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800504e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005052:	d007      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005054:	e00f      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a10      	ldr	r2, [pc, #64]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800505c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005062:	e00c      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3324      	adds	r3, #36	; 0x24
 8005068:	2101      	movs	r1, #1
 800506a:	4618      	mov	r0, r3
 800506c:	f001 f9d4 	bl	8006418 <RCCEx_PLL3_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005074:	e003      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	75fb      	strb	r3, [r7, #23]
      break;
 800507a:	e000      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800507c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10d      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005092:	4902      	ldr	r1, [pc, #8]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005094:	4313      	orrs	r3, r2
 8005096:	654b      	str	r3, [r1, #84]	; 0x54
 8005098:	e004      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d029      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050bc:	d007      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80050be:	e00f      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c0:	4b61      	ldr	r3, [pc, #388]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a60      	ldr	r2, [pc, #384]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80050cc:	e00b      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2102      	movs	r1, #2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 f8ed 	bl	80062b4 <RCCEx_PLL2_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80050de:	e002      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
      break;
 80050e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050ec:	4b56      	ldr	r3, [pc, #344]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80050ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f8:	4953      	ldr	r1, [pc, #332]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050fe:	e001      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3324      	adds	r3, #36	; 0x24
 8005114:	2102      	movs	r1, #2
 8005116:	4618      	mov	r0, r3
 8005118:	f001 f97e 	bl	8006418 <RCCEx_PLL3_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d030      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513a:	d017      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800513c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005140:	d811      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005146:	d013      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514c:	d80b      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d010      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005156:	d106      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005158:	4b3b      	ldr	r3, [pc, #236]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800515e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005164:	e007      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
      break;
 800516a:	e004      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800516c:	bf00      	nop
 800516e:	e002      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005170:	bf00      	nop
 8005172:	e000      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800517c:	4b32      	ldr	r3, [pc, #200]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005188:	492f      	ldr	r1, [pc, #188]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800518a:	4313      	orrs	r3, r2
 800518c:	654b      	str	r3, [r1, #84]	; 0x54
 800518e:	e001      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051a0:	4b29      	ldr	r3, [pc, #164]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ac:	4926      	ldr	r1, [pc, #152]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ca:	491f      	ldr	r1, [pc, #124]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00d      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051dc:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051e6:	6113      	str	r3, [r2, #16]
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051f2:	4915      	ldr	r1, [pc, #84]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	da08      	bge.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005204:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520c:	490e      	ldr	r1, [pc, #56]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800520e:	4313      	orrs	r3, r2
 8005210:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522c:	4906      	ldr	r1, [pc, #24]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800522e:	4313      	orrs	r3, r2
 8005230:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005232:	7dbb      	ldrb	r3, [r7, #22]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	e000      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	58024400 	.word	0x58024400

0800524c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b090      	sub	sp, #64	; 0x40
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525a:	f040 8089 	bne.w	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800525e:	4b95      	ldr	r3, [pc, #596]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	633b      	str	r3, [r7, #48]	; 0x30
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	2b04      	cmp	r3, #4
 800526c:	d87d      	bhi.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800526e:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	08005289 	.word	0x08005289
 8005278:	080052ad 	.word	0x080052ad
 800527c:	080052d1 	.word	0x080052d1
 8005280:	08005365 	.word	0x08005365
 8005284:	080052f5 	.word	0x080052f5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005288:	4b8a      	ldr	r3, [pc, #552]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005294:	d107      	bne.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529a:	4618      	mov	r0, r3
 800529c:	f000 feb8 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052a4:	e3ed      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052aa:	e3ea      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052ac:	4b81      	ldr	r3, [pc, #516]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b8:	d107      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ba:	f107 0318 	add.w	r3, r7, #24
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fbfe 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052c8:	e3db      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ce:	e3d8      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052d0:	4b78      	ldr	r3, [pc, #480]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052dc:	d107      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052de:	f107 030c 	add.w	r3, r7, #12
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fd40 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052ec:	e3c9      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052f2:	e3c6      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052f4:	4b6f      	ldr	r3, [pc, #444]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80052f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052fe:	4b6d      	ldr	r3, [pc, #436]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b04      	cmp	r3, #4
 8005308:	d10c      	bne.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005310:	4b68      	ldr	r3, [pc, #416]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	4a67      	ldr	r2, [pc, #412]	; (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005322:	e01e      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005324:	4b63      	ldr	r3, [pc, #396]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005330:	d106      	bne.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005338:	d102      	bne.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800533a:	4b60      	ldr	r3, [pc, #384]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800533c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533e:	e010      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005340:	4b5c      	ldr	r3, [pc, #368]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800534c:	d106      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005354:	d102      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005356:	4b5a      	ldr	r3, [pc, #360]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800535a:	e002      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005360:	e38f      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005362:	e38e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005364:	4b57      	ldr	r3, [pc, #348]	; (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005368:	e38b      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800536e:	e388      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	f040 80a7 	bne.w	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800537a:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005382:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800538a:	d054      	beq.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005392:	f200 808b 	bhi.w	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800539c:	f000 8083 	beq.w	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053a6:	f200 8081 	bhi.w	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b0:	d02f      	beq.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b8:	d878      	bhi.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c6:	d012      	beq.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80053c8:	e070      	b.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053ca:	4b3a      	ldr	r3, [pc, #232]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053d6:	d107      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fe17 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053e6:	e34c      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053ec:	e349      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053ee:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053fa:	d107      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053fc:	f107 0318 	add.w	r3, r7, #24
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fb5d 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800540a:	e33a      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005410:	e337      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005412:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541e:	d107      	bne.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005420:	f107 030c 	add.w	r3, r7, #12
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fc9f 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800542e:	e328      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005434:	e325      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005436:	4b1f      	ldr	r3, [pc, #124]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800543e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005440:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b04      	cmp	r3, #4
 800544a:	d10c      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005452:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	08db      	lsrs	r3, r3, #3
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005464:	e01e      	b.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005472:	d106      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547a:	d102      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005480:	e010      	b.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800548e:	d106      	bne.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005496:	d102      	bne.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005498:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800549c:	e002      	b.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80054a2:	e2ee      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80054a4:	e2ed      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054aa:	e2ea      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054b0:	e2e7      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80054b2:	bf00      	nop
 80054b4:	58024400 	.word	0x58024400
 80054b8:	03d09000 	.word	0x03d09000
 80054bc:	003d0900 	.word	0x003d0900
 80054c0:	017d7840 	.word	0x017d7840
 80054c4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ce:	f040 809c 	bne.w	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80054d2:	4b9e      	ldr	r3, [pc, #632]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80054da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054e2:	d054      	beq.n	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ea:	f200 808b 	bhi.w	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054f4:	f000 8083 	beq.w	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054fe:	f200 8081 	bhi.w	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005508:	d02f      	beq.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005510:	d878      	bhi.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800551e:	d012      	beq.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005520:	e070      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005522:	4b8a      	ldr	r3, [pc, #552]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800552e:	d107      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fd6b 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800553e:	e2a0      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005544:	e29d      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005546:	4b81      	ldr	r3, [pc, #516]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005552:	d107      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005554:	f107 0318 	add.w	r3, r7, #24
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fab1 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005562:	e28e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005568:	e28b      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800556a:	4b78      	ldr	r3, [pc, #480]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005576:	d107      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005578:	f107 030c 	add.w	r3, r7, #12
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fbf3 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005586:	e27c      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800558c:	e279      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800558e:	4b6f      	ldr	r3, [pc, #444]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005596:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005598:	4b6c      	ldr	r3, [pc, #432]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d10c      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055aa:	4b68      	ldr	r3, [pc, #416]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	08db      	lsrs	r3, r3, #3
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	4a66      	ldr	r2, [pc, #408]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055b6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055bc:	e01e      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055be:	4b63      	ldr	r3, [pc, #396]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ca:	d106      	bne.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d2:	d102      	bne.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80055d4:	4b5f      	ldr	r3, [pc, #380]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d8:	e010      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055da:	4b5c      	ldr	r3, [pc, #368]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e6:	d106      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ee:	d102      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80055f0:	4b59      	ldr	r3, [pc, #356]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f4:	e002      	b.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80055fa:	e242      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80055fc:	e241      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80055fe:	4b57      	ldr	r3, [pc, #348]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005602:	e23e      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005608:	e23b      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005610:	f040 80a6 	bne.w	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005614:	4b4d      	ldr	r3, [pc, #308]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005618:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800561c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005624:	d054      	beq.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800562c:	f200 808b 	bhi.w	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005636:	f000 8083 	beq.w	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005640:	f200 8081 	bhi.w	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564a:	d02f      	beq.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005652:	d878      	bhi.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	2b00      	cmp	r3, #0
 8005658:	d004      	beq.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005660:	d012      	beq.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8005662:	e070      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005664:	4b39      	ldr	r3, [pc, #228]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005670:	d107      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fcca 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005680:	e1ff      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005686:	e1fc      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005688:	4b30      	ldr	r3, [pc, #192]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005694:	d107      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005696:	f107 0318 	add.w	r3, r7, #24
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fa10 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056a4:	e1ed      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056aa:	e1ea      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056ac:	4b27      	ldr	r3, [pc, #156]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b8:	d107      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fb52 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056c8:	e1db      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ce:	e1d8      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80056d0:	4b1e      	ldr	r3, [pc, #120]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80056d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056da:	4b1c      	ldr	r3, [pc, #112]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d10c      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80056e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056ec:	4b17      	ldr	r3, [pc, #92]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	08db      	lsrs	r3, r3, #3
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	4a16      	ldr	r2, [pc, #88]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
 80056fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fe:	e01e      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570c:	d106      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005714:	d102      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005716:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800571a:	e010      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005728:	d106      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005730:	d102      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005732:	4b09      	ldr	r3, [pc, #36]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005736:	e002      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800573c:	e1a1      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800573e:	e1a0      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005740:	4b06      	ldr	r3, [pc, #24]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005744:	e19d      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800574a:	e19a      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800574c:	58024400 	.word	0x58024400
 8005750:	03d09000 	.word	0x03d09000
 8005754:	003d0900 	.word	0x003d0900
 8005758:	017d7840 	.word	0x017d7840
 800575c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005766:	d173      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005768:	4b9a      	ldr	r3, [pc, #616]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800576a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005770:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005778:	d02f      	beq.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005780:	d863      	bhi.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578e:	d012      	beq.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8005790:	e05b      	b.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005792:	4b90      	ldr	r3, [pc, #576]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800579a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800579e:	d107      	bne.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057a0:	f107 0318 	add.w	r3, r7, #24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 f98b 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057ae:	e168      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057b4:	e165      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057b6:	4b87      	ldr	r3, [pc, #540]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c2:	d107      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057c4:	f107 030c 	add.w	r3, r7, #12
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 facd 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057d2:	e156      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057d8:	e153      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057da:	4b7e      	ldr	r3, [pc, #504]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80057dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057e4:	4b7b      	ldr	r3, [pc, #492]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d10c      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057f6:	4b77      	ldr	r3, [pc, #476]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	08db      	lsrs	r3, r3, #3
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	4a75      	ldr	r2, [pc, #468]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005802:	fa22 f303 	lsr.w	r3, r2, r3
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005808:	e01e      	b.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800580a:	4b72      	ldr	r3, [pc, #456]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005816:	d106      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800581e:	d102      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005820:	4b6e      	ldr	r3, [pc, #440]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005824:	e010      	b.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005826:	4b6b      	ldr	r3, [pc, #428]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005832:	d106      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800583a:	d102      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800583c:	4b68      	ldr	r3, [pc, #416]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005840:	e002      	b.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005846:	e11c      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005848:	e11b      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800584e:	e118      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005856:	d133      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005858:	4b5e      	ldr	r3, [pc, #376]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800585a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	2b00      	cmp	r3, #0
 8005866:	d004      	beq.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586e:	d012      	beq.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005870:	e023      	b.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005872:	4b58      	ldr	r3, [pc, #352]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800587e:	d107      	bne.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fbc3 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800588e:	e0f8      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005894:	e0f5      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005896:	4b4f      	ldr	r3, [pc, #316]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800589e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058a2:	d107      	bne.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058a4:	f107 0318 	add.w	r3, r7, #24
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f909 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80058b2:	e0e6      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b8:	e0e3      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058be:	e0e0      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c6:	f040 808d 	bne.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80058ca:	4b42      	ldr	r3, [pc, #264]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80058d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058da:	d06b      	beq.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058e2:	d874      	bhi.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d056      	beq.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f2:	d86c      	bhi.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058fa:	d03b      	beq.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005902:	d864      	bhi.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590a:	d021      	beq.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005912:	d85c      	bhi.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005920:	d004      	beq.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005922:	e054      	b.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005924:	f000 f8b6 	bl	8005a94 <HAL_RCCEx_GetD3PCLK1Freq>
 8005928:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800592a:	e0aa      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800592c:	4b29      	ldr	r3, [pc, #164]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005938:	d107      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800593a:	f107 0318 	add.w	r3, r7, #24
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f8be 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005948:	e09b      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800594e:	e098      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005950:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800595c:	d107      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800595e:	f107 030c 	add.w	r3, r7, #12
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fa00 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800596c:	e089      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005972:	e086      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005974:	4b17      	ldr	r3, [pc, #92]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b04      	cmp	r3, #4
 800597e:	d109      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005980:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	08db      	lsrs	r3, r3, #3
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005992:	e076      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005998:	e073      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a6:	d102      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059ac:	e069      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059b2:	e066      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80059b4:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059c0:	d102      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80059c2:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80059c6:	e05c      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059cc:	e059      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d2:	e056      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80059d4:	58024400 	.word	0x58024400
 80059d8:	03d09000 	.word	0x03d09000
 80059dc:	003d0900 	.word	0x003d0900
 80059e0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ea:	d148      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80059ec:	4b27      	ldr	r3, [pc, #156]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059fc:	d02a      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a04:	d838      	bhi.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a12:	d00d      	beq.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005a14:	e030      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a16:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a22:	d102      	bne.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8005a24:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a28:	e02b      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a2e:	e028      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a30:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fae4 	bl	8006010 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a4c:	e019      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a52:	e016      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a54:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a60:	d107      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a62:	f107 0318 	add.w	r3, r7, #24
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f82a 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a70:	e007      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a76:	e004      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a7c:	e001      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3740      	adds	r7, #64	; 0x40
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	017d7840 	.word	0x017d7840

08005a94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a98:	f7fe fc82 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	4904      	ldr	r1, [pc, #16]	; (8005abc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	0800af90 	.word	0x0800af90

08005ac0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b089      	sub	sp, #36	; 0x24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ac8:	4ba1      	ldr	r3, [pc, #644]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ad2:	4b9f      	ldr	r3, [pc, #636]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	0b1b      	lsrs	r3, r3, #12
 8005ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005adc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ade:	4b9c      	ldr	r3, [pc, #624]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	091b      	lsrs	r3, r3, #4
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005aea:	4b99      	ldr	r3, [pc, #612]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aee:	08db      	lsrs	r3, r3, #3
 8005af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	fb02 f303 	mul.w	r3, r2, r3
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 8111 	beq.w	8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	f000 8083 	beq.w	8005c1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	f200 80a1 	bhi.w	8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d056      	beq.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b2a:	e099      	b.n	8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b2c:	4b88      	ldr	r3, [pc, #544]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d02d      	beq.n	8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b38:	4b85      	ldr	r3, [pc, #532]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	08db      	lsrs	r3, r3, #3
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	4a84      	ldr	r2, [pc, #528]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
 8005b48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	ee07 3a90 	vmov	s15, r3
 8005b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b7b      	ldr	r3, [pc, #492]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b92:	e087      	b.n	8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba6:	4b6a      	ldr	r3, [pc, #424]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bd6:	e065      	b.n	8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bea:	4b59      	ldr	r3, [pc, #356]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c1a:	e043      	b.n	8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2e:	4b48      	ldr	r3, [pc, #288]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c5e:	e021      	b.n	8005ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c72:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ca2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005ca4:	4b2a      	ldr	r3, [pc, #168]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	0a5b      	lsrs	r3, r3, #9
 8005caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cca:	ee17 2a90 	vmov	r2, s15
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005cd2:	4b1f      	ldr	r3, [pc, #124]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	0c1b      	lsrs	r3, r3, #16
 8005cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cdc:	ee07 3a90 	vmov	s15, r3
 8005ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf8:	ee17 2a90 	vmov	r2, s15
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005d00:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	0e1b      	lsrs	r3, r3, #24
 8005d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d26:	ee17 2a90 	vmov	r2, s15
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d2e:	e008      	b.n	8005d42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]
}
 8005d42:	bf00      	nop
 8005d44:	3724      	adds	r7, #36	; 0x24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	58024400 	.word	0x58024400
 8005d54:	03d09000 	.word	0x03d09000
 8005d58:	46000000 	.word	0x46000000
 8005d5c:	4c742400 	.word	0x4c742400
 8005d60:	4a742400 	.word	0x4a742400
 8005d64:	4bbebc20 	.word	0x4bbebc20

08005d68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b089      	sub	sp, #36	; 0x24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d70:	4ba1      	ldr	r3, [pc, #644]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005d7a:	4b9f      	ldr	r3, [pc, #636]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	0d1b      	lsrs	r3, r3, #20
 8005d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d86:	4b9c      	ldr	r3, [pc, #624]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	0a1b      	lsrs	r3, r3, #8
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005d92:	4b99      	ldr	r3, [pc, #612]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d96:	08db      	lsrs	r3, r3, #3
 8005d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8111 	beq.w	8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	f000 8083 	beq.w	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	f200 80a1 	bhi.w	8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d056      	beq.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005dd2:	e099      	b.n	8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd4:	4b88      	ldr	r3, [pc, #544]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d02d      	beq.n	8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005de0:	4b85      	ldr	r3, [pc, #532]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	08db      	lsrs	r3, r3, #3
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	4a84      	ldr	r2, [pc, #528]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
 8005df0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0a:	4b7b      	ldr	r3, [pc, #492]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e3a:	e087      	b.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e7e:	e065      	b.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e92:	4b59      	ldr	r3, [pc, #356]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ec2:	e043      	b.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ece:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed6:	4b48      	ldr	r3, [pc, #288]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f06:	e021      	b.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1a:	4b37      	ldr	r3, [pc, #220]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f4c:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	0a5b      	lsrs	r3, r3, #9
 8005f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f72:	ee17 2a90 	vmov	r2, s15
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005f7a:	4b1f      	ldr	r3, [pc, #124]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa0:	ee17 2a90 	vmov	r2, s15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005fa8:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	0e1b      	lsrs	r3, r3, #24
 8005fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fce:	ee17 2a90 	vmov	r2, s15
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fd6:	e008      	b.n	8005fea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	609a      	str	r2, [r3, #8]
}
 8005fea:	bf00      	nop
 8005fec:	3724      	adds	r7, #36	; 0x24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	58024400 	.word	0x58024400
 8005ffc:	03d09000 	.word	0x03d09000
 8006000:	46000000 	.word	0x46000000
 8006004:	4c742400 	.word	0x4c742400
 8006008:	4a742400 	.word	0x4a742400
 800600c:	4bbebc20 	.word	0x4bbebc20

08006010 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006010:	b480      	push	{r7}
 8006012:	b089      	sub	sp, #36	; 0x24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006018:	4ba0      	ldr	r3, [pc, #640]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006022:	4b9e      	ldr	r3, [pc, #632]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	091b      	lsrs	r3, r3, #4
 8006028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800602c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800602e:	4b9b      	ldr	r3, [pc, #620]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006038:	4b98      	ldr	r3, [pc, #608]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603c:	08db      	lsrs	r3, r3, #3
 800603e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	fb02 f303 	mul.w	r3, r2, r3
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006050:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8111 	beq.w	800627e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b02      	cmp	r3, #2
 8006060:	f000 8083 	beq.w	800616a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b02      	cmp	r3, #2
 8006068:	f200 80a1 	bhi.w	80061ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d056      	beq.n	8006126 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006078:	e099      	b.n	80061ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800607a:	4b88      	ldr	r3, [pc, #544]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d02d      	beq.n	80060e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006086:	4b85      	ldr	r3, [pc, #532]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	08db      	lsrs	r3, r3, #3
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	4a83      	ldr	r2, [pc, #524]	; (80062a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006092:	fa22 f303 	lsr.w	r3, r2, r3
 8006096:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b0:	4b7a      	ldr	r3, [pc, #488]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80060c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060e0:	e087      	b.n	80061f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	ee07 3a90 	vmov	s15, r3
 80060e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80062a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80060f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f4:	4b69      	ldr	r3, [pc, #420]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006104:	ed97 6a03 	vldr	s12, [r7, #12]
 8006108:	eddf 5a66 	vldr	s11, [pc, #408]	; 80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800610c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006120:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006124:	e065      	b.n	80061f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	ee07 3a90 	vmov	s15, r3
 800612c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006130:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80062ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006138:	4b58      	ldr	r3, [pc, #352]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006148:	ed97 6a03 	vldr	s12, [r7, #12]
 800614c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800615c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006164:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006168:	e043      	b.n	80061f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	ee07 3a90 	vmov	s15, r3
 8006170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006174:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80062b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800617c:	4b47      	ldr	r3, [pc, #284]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800618c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006190:	eddf 5a44 	vldr	s11, [pc, #272]	; 80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800619c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ac:	e021      	b.n	80061f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80062a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80061bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c0:	4b36      	ldr	r3, [pc, #216]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80061f2:	4b2a      	ldr	r3, [pc, #168]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	0a5b      	lsrs	r3, r3, #9
 80061f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800620c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006218:	ee17 2a90 	vmov	r2, s15
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006220:	4b1e      	ldr	r3, [pc, #120]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	0c1b      	lsrs	r3, r3, #16
 8006226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800623a:	edd7 6a07 	vldr	s13, [r7, #28]
 800623e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006246:	ee17 2a90 	vmov	r2, s15
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800624e:	4b13      	ldr	r3, [pc, #76]	; (800629c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	0e1b      	lsrs	r3, r3, #24
 8006254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006268:	edd7 6a07 	vldr	s13, [r7, #28]
 800626c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006274:	ee17 2a90 	vmov	r2, s15
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800627c:	e008      	b.n	8006290 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	609a      	str	r2, [r3, #8]
}
 8006290:	bf00      	nop
 8006292:	3724      	adds	r7, #36	; 0x24
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	58024400 	.word	0x58024400
 80062a0:	03d09000 	.word	0x03d09000
 80062a4:	46000000 	.word	0x46000000
 80062a8:	4c742400 	.word	0x4c742400
 80062ac:	4a742400 	.word	0x4a742400
 80062b0:	4bbebc20 	.word	0x4bbebc20

080062b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062c2:	4b53      	ldr	r3, [pc, #332]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d101      	bne.n	80062d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e099      	b.n	8006406 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80062d2:	4b4f      	ldr	r3, [pc, #316]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a4e      	ldr	r2, [pc, #312]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80062d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062de:	f7fa fb81 	bl	80009e4 <HAL_GetTick>
 80062e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062e4:	e008      	b.n	80062f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062e6:	f7fa fb7d 	bl	80009e4 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e086      	b.n	8006406 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062f8:	4b45      	ldr	r3, [pc, #276]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f0      	bne.n	80062e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006304:	4b42      	ldr	r3, [pc, #264]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	031b      	lsls	r3, r3, #12
 8006312:	493f      	ldr	r1, [pc, #252]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 8006314:	4313      	orrs	r3, r2
 8006316:	628b      	str	r3, [r1, #40]	; 0x28
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	3b01      	subs	r3, #1
 800631e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	3b01      	subs	r3, #1
 8006328:	025b      	lsls	r3, r3, #9
 800632a:	b29b      	uxth	r3, r3
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	3b01      	subs	r3, #1
 8006334:	041b      	lsls	r3, r3, #16
 8006336:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	3b01      	subs	r3, #1
 8006342:	061b      	lsls	r3, r3, #24
 8006344:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006348:	4931      	ldr	r1, [pc, #196]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 800634a:	4313      	orrs	r3, r2
 800634c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800634e:	4b30      	ldr	r3, [pc, #192]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	492d      	ldr	r1, [pc, #180]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006360:	4b2b      	ldr	r3, [pc, #172]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	f023 0220 	bic.w	r2, r3, #32
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	4928      	ldr	r1, [pc, #160]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 800636e:	4313      	orrs	r3, r2
 8006370:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006372:	4b27      	ldr	r3, [pc, #156]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	4a26      	ldr	r2, [pc, #152]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 8006378:	f023 0310 	bic.w	r3, r3, #16
 800637c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800637e:	4b24      	ldr	r3, [pc, #144]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 8006380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006382:	4b24      	ldr	r3, [pc, #144]	; (8006414 <RCCEx_PLL2_Config+0x160>)
 8006384:	4013      	ands	r3, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	69d2      	ldr	r2, [r2, #28]
 800638a:	00d2      	lsls	r2, r2, #3
 800638c:	4920      	ldr	r1, [pc, #128]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 800638e:	4313      	orrs	r3, r2
 8006390:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006392:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 8006398:	f043 0310 	orr.w	r3, r3, #16
 800639c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80063aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063b0:	e00f      	b.n	80063d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d106      	bne.n	80063c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063b8:	4b15      	ldr	r3, [pc, #84]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	4a14      	ldr	r2, [pc, #80]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80063be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063c4:	e005      	b.n	80063d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80063c6:	4b12      	ldr	r3, [pc, #72]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	4a11      	ldr	r2, [pc, #68]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80063cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80063d2:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a0e      	ldr	r2, [pc, #56]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80063d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063de:	f7fa fb01 	bl	80009e4 <HAL_GetTick>
 80063e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063e4:	e008      	b.n	80063f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80063e6:	f7fa fafd 	bl	80009e4 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e006      	b.n	8006406 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <RCCEx_PLL2_Config+0x15c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	58024400 	.word	0x58024400
 8006414:	ffff0007 	.word	0xffff0007

08006418 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006426:	4b53      	ldr	r3, [pc, #332]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d101      	bne.n	8006436 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e099      	b.n	800656a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006436:	4b4f      	ldr	r3, [pc, #316]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a4e      	ldr	r2, [pc, #312]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 800643c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006442:	f7fa facf 	bl	80009e4 <HAL_GetTick>
 8006446:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006448:	e008      	b.n	800645c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800644a:	f7fa facb 	bl	80009e4 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e086      	b.n	800656a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800645c:	4b45      	ldr	r3, [pc, #276]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f0      	bne.n	800644a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006468:	4b42      	ldr	r3, [pc, #264]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	051b      	lsls	r3, r3, #20
 8006476:	493f      	ldr	r1, [pc, #252]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 8006478:	4313      	orrs	r3, r2
 800647a:	628b      	str	r3, [r1, #40]	; 0x28
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	3b01      	subs	r3, #1
 8006482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	3b01      	subs	r3, #1
 800648c:	025b      	lsls	r3, r3, #9
 800648e:	b29b      	uxth	r3, r3
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	3b01      	subs	r3, #1
 8006498:	041b      	lsls	r3, r3, #16
 800649a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	061b      	lsls	r3, r3, #24
 80064a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064ac:	4931      	ldr	r1, [pc, #196]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80064b2:	4b30      	ldr	r3, [pc, #192]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	492d      	ldr	r1, [pc, #180]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80064c4:	4b2b      	ldr	r3, [pc, #172]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	4928      	ldr	r1, [pc, #160]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80064d6:	4b27      	ldr	r3, [pc, #156]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	4a26      	ldr	r2, [pc, #152]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064e2:	4b24      	ldr	r3, [pc, #144]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <RCCEx_PLL3_Config+0x160>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	69d2      	ldr	r2, [r2, #28]
 80064ee:	00d2      	lsls	r2, r2, #3
 80064f0:	4920      	ldr	r1, [pc, #128]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80064f6:	4b1f      	ldr	r3, [pc, #124]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006500:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d106      	bne.n	8006516 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006508:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	4a19      	ldr	r2, [pc, #100]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 800650e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006512:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006514:	e00f      	b.n	8006536 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d106      	bne.n	800652a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	4a14      	ldr	r2, [pc, #80]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 8006522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006526:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006528:	e005      	b.n	8006536 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	4a11      	ldr	r2, [pc, #68]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 8006530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006534:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a0e      	ldr	r2, [pc, #56]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 800653c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006542:	f7fa fa4f 	bl	80009e4 <HAL_GetTick>
 8006546:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006548:	e008      	b.n	800655c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800654a:	f7fa fa4b 	bl	80009e4 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e006      	b.n	800656a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <RCCEx_PLL3_Config+0x15c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f0      	beq.n	800654a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	58024400 	.word	0x58024400
 8006578:	ffff0007 	.word	0xffff0007

0800657c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d904      	bls.n	800659a <HAL_SAI_InitProtocol+0x1e>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	3b03      	subs	r3, #3
 8006594:	2b01      	cmp	r3, #1
 8006596:	d812      	bhi.n	80065be <HAL_SAI_InitProtocol+0x42>
 8006598:	e008      	b.n	80065ac <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fac5 	bl	8006b30 <SAI_InitI2S>
 80065a6:	4603      	mov	r3, r0
 80065a8:	75fb      	strb	r3, [r7, #23]
      break;
 80065aa:	e00b      	b.n	80065c4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fb6e 	bl	8006c94 <SAI_InitPCM>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]
      break;
 80065bc:	e002      	b.n	80065c4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
      break;
 80065c2:	bf00      	nop
  }

  if (status == HAL_OK)
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f808 	bl	80065e0 <HAL_SAI_Init>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e1fb      	b.n	80069ea <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d113      	bne.n	8006624 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a96      	ldr	r2, [pc, #600]	; (800685c <HAL_SAI_Init+0x27c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_SAI_Init+0x30>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a95      	ldr	r2, [pc, #596]	; (8006860 <HAL_SAI_Init+0x280>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d107      	bne.n	8006620 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006614:	2b01      	cmp	r3, #1
 8006616:	d103      	bne.n	8006620 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e1e2      	b.n	80069ea <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a8c      	ldr	r2, [pc, #560]	; (800685c <HAL_SAI_Init+0x27c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_SAI_Init+0x58>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a8c      	ldr	r2, [pc, #560]	; (8006864 <HAL_SAI_Init+0x284>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d102      	bne.n	800663e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006638:	4b8b      	ldr	r3, [pc, #556]	; (8006868 <HAL_SAI_Init+0x288>)
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	e00e      	b.n	800665c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a87      	ldr	r2, [pc, #540]	; (8006860 <HAL_SAI_Init+0x280>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_SAI_Init+0x72>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a87      	ldr	r2, [pc, #540]	; (800686c <HAL_SAI_Init+0x28c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d102      	bne.n	8006658 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8006652:	4b87      	ldr	r3, [pc, #540]	; (8006870 <HAL_SAI_Init+0x290>)
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e001      	b.n	800665c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e1c6      	b.n	80069ea <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d106      	bne.n	8006676 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f002 f921 	bl	80088b8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fbc6 	bl	8006e08 <SAI_Disable>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e1b1      	b.n	80069ea <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d00c      	beq.n	80066b0 <HAL_SAI_Init+0xd0>
 8006696:	2b02      	cmp	r3, #2
 8006698:	d80d      	bhi.n	80066b6 <HAL_SAI_Init+0xd6>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <HAL_SAI_Init+0xc4>
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d003      	beq.n	80066aa <HAL_SAI_Init+0xca>
 80066a2:	e008      	b.n	80066b6 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80066a8:	e008      	b.n	80066bc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80066aa:	2310      	movs	r3, #16
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80066ae:	e005      	b.n	80066bc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80066b0:	2320      	movs	r3, #32
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80066b4:	e002      	b.n	80066bc <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80066ba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b05      	cmp	r3, #5
 80066c2:	d822      	bhi.n	800670a <HAL_SAI_Init+0x12a>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <HAL_SAI_Init+0xec>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066e5 	.word	0x080066e5
 80066d0:	080066eb 	.word	0x080066eb
 80066d4:	080066f3 	.word	0x080066f3
 80066d8:	0800670b 	.word	0x0800670b
 80066dc:	0800670b 	.word	0x0800670b
 80066e0:	080066fb 	.word	0x080066fb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61fb      	str	r3, [r7, #28]
      break;
 80066e8:	e012      	b.n	8006710 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80066ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ee:	61fb      	str	r3, [r7, #28]
      break;
 80066f0:	e00e      	b.n	8006710 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80066f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066f6:	61fb      	str	r3, [r7, #28]
      break;
 80066f8:	e00a      	b.n	8006710 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80066fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	f043 0303 	orr.w	r3, r3, #3
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006708:	e002      	b.n	8006710 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
      break;
 800670e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006714:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8084 	beq.w	8006828 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a4c      	ldr	r2, [pc, #304]	; (800685c <HAL_SAI_Init+0x27c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <HAL_SAI_Init+0x158>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a4c      	ldr	r2, [pc, #304]	; (8006864 <HAL_SAI_Init+0x284>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d104      	bne.n	8006742 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006738:	f44f 7080 	mov.w	r0, #256	; 0x100
 800673c:	f7fe fd86 	bl	800524c <HAL_RCCEx_GetPeriphCLKFreq>
 8006740:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a46      	ldr	r2, [pc, #280]	; (8006860 <HAL_SAI_Init+0x280>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d104      	bne.n	8006756 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800674c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006750:	f7fe fd7c 	bl	800524c <HAL_RCCEx_GetPeriphCLKFreq>
 8006754:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a44      	ldr	r2, [pc, #272]	; (800686c <HAL_SAI_Init+0x28c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d104      	bne.n	800676a <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006760:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006764:	f7fe fd72 	bl	800524c <HAL_RCCEx_GetPeriphCLKFreq>
 8006768:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006772:	d120      	bne.n	80067b6 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006778:	2b04      	cmp	r3, #4
 800677a:	d102      	bne.n	8006782 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800677c:	2340      	movs	r3, #64	; 0x40
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e00a      	b.n	8006798 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	2b08      	cmp	r3, #8
 8006788:	d103      	bne.n	8006792 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800678a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e002      	b.n	8006798 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	4619      	mov	r1, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80067b2:	613b      	str	r3, [r7, #16]
 80067b4:	e017      	b.n	80067e6 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067be:	d101      	bne.n	80067c4 <HAL_SAI_Init+0x1e4>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e000      	b.n	80067c6 <HAL_SAI_Init+0x1e6>
 80067c4:	2301      	movs	r3, #1
 80067c6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4619      	mov	r1, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	fb02 f303 	mul.w	r3, r2, r3
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80067e4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4a22      	ldr	r2, [pc, #136]	; (8006874 <HAL_SAI_Init+0x294>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	08da      	lsrs	r2, r3, #3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80067f4:	6939      	ldr	r1, [r7, #16]
 80067f6:	4b1f      	ldr	r3, [pc, #124]	; (8006874 <HAL_SAI_Init+0x294>)
 80067f8:	fba3 2301 	umull	r2, r3, r3, r1
 80067fc:	08da      	lsrs	r2, r3, #3
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	1aca      	subs	r2, r1, r3
 8006808:	2a08      	cmp	r2, #8
 800680a:	d904      	bls.n	8006816 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681a:	2b04      	cmp	r3, #4
 800681c:	d104      	bne.n	8006828 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	085a      	lsrs	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <HAL_SAI_Init+0x258>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d109      	bne.n	800684c <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_SAI_Init+0x264>
 8006840:	2300      	movs	r3, #0
 8006842:	e001      	b.n	8006848 <HAL_SAI_Init+0x268>
 8006844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	e017      	b.n	800687c <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	2b01      	cmp	r3, #1
 8006852:	d111      	bne.n	8006878 <HAL_SAI_Init+0x298>
 8006854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006858:	e00f      	b.n	800687a <HAL_SAI_Init+0x29a>
 800685a:	bf00      	nop
 800685c:	40015804 	.word	0x40015804
 8006860:	58005404 	.word	0x58005404
 8006864:	40015824 	.word	0x40015824
 8006868:	40015800 	.word	0x40015800
 800686c:	58005424 	.word	0x58005424
 8006870:	58005400 	.word	0x58005400
 8006874:	cccccccd 	.word	0xcccccccd
 8006878:	2300      	movs	r3, #0
 800687a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6819      	ldr	r1, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4b5b      	ldr	r3, [pc, #364]	; (80069f4 <HAL_SAI_Init+0x414>)
 8006888:	400b      	ands	r3, r1
 800688a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80068a0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a6:	431a      	orrs	r2, r3
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80068b4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80068c0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	051b      	lsls	r3, r3, #20
 80068c8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80068ce:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	4b43      	ldr	r3, [pc, #268]	; (80069f8 <HAL_SAI_Init+0x418>)
 80068ea:	400b      	ands	r3, r1
 80068ec:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6859      	ldr	r1, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6899      	ldr	r1, [r3, #8]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b39      	ldr	r3, [pc, #228]	; (80069fc <HAL_SAI_Init+0x41c>)
 8006918:	400b      	ands	r3, r1
 800691a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6899      	ldr	r1, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006926:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800692c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006932:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006938:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	3b01      	subs	r3, #1
 8006940:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006942:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68d9      	ldr	r1, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	f24f 0320 	movw	r3, #61472	; 0xf020
 800695a:	400b      	ands	r3, r1
 800695c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68d9      	ldr	r1, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006972:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006974:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697a:	3b01      	subs	r3, #1
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <HAL_SAI_Init+0x420>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d004      	beq.n	800699c <HAL_SAI_Init+0x3bc>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1b      	ldr	r2, [pc, #108]	; (8006a04 <HAL_SAI_Init+0x424>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d119      	bne.n	80069d0 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a0:	f023 0201 	bic.w	r2, r3, #1
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d10e      	bne.n	80069d0 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ba:	3b01      	subs	r3, #1
 80069bc:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80069be:	431a      	orrs	r2, r3
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c8:	f043 0201 	orr.w	r2, r3, #1
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3728      	adds	r7, #40	; 0x28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	f005c010 	.word	0xf005c010
 80069f8:	ffff1ff0 	.word	0xffff1ff0
 80069fc:	fff88000 	.word	0xfff88000
 8006a00:	40015804 	.word	0x40015804
 8006a04:	58005404 	.word	0x58005404

08006a08 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_SAI_Receive_DMA+0x1a>
 8006a1c:	88fb      	ldrh	r3, [r7, #6]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e079      	b.n	8006b1a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d172      	bne.n	8006b18 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_SAI_Receive_DMA+0x38>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e06c      	b.n	8006b1a <HAL_SAI_Receive_DMA+0x112>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	88fa      	ldrh	r2, [r7, #6]
 8006a5a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2222      	movs	r2, #34	; 0x22
 8006a6a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a74:	4a2b      	ldr	r2, [pc, #172]	; (8006b24 <HAL_SAI_Receive_DMA+0x11c>)
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7e:	4a2a      	ldr	r2, [pc, #168]	; (8006b28 <HAL_SAI_Receive_DMA+0x120>)
 8006a80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a88:	4a28      	ldr	r2, [pc, #160]	; (8006b2c <HAL_SAI_Receive_DMA+0x124>)
 8006a8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a92:	2200      	movs	r2, #0
 8006a94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	331c      	adds	r3, #28
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006ab0:	f7fa fcf8 	bl	80014a4 <HAL_DMA_Start_IT>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e029      	b.n	8006b1a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f965 	bl	8006d98 <SAI_InterruptFlag>
 8006ace:	4601      	mov	r1, r0
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006aec:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d107      	bne.n	8006b0c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b0a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e000      	b.n	8006b1a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8006b18:	2302      	movs	r3, #2
  }
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	08006edd 	.word	0x08006edd
 8006b28:	08006e7d 	.word	0x08006e7d
 8006b2c:	08006ef9 	.word	0x08006ef9

08006b30 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <SAI_InitI2S+0x2e>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d103      	bne.n	8006b66 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	651a      	str	r2, [r3, #80]	; 0x50
 8006b64:	e002      	b.n	8006b6c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b72:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b7a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e077      	b.n	8006c86 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d107      	bne.n	8006bac <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006ba8:	665a      	str	r2, [r3, #100]	; 0x64
 8006baa:	e006      	b.n	8006bba <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bb2:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	665a      	str	r2, [r3, #100]	; 0x64
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d84f      	bhi.n	8006c60 <SAI_InitI2S+0x130>
 8006bc0:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <SAI_InitI2S+0x98>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006bfb 	.word	0x08006bfb
 8006bd0:	08006c1d 	.word	0x08006c1d
 8006bd4:	08006c3f 	.word	0x08006c3f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2280      	movs	r2, #128	; 0x80
 8006bdc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	011a      	lsls	r2, r3, #4
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2240      	movs	r2, #64	; 0x40
 8006bf6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006bf8:	e035      	b.n	8006c66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2280      	movs	r2, #128	; 0x80
 8006bfe:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	085b      	lsrs	r3, r3, #1
 8006c04:	019a      	lsls	r2, r3, #6
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	085b      	lsrs	r3, r3, #1
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2280      	movs	r2, #128	; 0x80
 8006c18:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006c1a:	e024      	b.n	8006c66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	22c0      	movs	r2, #192	; 0xc0
 8006c20:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	085b      	lsrs	r3, r3, #1
 8006c26:	019a      	lsls	r2, r3, #6
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	085b      	lsrs	r3, r3, #1
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2280      	movs	r2, #128	; 0x80
 8006c3a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006c3c:	e013      	b.n	8006c66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	22e0      	movs	r2, #224	; 0xe0
 8006c42:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	019a      	lsls	r2, r3, #6
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2280      	movs	r2, #128	; 0x80
 8006c5c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006c5e:	e002      	b.n	8006c66 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]
      break;
 8006c64:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d10b      	bne.n	8006c84 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d102      	bne.n	8006c78 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2210      	movs	r2, #16
 8006c76:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d102      	bne.n	8006c84 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2208      	movs	r2, #8
 8006c82:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop

08006c94 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <SAI_InitPCM+0x2e>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d103      	bne.n	8006cca <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	651a      	str	r2, [r3, #80]	; 0x50
 8006cc8:	e002      	b.n	8006cd0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006cdc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006ce4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cf8:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d103      	bne.n	8006d08 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2201      	movs	r2, #1
 8006d04:	659a      	str	r2, [r3, #88]	; 0x58
 8006d06:	e002      	b.n	8006d0e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	220d      	movs	r2, #13
 8006d0c:	659a      	str	r2, [r3, #88]	; 0x58
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d837      	bhi.n	8006d84 <SAI_InitPCM+0xf0>
 8006d14:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <SAI_InitPCM+0x88>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d2d 	.word	0x08006d2d
 8006d20:	08006d43 	.word	0x08006d43
 8006d24:	08006d59 	.word	0x08006d59
 8006d28:	08006d6f 	.word	0x08006d6f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2280      	movs	r2, #128	; 0x80
 8006d30:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	011a      	lsls	r2, r3, #4
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2240      	movs	r2, #64	; 0x40
 8006d3e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006d40:	e023      	b.n	8006d8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2280      	movs	r2, #128	; 0x80
 8006d46:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2280      	movs	r2, #128	; 0x80
 8006d54:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006d56:	e018      	b.n	8006d8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	22c0      	movs	r2, #192	; 0xc0
 8006d5c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2280      	movs	r2, #128	; 0x80
 8006d6a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006d6c:	e00d      	b.n	8006d8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	22e0      	movs	r2, #224	; 0xe0
 8006d72:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2280      	movs	r2, #128	; 0x80
 8006d80:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006d82:	e002      	b.n	8006d8a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	75fb      	strb	r3, [r7, #23]
      break;
 8006d88:	bf00      	nop
  }

  return status;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d103      	bne.n	8006db6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f043 0308 	orr.w	r3, r3, #8
 8006db4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d10b      	bne.n	8006dd6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d003      	beq.n	8006dce <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d103      	bne.n	8006dd6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f043 0310 	orr.w	r3, r3, #16
 8006dd4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d003      	beq.n	8006de6 <SAI_InterruptFlag+0x4e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d104      	bne.n	8006df0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	e003      	b.n	8006df8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f043 0304 	orr.w	r3, r3, #4
 8006df6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006df8:	68fb      	ldr	r3, [r7, #12]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006e10:	4b18      	ldr	r3, [pc, #96]	; (8006e74 <SAI_Disable+0x6c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a18      	ldr	r2, [pc, #96]	; (8006e78 <SAI_Disable+0x70>)
 8006e16:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1a:	0b1b      	lsrs	r3, r3, #12
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e32:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006e4e:	e009      	b.n	8006e64 <SAI_Disable+0x5c>
    }
    count--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e7      	bne.n	8006e34 <SAI_Disable+0x2c>

  return status;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	24000408 	.word	0x24000408
 8006e78:	95cbec1b 	.word	0x95cbec1b

08006e7c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e92:	d01c      	beq.n	8006ece <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006ea2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006eac:	2100      	movs	r1, #0
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f7ff ff72 	bl	8006d98 <SAI_InterruptFlag>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	43d9      	mvns	r1, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	400a      	ands	r2, r1
 8006ec4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7f9 fcd9 	bl	8000886 <HAL_SAI_RxCpltCallback>
#endif
}
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7f9 fcc0 	bl	8000870 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fb fc60 	bl	80027cc <HAL_DMA_GetError>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d01d      	beq.n	8006f4e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006f30:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff ff68 	bl	8006e08 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7f9 fb5d 	bl	8000608 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e042      	b.n	8006fee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fc36 	bl	80087ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2224      	movs	r2, #36	; 0x24
 8006f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f82d 	bl	8006ff8 <UART_SetConfig>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e022      	b.n	8006fee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fe7f 	bl	8007cb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0201 	orr.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 ff06 	bl	8007df8 <UART_CheckIdleState>
 8006fec:	4603      	mov	r3, r0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff8:	b5b0      	push	{r4, r5, r7, lr}
 8006ffa:	b08e      	sub	sp, #56	; 0x38
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	431a      	orrs	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	4313      	orrs	r3, r2
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	4bbf      	ldr	r3, [pc, #764]	; (8007324 <UART_SetConfig+0x32c>)
 8007026:	4013      	ands	r3, r2
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800702e:	430b      	orrs	r3, r1
 8007030:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4ab5      	ldr	r2, [pc, #724]	; (8007328 <UART_SetConfig+0x330>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d004      	beq.n	8007062 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800705e:	4313      	orrs	r3, r2
 8007060:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	4bb0      	ldr	r3, [pc, #704]	; (800732c <UART_SetConfig+0x334>)
 800706a:	4013      	ands	r3, r2
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6812      	ldr	r2, [r2, #0]
 8007070:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007072:	430b      	orrs	r3, r1
 8007074:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	f023 010f 	bic.w	r1, r3, #15
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4aa7      	ldr	r2, [pc, #668]	; (8007330 <UART_SetConfig+0x338>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d176      	bne.n	8007184 <UART_SetConfig+0x18c>
 8007096:	4ba7      	ldr	r3, [pc, #668]	; (8007334 <UART_SetConfig+0x33c>)
 8007098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800709e:	2b28      	cmp	r3, #40	; 0x28
 80070a0:	d86c      	bhi.n	800717c <UART_SetConfig+0x184>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <UART_SetConfig+0xb0>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	0800714d 	.word	0x0800714d
 80070ac:	0800717d 	.word	0x0800717d
 80070b0:	0800717d 	.word	0x0800717d
 80070b4:	0800717d 	.word	0x0800717d
 80070b8:	0800717d 	.word	0x0800717d
 80070bc:	0800717d 	.word	0x0800717d
 80070c0:	0800717d 	.word	0x0800717d
 80070c4:	0800717d 	.word	0x0800717d
 80070c8:	08007155 	.word	0x08007155
 80070cc:	0800717d 	.word	0x0800717d
 80070d0:	0800717d 	.word	0x0800717d
 80070d4:	0800717d 	.word	0x0800717d
 80070d8:	0800717d 	.word	0x0800717d
 80070dc:	0800717d 	.word	0x0800717d
 80070e0:	0800717d 	.word	0x0800717d
 80070e4:	0800717d 	.word	0x0800717d
 80070e8:	0800715d 	.word	0x0800715d
 80070ec:	0800717d 	.word	0x0800717d
 80070f0:	0800717d 	.word	0x0800717d
 80070f4:	0800717d 	.word	0x0800717d
 80070f8:	0800717d 	.word	0x0800717d
 80070fc:	0800717d 	.word	0x0800717d
 8007100:	0800717d 	.word	0x0800717d
 8007104:	0800717d 	.word	0x0800717d
 8007108:	08007165 	.word	0x08007165
 800710c:	0800717d 	.word	0x0800717d
 8007110:	0800717d 	.word	0x0800717d
 8007114:	0800717d 	.word	0x0800717d
 8007118:	0800717d 	.word	0x0800717d
 800711c:	0800717d 	.word	0x0800717d
 8007120:	0800717d 	.word	0x0800717d
 8007124:	0800717d 	.word	0x0800717d
 8007128:	0800716d 	.word	0x0800716d
 800712c:	0800717d 	.word	0x0800717d
 8007130:	0800717d 	.word	0x0800717d
 8007134:	0800717d 	.word	0x0800717d
 8007138:	0800717d 	.word	0x0800717d
 800713c:	0800717d 	.word	0x0800717d
 8007140:	0800717d 	.word	0x0800717d
 8007144:	0800717d 	.word	0x0800717d
 8007148:	08007175 	.word	0x08007175
 800714c:	2301      	movs	r3, #1
 800714e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007152:	e326      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007154:	2304      	movs	r3, #4
 8007156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800715a:	e322      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800715c:	2308      	movs	r3, #8
 800715e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007162:	e31e      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007164:	2310      	movs	r3, #16
 8007166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716a:	e31a      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800716c:	2320      	movs	r3, #32
 800716e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007172:	e316      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007174:	2340      	movs	r3, #64	; 0x40
 8007176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800717a:	e312      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800717c:	2380      	movs	r3, #128	; 0x80
 800717e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007182:	e30e      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a6b      	ldr	r2, [pc, #428]	; (8007338 <UART_SetConfig+0x340>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d130      	bne.n	80071f0 <UART_SetConfig+0x1f8>
 800718e:	4b69      	ldr	r3, [pc, #420]	; (8007334 <UART_SetConfig+0x33c>)
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b05      	cmp	r3, #5
 8007198:	d826      	bhi.n	80071e8 <UART_SetConfig+0x1f0>
 800719a:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <UART_SetConfig+0x1a8>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071b9 	.word	0x080071b9
 80071a4:	080071c1 	.word	0x080071c1
 80071a8:	080071c9 	.word	0x080071c9
 80071ac:	080071d1 	.word	0x080071d1
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071e1 	.word	0x080071e1
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071be:	e2f0      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80071c0:	2304      	movs	r3, #4
 80071c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c6:	e2ec      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80071c8:	2308      	movs	r3, #8
 80071ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ce:	e2e8      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80071d0:	2310      	movs	r3, #16
 80071d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071d6:	e2e4      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80071d8:	2320      	movs	r3, #32
 80071da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071de:	e2e0      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80071e0:	2340      	movs	r3, #64	; 0x40
 80071e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071e6:	e2dc      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80071e8:	2380      	movs	r3, #128	; 0x80
 80071ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ee:	e2d8      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a51      	ldr	r2, [pc, #324]	; (800733c <UART_SetConfig+0x344>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d130      	bne.n	800725c <UART_SetConfig+0x264>
 80071fa:	4b4e      	ldr	r3, [pc, #312]	; (8007334 <UART_SetConfig+0x33c>)
 80071fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	2b05      	cmp	r3, #5
 8007204:	d826      	bhi.n	8007254 <UART_SetConfig+0x25c>
 8007206:	a201      	add	r2, pc, #4	; (adr r2, 800720c <UART_SetConfig+0x214>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007225 	.word	0x08007225
 8007210:	0800722d 	.word	0x0800722d
 8007214:	08007235 	.word	0x08007235
 8007218:	0800723d 	.word	0x0800723d
 800721c:	08007245 	.word	0x08007245
 8007220:	0800724d 	.word	0x0800724d
 8007224:	2300      	movs	r3, #0
 8007226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800722a:	e2ba      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800722c:	2304      	movs	r3, #4
 800722e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007232:	e2b6      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007234:	2308      	movs	r3, #8
 8007236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800723a:	e2b2      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800723c:	2310      	movs	r3, #16
 800723e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007242:	e2ae      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007244:	2320      	movs	r3, #32
 8007246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800724a:	e2aa      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800724c:	2340      	movs	r3, #64	; 0x40
 800724e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007252:	e2a6      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007254:	2380      	movs	r3, #128	; 0x80
 8007256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800725a:	e2a2      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a37      	ldr	r2, [pc, #220]	; (8007340 <UART_SetConfig+0x348>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d130      	bne.n	80072c8 <UART_SetConfig+0x2d0>
 8007266:	4b33      	ldr	r3, [pc, #204]	; (8007334 <UART_SetConfig+0x33c>)
 8007268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	2b05      	cmp	r3, #5
 8007270:	d826      	bhi.n	80072c0 <UART_SetConfig+0x2c8>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <UART_SetConfig+0x280>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	08007291 	.word	0x08007291
 800727c:	08007299 	.word	0x08007299
 8007280:	080072a1 	.word	0x080072a1
 8007284:	080072a9 	.word	0x080072a9
 8007288:	080072b1 	.word	0x080072b1
 800728c:	080072b9 	.word	0x080072b9
 8007290:	2300      	movs	r3, #0
 8007292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007296:	e284      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007298:	2304      	movs	r3, #4
 800729a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729e:	e280      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80072a0:	2308      	movs	r3, #8
 80072a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a6:	e27c      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80072a8:	2310      	movs	r3, #16
 80072aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ae:	e278      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80072b0:	2320      	movs	r3, #32
 80072b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072b6:	e274      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80072b8:	2340      	movs	r3, #64	; 0x40
 80072ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072be:	e270      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80072c0:	2380      	movs	r3, #128	; 0x80
 80072c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072c6:	e26c      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a1d      	ldr	r2, [pc, #116]	; (8007344 <UART_SetConfig+0x34c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d142      	bne.n	8007358 <UART_SetConfig+0x360>
 80072d2:	4b18      	ldr	r3, [pc, #96]	; (8007334 <UART_SetConfig+0x33c>)
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	2b05      	cmp	r3, #5
 80072dc:	d838      	bhi.n	8007350 <UART_SetConfig+0x358>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <UART_SetConfig+0x2ec>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	080072fd 	.word	0x080072fd
 80072e8:	08007305 	.word	0x08007305
 80072ec:	0800730d 	.word	0x0800730d
 80072f0:	08007315 	.word	0x08007315
 80072f4:	0800731d 	.word	0x0800731d
 80072f8:	08007349 	.word	0x08007349
 80072fc:	2300      	movs	r3, #0
 80072fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007302:	e24e      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007304:	2304      	movs	r3, #4
 8007306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800730a:	e24a      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800730c:	2308      	movs	r3, #8
 800730e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007312:	e246      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007314:	2310      	movs	r3, #16
 8007316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800731a:	e242      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800731c:	2320      	movs	r3, #32
 800731e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007322:	e23e      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007324:	cfff69f3 	.word	0xcfff69f3
 8007328:	58000c00 	.word	0x58000c00
 800732c:	11fff4ff 	.word	0x11fff4ff
 8007330:	40011000 	.word	0x40011000
 8007334:	58024400 	.word	0x58024400
 8007338:	40004400 	.word	0x40004400
 800733c:	40004800 	.word	0x40004800
 8007340:	40004c00 	.word	0x40004c00
 8007344:	40005000 	.word	0x40005000
 8007348:	2340      	movs	r3, #64	; 0x40
 800734a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800734e:	e228      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007350:	2380      	movs	r3, #128	; 0x80
 8007352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007356:	e224      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4ab1      	ldr	r2, [pc, #708]	; (8007624 <UART_SetConfig+0x62c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d176      	bne.n	8007450 <UART_SetConfig+0x458>
 8007362:	4bb1      	ldr	r3, [pc, #708]	; (8007628 <UART_SetConfig+0x630>)
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800736a:	2b28      	cmp	r3, #40	; 0x28
 800736c:	d86c      	bhi.n	8007448 <UART_SetConfig+0x450>
 800736e:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <UART_SetConfig+0x37c>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	08007419 	.word	0x08007419
 8007378:	08007449 	.word	0x08007449
 800737c:	08007449 	.word	0x08007449
 8007380:	08007449 	.word	0x08007449
 8007384:	08007449 	.word	0x08007449
 8007388:	08007449 	.word	0x08007449
 800738c:	08007449 	.word	0x08007449
 8007390:	08007449 	.word	0x08007449
 8007394:	08007421 	.word	0x08007421
 8007398:	08007449 	.word	0x08007449
 800739c:	08007449 	.word	0x08007449
 80073a0:	08007449 	.word	0x08007449
 80073a4:	08007449 	.word	0x08007449
 80073a8:	08007449 	.word	0x08007449
 80073ac:	08007449 	.word	0x08007449
 80073b0:	08007449 	.word	0x08007449
 80073b4:	08007429 	.word	0x08007429
 80073b8:	08007449 	.word	0x08007449
 80073bc:	08007449 	.word	0x08007449
 80073c0:	08007449 	.word	0x08007449
 80073c4:	08007449 	.word	0x08007449
 80073c8:	08007449 	.word	0x08007449
 80073cc:	08007449 	.word	0x08007449
 80073d0:	08007449 	.word	0x08007449
 80073d4:	08007431 	.word	0x08007431
 80073d8:	08007449 	.word	0x08007449
 80073dc:	08007449 	.word	0x08007449
 80073e0:	08007449 	.word	0x08007449
 80073e4:	08007449 	.word	0x08007449
 80073e8:	08007449 	.word	0x08007449
 80073ec:	08007449 	.word	0x08007449
 80073f0:	08007449 	.word	0x08007449
 80073f4:	08007439 	.word	0x08007439
 80073f8:	08007449 	.word	0x08007449
 80073fc:	08007449 	.word	0x08007449
 8007400:	08007449 	.word	0x08007449
 8007404:	08007449 	.word	0x08007449
 8007408:	08007449 	.word	0x08007449
 800740c:	08007449 	.word	0x08007449
 8007410:	08007449 	.word	0x08007449
 8007414:	08007441 	.word	0x08007441
 8007418:	2301      	movs	r3, #1
 800741a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800741e:	e1c0      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007420:	2304      	movs	r3, #4
 8007422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007426:	e1bc      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007428:	2308      	movs	r3, #8
 800742a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800742e:	e1b8      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007430:	2310      	movs	r3, #16
 8007432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007436:	e1b4      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007438:	2320      	movs	r3, #32
 800743a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743e:	e1b0      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007440:	2340      	movs	r3, #64	; 0x40
 8007442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007446:	e1ac      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007448:	2380      	movs	r3, #128	; 0x80
 800744a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744e:	e1a8      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a75      	ldr	r2, [pc, #468]	; (800762c <UART_SetConfig+0x634>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d130      	bne.n	80074bc <UART_SetConfig+0x4c4>
 800745a:	4b73      	ldr	r3, [pc, #460]	; (8007628 <UART_SetConfig+0x630>)
 800745c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	2b05      	cmp	r3, #5
 8007464:	d826      	bhi.n	80074b4 <UART_SetConfig+0x4bc>
 8007466:	a201      	add	r2, pc, #4	; (adr r2, 800746c <UART_SetConfig+0x474>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	08007485 	.word	0x08007485
 8007470:	0800748d 	.word	0x0800748d
 8007474:	08007495 	.word	0x08007495
 8007478:	0800749d 	.word	0x0800749d
 800747c:	080074a5 	.word	0x080074a5
 8007480:	080074ad 	.word	0x080074ad
 8007484:	2300      	movs	r3, #0
 8007486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748a:	e18a      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800748c:	2304      	movs	r3, #4
 800748e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007492:	e186      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007494:	2308      	movs	r3, #8
 8007496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749a:	e182      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800749c:	2310      	movs	r3, #16
 800749e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a2:	e17e      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80074a4:	2320      	movs	r3, #32
 80074a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074aa:	e17a      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80074ac:	2340      	movs	r3, #64	; 0x40
 80074ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074b2:	e176      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80074b4:	2380      	movs	r3, #128	; 0x80
 80074b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ba:	e172      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a5b      	ldr	r2, [pc, #364]	; (8007630 <UART_SetConfig+0x638>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d130      	bne.n	8007528 <UART_SetConfig+0x530>
 80074c6:	4b58      	ldr	r3, [pc, #352]	; (8007628 <UART_SetConfig+0x630>)
 80074c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d826      	bhi.n	8007520 <UART_SetConfig+0x528>
 80074d2:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <UART_SetConfig+0x4e0>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	080074f1 	.word	0x080074f1
 80074dc:	080074f9 	.word	0x080074f9
 80074e0:	08007501 	.word	0x08007501
 80074e4:	08007509 	.word	0x08007509
 80074e8:	08007511 	.word	0x08007511
 80074ec:	08007519 	.word	0x08007519
 80074f0:	2300      	movs	r3, #0
 80074f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f6:	e154      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80074f8:	2304      	movs	r3, #4
 80074fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fe:	e150      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007500:	2308      	movs	r3, #8
 8007502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007506:	e14c      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007508:	2310      	movs	r3, #16
 800750a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800750e:	e148      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007510:	2320      	movs	r3, #32
 8007512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007516:	e144      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007518:	2340      	movs	r3, #64	; 0x40
 800751a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800751e:	e140      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007520:	2380      	movs	r3, #128	; 0x80
 8007522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007526:	e13c      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a41      	ldr	r2, [pc, #260]	; (8007634 <UART_SetConfig+0x63c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	f040 8082 	bne.w	8007638 <UART_SetConfig+0x640>
 8007534:	4b3c      	ldr	r3, [pc, #240]	; (8007628 <UART_SetConfig+0x630>)
 8007536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007538:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800753c:	2b28      	cmp	r3, #40	; 0x28
 800753e:	d86d      	bhi.n	800761c <UART_SetConfig+0x624>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <UART_SetConfig+0x550>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	080075ed 	.word	0x080075ed
 800754c:	0800761d 	.word	0x0800761d
 8007550:	0800761d 	.word	0x0800761d
 8007554:	0800761d 	.word	0x0800761d
 8007558:	0800761d 	.word	0x0800761d
 800755c:	0800761d 	.word	0x0800761d
 8007560:	0800761d 	.word	0x0800761d
 8007564:	0800761d 	.word	0x0800761d
 8007568:	080075f5 	.word	0x080075f5
 800756c:	0800761d 	.word	0x0800761d
 8007570:	0800761d 	.word	0x0800761d
 8007574:	0800761d 	.word	0x0800761d
 8007578:	0800761d 	.word	0x0800761d
 800757c:	0800761d 	.word	0x0800761d
 8007580:	0800761d 	.word	0x0800761d
 8007584:	0800761d 	.word	0x0800761d
 8007588:	080075fd 	.word	0x080075fd
 800758c:	0800761d 	.word	0x0800761d
 8007590:	0800761d 	.word	0x0800761d
 8007594:	0800761d 	.word	0x0800761d
 8007598:	0800761d 	.word	0x0800761d
 800759c:	0800761d 	.word	0x0800761d
 80075a0:	0800761d 	.word	0x0800761d
 80075a4:	0800761d 	.word	0x0800761d
 80075a8:	08007605 	.word	0x08007605
 80075ac:	0800761d 	.word	0x0800761d
 80075b0:	0800761d 	.word	0x0800761d
 80075b4:	0800761d 	.word	0x0800761d
 80075b8:	0800761d 	.word	0x0800761d
 80075bc:	0800761d 	.word	0x0800761d
 80075c0:	0800761d 	.word	0x0800761d
 80075c4:	0800761d 	.word	0x0800761d
 80075c8:	0800760d 	.word	0x0800760d
 80075cc:	0800761d 	.word	0x0800761d
 80075d0:	0800761d 	.word	0x0800761d
 80075d4:	0800761d 	.word	0x0800761d
 80075d8:	0800761d 	.word	0x0800761d
 80075dc:	0800761d 	.word	0x0800761d
 80075e0:	0800761d 	.word	0x0800761d
 80075e4:	0800761d 	.word	0x0800761d
 80075e8:	08007615 	.word	0x08007615
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075f2:	e0d6      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80075f4:	2304      	movs	r3, #4
 80075f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075fa:	e0d2      	b.n	80077a2 <UART_SetConfig+0x7aa>
 80075fc:	2308      	movs	r3, #8
 80075fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007602:	e0ce      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007604:	2310      	movs	r3, #16
 8007606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800760a:	e0ca      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800760c:	2320      	movs	r3, #32
 800760e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007612:	e0c6      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007614:	2340      	movs	r3, #64	; 0x40
 8007616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761a:	e0c2      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800761c:	2380      	movs	r3, #128	; 0x80
 800761e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007622:	e0be      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007624:	40011400 	.word	0x40011400
 8007628:	58024400 	.word	0x58024400
 800762c:	40007800 	.word	0x40007800
 8007630:	40007c00 	.word	0x40007c00
 8007634:	40011800 	.word	0x40011800
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4aad      	ldr	r2, [pc, #692]	; (80078f4 <UART_SetConfig+0x8fc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d176      	bne.n	8007730 <UART_SetConfig+0x738>
 8007642:	4bad      	ldr	r3, [pc, #692]	; (80078f8 <UART_SetConfig+0x900>)
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800764a:	2b28      	cmp	r3, #40	; 0x28
 800764c:	d86c      	bhi.n	8007728 <UART_SetConfig+0x730>
 800764e:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <UART_SetConfig+0x65c>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	080076f9 	.word	0x080076f9
 8007658:	08007729 	.word	0x08007729
 800765c:	08007729 	.word	0x08007729
 8007660:	08007729 	.word	0x08007729
 8007664:	08007729 	.word	0x08007729
 8007668:	08007729 	.word	0x08007729
 800766c:	08007729 	.word	0x08007729
 8007670:	08007729 	.word	0x08007729
 8007674:	08007701 	.word	0x08007701
 8007678:	08007729 	.word	0x08007729
 800767c:	08007729 	.word	0x08007729
 8007680:	08007729 	.word	0x08007729
 8007684:	08007729 	.word	0x08007729
 8007688:	08007729 	.word	0x08007729
 800768c:	08007729 	.word	0x08007729
 8007690:	08007729 	.word	0x08007729
 8007694:	08007709 	.word	0x08007709
 8007698:	08007729 	.word	0x08007729
 800769c:	08007729 	.word	0x08007729
 80076a0:	08007729 	.word	0x08007729
 80076a4:	08007729 	.word	0x08007729
 80076a8:	08007729 	.word	0x08007729
 80076ac:	08007729 	.word	0x08007729
 80076b0:	08007729 	.word	0x08007729
 80076b4:	08007711 	.word	0x08007711
 80076b8:	08007729 	.word	0x08007729
 80076bc:	08007729 	.word	0x08007729
 80076c0:	08007729 	.word	0x08007729
 80076c4:	08007729 	.word	0x08007729
 80076c8:	08007729 	.word	0x08007729
 80076cc:	08007729 	.word	0x08007729
 80076d0:	08007729 	.word	0x08007729
 80076d4:	08007719 	.word	0x08007719
 80076d8:	08007729 	.word	0x08007729
 80076dc:	08007729 	.word	0x08007729
 80076e0:	08007729 	.word	0x08007729
 80076e4:	08007729 	.word	0x08007729
 80076e8:	08007729 	.word	0x08007729
 80076ec:	08007729 	.word	0x08007729
 80076f0:	08007729 	.word	0x08007729
 80076f4:	08007721 	.word	0x08007721
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076fe:	e050      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007700:	2304      	movs	r3, #4
 8007702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007706:	e04c      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007708:	2308      	movs	r3, #8
 800770a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770e:	e048      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007710:	2310      	movs	r3, #16
 8007712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007716:	e044      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007718:	2320      	movs	r3, #32
 800771a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771e:	e040      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007720:	2340      	movs	r3, #64	; 0x40
 8007722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007726:	e03c      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007728:	2380      	movs	r3, #128	; 0x80
 800772a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800772e:	e038      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a71      	ldr	r2, [pc, #452]	; (80078fc <UART_SetConfig+0x904>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d130      	bne.n	800779c <UART_SetConfig+0x7a4>
 800773a:	4b6f      	ldr	r3, [pc, #444]	; (80078f8 <UART_SetConfig+0x900>)
 800773c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	2b05      	cmp	r3, #5
 8007744:	d826      	bhi.n	8007794 <UART_SetConfig+0x79c>
 8007746:	a201      	add	r2, pc, #4	; (adr r2, 800774c <UART_SetConfig+0x754>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	08007765 	.word	0x08007765
 8007750:	0800776d 	.word	0x0800776d
 8007754:	08007775 	.word	0x08007775
 8007758:	0800777d 	.word	0x0800777d
 800775c:	08007785 	.word	0x08007785
 8007760:	0800778d 	.word	0x0800778d
 8007764:	2302      	movs	r3, #2
 8007766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776a:	e01a      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800776c:	2304      	movs	r3, #4
 800776e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007772:	e016      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007774:	2308      	movs	r3, #8
 8007776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777a:	e012      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800777c:	2310      	movs	r3, #16
 800777e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007782:	e00e      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007784:	2320      	movs	r3, #32
 8007786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778a:	e00a      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800778c:	2340      	movs	r3, #64	; 0x40
 800778e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007792:	e006      	b.n	80077a2 <UART_SetConfig+0x7aa>
 8007794:	2380      	movs	r3, #128	; 0x80
 8007796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779a:	e002      	b.n	80077a2 <UART_SetConfig+0x7aa>
 800779c:	2380      	movs	r3, #128	; 0x80
 800779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a55      	ldr	r2, [pc, #340]	; (80078fc <UART_SetConfig+0x904>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	f040 80f0 	bne.w	800798e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	dc46      	bgt.n	8007844 <UART_SetConfig+0x84c>
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	db75      	blt.n	80078a6 <UART_SetConfig+0x8ae>
 80077ba:	3b02      	subs	r3, #2
 80077bc:	2b1e      	cmp	r3, #30
 80077be:	d872      	bhi.n	80078a6 <UART_SetConfig+0x8ae>
 80077c0:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <UART_SetConfig+0x7d0>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	0800784b 	.word	0x0800784b
 80077cc:	080078a7 	.word	0x080078a7
 80077d0:	08007853 	.word	0x08007853
 80077d4:	080078a7 	.word	0x080078a7
 80077d8:	080078a7 	.word	0x080078a7
 80077dc:	080078a7 	.word	0x080078a7
 80077e0:	08007863 	.word	0x08007863
 80077e4:	080078a7 	.word	0x080078a7
 80077e8:	080078a7 	.word	0x080078a7
 80077ec:	080078a7 	.word	0x080078a7
 80077f0:	080078a7 	.word	0x080078a7
 80077f4:	080078a7 	.word	0x080078a7
 80077f8:	080078a7 	.word	0x080078a7
 80077fc:	080078a7 	.word	0x080078a7
 8007800:	08007873 	.word	0x08007873
 8007804:	080078a7 	.word	0x080078a7
 8007808:	080078a7 	.word	0x080078a7
 800780c:	080078a7 	.word	0x080078a7
 8007810:	080078a7 	.word	0x080078a7
 8007814:	080078a7 	.word	0x080078a7
 8007818:	080078a7 	.word	0x080078a7
 800781c:	080078a7 	.word	0x080078a7
 8007820:	080078a7 	.word	0x080078a7
 8007824:	080078a7 	.word	0x080078a7
 8007828:	080078a7 	.word	0x080078a7
 800782c:	080078a7 	.word	0x080078a7
 8007830:	080078a7 	.word	0x080078a7
 8007834:	080078a7 	.word	0x080078a7
 8007838:	080078a7 	.word	0x080078a7
 800783c:	080078a7 	.word	0x080078a7
 8007840:	08007899 	.word	0x08007899
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	d02a      	beq.n	800789e <UART_SetConfig+0x8a6>
 8007848:	e02d      	b.n	80078a6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800784a:	f7fe f923 	bl	8005a94 <HAL_RCCEx_GetD3PCLK1Freq>
 800784e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007850:	e02f      	b.n	80078b2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007852:	f107 0314 	add.w	r3, r7, #20
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe f932 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007860:	e027      	b.n	80078b2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007862:	f107 0308 	add.w	r3, r7, #8
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fa7e 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007870:	e01f      	b.n	80078b2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007872:	4b21      	ldr	r3, [pc, #132]	; (80078f8 <UART_SetConfig+0x900>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800787e:	4b1e      	ldr	r3, [pc, #120]	; (80078f8 <UART_SetConfig+0x900>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	08db      	lsrs	r3, r3, #3
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	4a1d      	ldr	r2, [pc, #116]	; (8007900 <UART_SetConfig+0x908>)
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007890:	e00f      	b.n	80078b2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <UART_SetConfig+0x908>)
 8007894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007896:	e00c      	b.n	80078b2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007898:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <UART_SetConfig+0x90c>)
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800789c:	e009      	b.n	80078b2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80078a4:	e005      	b.n	80078b2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80078b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 81e6 	beq.w	8007c86 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	4a12      	ldr	r2, [pc, #72]	; (8007908 <UART_SetConfig+0x910>)
 80078c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078cc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	4613      	mov	r3, r2
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	4413      	add	r3, r2
 80078d8:	6a3a      	ldr	r2, [r7, #32]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d305      	bcc.n	80078ea <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078e4:	6a3a      	ldr	r2, [r7, #32]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d910      	bls.n	800790c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80078f0:	e1c9      	b.n	8007c86 <UART_SetConfig+0xc8e>
 80078f2:	bf00      	nop
 80078f4:	40011c00 	.word	0x40011c00
 80078f8:	58024400 	.word	0x58024400
 80078fc:	58000c00 	.word	0x58000c00
 8007900:	03d09000 	.word	0x03d09000
 8007904:	003d0900 	.word	0x003d0900
 8007908:	0800af68 	.word	0x0800af68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	4618      	mov	r0, r3
 8007910:	f04f 0100 	mov.w	r1, #0
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	4ac1      	ldr	r2, [pc, #772]	; (8007c20 <UART_SetConfig+0xc28>)
 800791a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800791e:	b29a      	uxth	r2, r3
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	f7f8 fcf4 	bl	8000310 <__aeabi_uldivmod>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4610      	mov	r0, r2
 800792e:	4619      	mov	r1, r3
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	020b      	lsls	r3, r1, #8
 800793a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800793e:	0202      	lsls	r2, r0, #8
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	6849      	ldr	r1, [r1, #4]
 8007944:	0849      	lsrs	r1, r1, #1
 8007946:	4608      	mov	r0, r1
 8007948:	f04f 0100 	mov.w	r1, #0
 800794c:	1814      	adds	r4, r2, r0
 800794e:	eb43 0501 	adc.w	r5, r3, r1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	461a      	mov	r2, r3
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	4620      	mov	r0, r4
 800795e:	4629      	mov	r1, r5
 8007960:	f7f8 fcd6 	bl	8000310 <__aeabi_uldivmod>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4613      	mov	r3, r2
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007972:	d308      	bcc.n	8007986 <UART_SetConfig+0x98e>
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800797a:	d204      	bcs.n	8007986 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007982:	60da      	str	r2, [r3, #12]
 8007984:	e17f      	b.n	8007c86 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800798c:	e17b      	b.n	8007c86 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007996:	f040 80bd 	bne.w	8007b14 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800799a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800799e:	2b20      	cmp	r3, #32
 80079a0:	dc48      	bgt.n	8007a34 <UART_SetConfig+0xa3c>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	db7b      	blt.n	8007a9e <UART_SetConfig+0xaa6>
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	d879      	bhi.n	8007a9e <UART_SetConfig+0xaa6>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <UART_SetConfig+0x9b8>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007a3b 	.word	0x08007a3b
 80079b4:	08007a43 	.word	0x08007a43
 80079b8:	08007a9f 	.word	0x08007a9f
 80079bc:	08007a9f 	.word	0x08007a9f
 80079c0:	08007a4b 	.word	0x08007a4b
 80079c4:	08007a9f 	.word	0x08007a9f
 80079c8:	08007a9f 	.word	0x08007a9f
 80079cc:	08007a9f 	.word	0x08007a9f
 80079d0:	08007a5b 	.word	0x08007a5b
 80079d4:	08007a9f 	.word	0x08007a9f
 80079d8:	08007a9f 	.word	0x08007a9f
 80079dc:	08007a9f 	.word	0x08007a9f
 80079e0:	08007a9f 	.word	0x08007a9f
 80079e4:	08007a9f 	.word	0x08007a9f
 80079e8:	08007a9f 	.word	0x08007a9f
 80079ec:	08007a9f 	.word	0x08007a9f
 80079f0:	08007a6b 	.word	0x08007a6b
 80079f4:	08007a9f 	.word	0x08007a9f
 80079f8:	08007a9f 	.word	0x08007a9f
 80079fc:	08007a9f 	.word	0x08007a9f
 8007a00:	08007a9f 	.word	0x08007a9f
 8007a04:	08007a9f 	.word	0x08007a9f
 8007a08:	08007a9f 	.word	0x08007a9f
 8007a0c:	08007a9f 	.word	0x08007a9f
 8007a10:	08007a9f 	.word	0x08007a9f
 8007a14:	08007a9f 	.word	0x08007a9f
 8007a18:	08007a9f 	.word	0x08007a9f
 8007a1c:	08007a9f 	.word	0x08007a9f
 8007a20:	08007a9f 	.word	0x08007a9f
 8007a24:	08007a9f 	.word	0x08007a9f
 8007a28:	08007a9f 	.word	0x08007a9f
 8007a2c:	08007a9f 	.word	0x08007a9f
 8007a30:	08007a91 	.word	0x08007a91
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	d02e      	beq.n	8007a96 <UART_SetConfig+0xa9e>
 8007a38:	e031      	b.n	8007a9e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a3a:	f7fc fce1 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8007a3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a40:	e033      	b.n	8007aaa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a42:	f7fc fcf3 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 8007a46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007a48:	e02f      	b.n	8007aaa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4a:	f107 0314 	add.w	r3, r7, #20
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe f836 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a58:	e027      	b.n	8007aaa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5a:	f107 0308 	add.w	r3, r7, #8
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe f982 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a68:	e01f      	b.n	8007aaa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a6a:	4b6e      	ldr	r3, [pc, #440]	; (8007c24 <UART_SetConfig+0xc2c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a76:	4b6b      	ldr	r3, [pc, #428]	; (8007c24 <UART_SetConfig+0xc2c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	08db      	lsrs	r3, r3, #3
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	4a69      	ldr	r2, [pc, #420]	; (8007c28 <UART_SetConfig+0xc30>)
 8007a82:	fa22 f303 	lsr.w	r3, r2, r3
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a88:	e00f      	b.n	8007aaa <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8007a8a:	4b67      	ldr	r3, [pc, #412]	; (8007c28 <UART_SetConfig+0xc30>)
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a8e:	e00c      	b.n	8007aaa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a90:	4b66      	ldr	r3, [pc, #408]	; (8007c2c <UART_SetConfig+0xc34>)
 8007a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a94:	e009      	b.n	8007aaa <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a9c:	e005      	b.n	8007aaa <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007aa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80ea 	beq.w	8007c86 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	4a5a      	ldr	r2, [pc, #360]	; (8007c20 <UART_SetConfig+0xc28>)
 8007ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007abc:	461a      	mov	r2, r3
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ac4:	005a      	lsls	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	441a      	add	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	2b0f      	cmp	r3, #15
 8007adc:	d916      	bls.n	8007b0c <UART_SetConfig+0xb14>
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae4:	d212      	bcs.n	8007b0c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f023 030f 	bic.w	r3, r3, #15
 8007aee:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007afe:	4313      	orrs	r3, r2
 8007b00:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b08:	60da      	str	r2, [r3, #12]
 8007b0a:	e0bc      	b.n	8007c86 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b12:	e0b8      	b.n	8007c86 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	dc4b      	bgt.n	8007bb4 <UART_SetConfig+0xbbc>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f2c0 8087 	blt.w	8007c30 <UART_SetConfig+0xc38>
 8007b22:	2b20      	cmp	r3, #32
 8007b24:	f200 8084 	bhi.w	8007c30 <UART_SetConfig+0xc38>
 8007b28:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <UART_SetConfig+0xb38>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007bbb 	.word	0x08007bbb
 8007b34:	08007bc3 	.word	0x08007bc3
 8007b38:	08007c31 	.word	0x08007c31
 8007b3c:	08007c31 	.word	0x08007c31
 8007b40:	08007bcb 	.word	0x08007bcb
 8007b44:	08007c31 	.word	0x08007c31
 8007b48:	08007c31 	.word	0x08007c31
 8007b4c:	08007c31 	.word	0x08007c31
 8007b50:	08007bdb 	.word	0x08007bdb
 8007b54:	08007c31 	.word	0x08007c31
 8007b58:	08007c31 	.word	0x08007c31
 8007b5c:	08007c31 	.word	0x08007c31
 8007b60:	08007c31 	.word	0x08007c31
 8007b64:	08007c31 	.word	0x08007c31
 8007b68:	08007c31 	.word	0x08007c31
 8007b6c:	08007c31 	.word	0x08007c31
 8007b70:	08007beb 	.word	0x08007beb
 8007b74:	08007c31 	.word	0x08007c31
 8007b78:	08007c31 	.word	0x08007c31
 8007b7c:	08007c31 	.word	0x08007c31
 8007b80:	08007c31 	.word	0x08007c31
 8007b84:	08007c31 	.word	0x08007c31
 8007b88:	08007c31 	.word	0x08007c31
 8007b8c:	08007c31 	.word	0x08007c31
 8007b90:	08007c31 	.word	0x08007c31
 8007b94:	08007c31 	.word	0x08007c31
 8007b98:	08007c31 	.word	0x08007c31
 8007b9c:	08007c31 	.word	0x08007c31
 8007ba0:	08007c31 	.word	0x08007c31
 8007ba4:	08007c31 	.word	0x08007c31
 8007ba8:	08007c31 	.word	0x08007c31
 8007bac:	08007c31 	.word	0x08007c31
 8007bb0:	08007c11 	.word	0x08007c11
 8007bb4:	2b40      	cmp	r3, #64	; 0x40
 8007bb6:	d02e      	beq.n	8007c16 <UART_SetConfig+0xc1e>
 8007bb8:	e03a      	b.n	8007c30 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bba:	f7fc fc21 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8007bbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007bc0:	e03c      	b.n	8007c3c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc2:	f7fc fc33 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 8007bc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007bc8:	e038      	b.n	8007c3c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bca:	f107 0314 	add.w	r3, r7, #20
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fd ff76 	bl	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bd8:	e030      	b.n	8007c3c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bda:	f107 0308 	add.w	r3, r7, #8
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe f8c2 	bl	8005d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007be8:	e028      	b.n	8007c3c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bea:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <UART_SetConfig+0xc2c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <UART_SetConfig+0xc2c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	08db      	lsrs	r3, r3, #3
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	4a09      	ldr	r2, [pc, #36]	; (8007c28 <UART_SetConfig+0xc30>)
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c08:	e018      	b.n	8007c3c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8007c0a:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <UART_SetConfig+0xc30>)
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c0e:	e015      	b.n	8007c3c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <UART_SetConfig+0xc34>)
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c14:	e012      	b.n	8007c3c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c1c:	e00e      	b.n	8007c3c <UART_SetConfig+0xc44>
 8007c1e:	bf00      	nop
 8007c20:	0800af68 	.word	0x0800af68
 8007c24:	58024400 	.word	0x58024400
 8007c28:	03d09000 	.word	0x03d09000
 8007c2c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c3a:	bf00      	nop
    }

    if (pclk != 0U)
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d021      	beq.n	8007c86 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	4a1a      	ldr	r2, [pc, #104]	; (8007cb0 <UART_SetConfig+0xcb8>)
 8007c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	085b      	lsrs	r3, r3, #1
 8007c5a:	441a      	add	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	2b0f      	cmp	r3, #15
 8007c6a:	d909      	bls.n	8007c80 <UART_SetConfig+0xc88>
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c72:	d205      	bcs.n	8007c80 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60da      	str	r2, [r3, #12]
 8007c7e:	e002      	b.n	8007c86 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007ca2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3738      	adds	r7, #56	; 0x38
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bdb0      	pop	{r4, r5, r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	0800af68 	.word	0x0800af68

08007cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	f003 0308 	and.w	r3, r3, #8
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d01a      	beq.n	8007dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007db2:	d10a      	bne.n	8007dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	605a      	str	r2, [r3, #4]
  }
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e08:	f7f8 fdec 	bl	80009e4 <HAL_GetTick>
 8007e0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d10e      	bne.n	8007e3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f82f 	bl	8007e8e <UART_WaitOnFlagUntilTimeout>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e025      	b.n	8007e86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d10e      	bne.n	8007e66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f819 	bl	8007e8e <UART_WaitOnFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e00f      	b.n	8007e86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b09c      	sub	sp, #112	; 0x70
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	603b      	str	r3, [r7, #0]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e9e:	e0a9      	b.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ea6:	f000 80a5 	beq.w	8007ff4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eaa:	f7f8 fd9b 	bl	80009e4 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d302      	bcc.n	8007ec0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d140      	bne.n	8007f42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ee0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e6      	bne.n	8007ec0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	f023 0301 	bic.w	r3, r3, #1
 8007f08:	663b      	str	r3, [r7, #96]	; 0x60
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f12:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e5      	bne.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e069      	b.n	8008016 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d051      	beq.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f5e:	d149      	bne.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e6      	bne.n	8007f6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	613b      	str	r3, [r7, #16]
   return(result);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f023 0301 	bic.w	r3, r3, #1
 8007fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fbc:	623a      	str	r2, [r7, #32]
 8007fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	69f9      	ldr	r1, [r7, #28]
 8007fc2:	6a3a      	ldr	r2, [r7, #32]
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e5      	bne.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e010      	b.n	8008016 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69da      	ldr	r2, [r3, #28]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	429a      	cmp	r2, r3
 8008002:	bf0c      	ite	eq
 8008004:	2301      	moveq	r3, #1
 8008006:	2300      	movne	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	461a      	mov	r2, r3
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	429a      	cmp	r2, r3
 8008010:	f43f af46 	beq.w	8007ea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3770      	adds	r7, #112	; 0x70
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800801e:	b480      	push	{r7}
 8008020:	b085      	sub	sp, #20
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_UARTEx_DisableFifoMode+0x16>
 8008030:	2302      	movs	r3, #2
 8008032:	e027      	b.n	8008084 <HAL_UARTEx_DisableFifoMode+0x66>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2224      	movs	r2, #36	; 0x24
 8008040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008062:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080a4:	2302      	movs	r3, #2
 80080a6:	e02d      	b.n	8008104 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2224      	movs	r2, #36	; 0x24
 80080b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0201 	bic.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f84f 	bl	8008188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008120:	2302      	movs	r3, #2
 8008122:	e02d      	b.n	8008180 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2224      	movs	r2, #36	; 0x24
 8008130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0201 	bic.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f811 	bl	8008188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008194:	2b00      	cmp	r3, #0
 8008196:	d108      	bne.n	80081aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081a8:	e031      	b.n	800820e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081aa:	2310      	movs	r3, #16
 80081ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081ae:	2310      	movs	r3, #16
 80081b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	0e5b      	lsrs	r3, r3, #25
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	0f5b      	lsrs	r3, r3, #29
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	7b3a      	ldrb	r2, [r7, #12]
 80081d6:	4911      	ldr	r1, [pc, #68]	; (800821c <UARTEx_SetNbDataToProcess+0x94>)
 80081d8:	5c8a      	ldrb	r2, [r1, r2]
 80081da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081de:	7b3a      	ldrb	r2, [r7, #12]
 80081e0:	490f      	ldr	r1, [pc, #60]	; (8008220 <UARTEx_SetNbDataToProcess+0x98>)
 80081e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	7b7a      	ldrb	r2, [r7, #13]
 80081f4:	4909      	ldr	r1, [pc, #36]	; (800821c <UARTEx_SetNbDataToProcess+0x94>)
 80081f6:	5c8a      	ldrb	r2, [r1, r2]
 80081f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081fc:	7b7a      	ldrb	r2, [r7, #13]
 80081fe:	4908      	ldr	r1, [pc, #32]	; (8008220 <UARTEx_SetNbDataToProcess+0x98>)
 8008200:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008202:	fb93 f3f2 	sdiv	r3, r3, r2
 8008206:	b29a      	uxth	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800820e:	bf00      	nop
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	0800af80 	.word	0x0800af80
 8008220:	0800af88 	.word	0x0800af88

08008224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800822c:	f7f8 fb54 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008230:	f000 f838 	bl	80082a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008234:	f000 fa18 	bl	8008668 <MX_GPIO_Init>
  MX_BDMA_Init();
 8008238:	f000 f9c6 	bl	80085c8 <MX_BDMA_Init>
  MX_SAI4_Init();
 800823c:	f000 f918 	bl	8008470 <MX_SAI4_Init>
  MX_CRC_Init();
 8008240:	f000 f89e 	bl	8008380 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8008244:	f000 f974 	bl	8008530 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8008248:	f000 f9e6 	bl	8008618 <MX_DMA_Init>
  MX_PDM2PCM_Init();
 800824c:	f000 fa68 	bl	8008720 <MX_PDM2PCM_Init>
  MX_SAI1_Init();
 8008250:	f000 f8d8 	bl	8008404 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  int16_t mic_buffer[BUFFER_SIZE];
  int16_t speaker_buffer[BUFFER_SIZE];

  haudio_in.Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 8008254:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <main+0x7c>)
 8008256:	2230      	movs	r2, #48	; 0x30
 8008258:	601a      	str	r2, [r3, #0]
  haudio_in.ChannelsNbr = 1;
 800825a:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <main+0x7c>)
 800825c:	2201      	movs	r2, #1
 800825e:	60da      	str	r2, [r3, #12]
  haudio_in.SampleRate = SAI_AUDIO_FREQUENCY_48K;
 8008260:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <main+0x7c>)
 8008262:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008266:	605a      	str	r2, [r3, #4]
  haudio_in.BitsPerSample = AUDIO_RESOLUTION_16B;
 8008268:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <main+0x7c>)
 800826a:	2210      	movs	r2, #16
 800826c:	609a      	str	r2, [r3, #8]
  haudio_in.Volume = 80;
 800826e:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <main+0x7c>)
 8008270:	2250      	movs	r2, #80	; 0x50
 8008272:	611a      	str	r2, [r3, #16]

  // initialize audio instance
  BSP_AUDIO_IN_PDMToPCM_Init(SAI_AUDIO_IN, SAI_AUDIO_FREQUENCY_48K, 1, 1);
 8008274:	2301      	movs	r3, #1
 8008276:	2201      	movs	r2, #1
 8008278:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800827c:	2001      	movs	r0, #1
 800827e:	f7f8 f9e3 	bl	8000648 <BSP_AUDIO_IN_PDMToPCM_Init>
  BSP_AUDIO_IN_RecordPDM(SAI_AUDIO_IN, mic_buffer, 8);
 8008282:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008286:	2208      	movs	r2, #8
 8008288:	4619      	mov	r1, r3
 800828a:	2001      	movs	r0, #1
 800828c:	f7f8 faba 	bl	8000804 <BSP_AUDIO_IN_RecordPDM>
  BSP_AUDIO_IN_PDMToPCM(SAI_AUDIO_IN, mic_buffer, speaker_buffer);
 8008290:	463a      	mov	r2, r7
 8008292:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008296:	4619      	mov	r1, r3
 8008298:	2001      	movs	r0, #1
 800829a:	f7f8 fa79 	bl	8000790 <BSP_AUDIO_IN_PDMToPCM>
//  /* USER CODE END 2 */
//
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */

  while (1)
 800829e:	e7fe      	b.n	800829e <main+0x7a>
 80082a0:	24000aa4 	.word	0x24000aa4

080082a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b09c      	sub	sp, #112	; 0x70
 80082a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ae:	224c      	movs	r2, #76	; 0x4c
 80082b0:	2100      	movs	r1, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f002 fc5e 	bl	800ab74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082b8:	1d3b      	adds	r3, r7, #4
 80082ba:	2220      	movs	r2, #32
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f002 fc58 	bl	800ab74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80082c4:	2004      	movs	r0, #4
 80082c6:	f7fb f935 	bl	8003534 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80082ca:	2300      	movs	r3, #0
 80082cc:	603b      	str	r3, [r7, #0]
 80082ce:	4b2b      	ldr	r3, [pc, #172]	; (800837c <SystemClock_Config+0xd8>)
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	4a2a      	ldr	r2, [pc, #168]	; (800837c <SystemClock_Config+0xd8>)
 80082d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082d8:	6193      	str	r3, [r2, #24]
 80082da:	4b28      	ldr	r3, [pc, #160]	; (800837c <SystemClock_Config+0xd8>)
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80082e6:	bf00      	nop
 80082e8:	4b24      	ldr	r3, [pc, #144]	; (800837c <SystemClock_Config+0xd8>)
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f4:	d1f8      	bne.n	80082e8 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80082f6:	2302      	movs	r3, #2
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80082fa:	2301      	movs	r3, #1
 80082fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80082fe:	2340      	movs	r3, #64	; 0x40
 8008300:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008302:	2302      	movs	r3, #2
 8008304:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008306:	2300      	movs	r3, #0
 8008308:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800830a:	2304      	movs	r3, #4
 800830c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800830e:	2318      	movs	r3, #24
 8008310:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8008312:	2301      	movs	r3, #1
 8008314:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8008316:	237d      	movs	r3, #125	; 0x7d
 8008318:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800831a:	2302      	movs	r3, #2
 800831c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800831e:	230c      	movs	r3, #12
 8008320:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008322:	2300      	movs	r3, #0
 8008324:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800832a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800832e:	4618      	mov	r0, r3
 8008330:	f7fb f95a 	bl	80035e8 <HAL_RCC_OscConfig>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800833a:	f000 f9eb 	bl	8008714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800833e:	233f      	movs	r3, #63	; 0x3f
 8008340:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008342:	2303      	movs	r3, #3
 8008344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800834a:	2308      	movs	r3, #8
 800834c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800834e:	2340      	movs	r3, #64	; 0x40
 8008350:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008352:	2340      	movs	r3, #64	; 0x40
 8008354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800835a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008360:	1d3b      	adds	r3, r7, #4
 8008362:	2102      	movs	r1, #2
 8008364:	4618      	mov	r0, r3
 8008366:	f7fb fceb 	bl	8003d40 <HAL_RCC_ClockConfig>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8008370:	f000 f9d0 	bl	8008714 <Error_Handler>
  }
}
 8008374:	bf00      	nop
 8008376:	3770      	adds	r7, #112	; 0x70
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	58024800 	.word	0x58024800

08008380 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008386:	4b1c      	ldr	r3, [pc, #112]	; (80083f8 <MX_CRC_Init+0x78>)
 8008388:	4a1c      	ldr	r2, [pc, #112]	; (80083fc <MX_CRC_Init+0x7c>)
 800838a:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800838c:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <MX_CRC_Init+0x78>)
 800838e:	2200      	movs	r2, #0
 8008390:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008392:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <MX_CRC_Init+0x78>)
 8008394:	2200      	movs	r2, #0
 8008396:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008398:	4b17      	ldr	r3, [pc, #92]	; (80083f8 <MX_CRC_Init+0x78>)
 800839a:	2200      	movs	r2, #0
 800839c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800839e:	4b16      	ldr	r3, [pc, #88]	; (80083f8 <MX_CRC_Init+0x78>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80083a4:	4b14      	ldr	r3, [pc, #80]	; (80083f8 <MX_CRC_Init+0x78>)
 80083a6:	2201      	movs	r2, #1
 80083a8:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80083aa:	4813      	ldr	r0, [pc, #76]	; (80083f8 <MX_CRC_Init+0x78>)
 80083ac:	f7f8 fc36 	bl	8000c1c <HAL_CRC_Init>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 80083b6:	f000 f9ad 	bl	8008714 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80083ba:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <MX_CRC_Init+0x78>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	4b0d      	ldr	r3, [pc, #52]	; (80083f8 <MX_CRC_Init+0x78>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0201 	orr.w	r2, r2, #1
 80083c8:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 80083ca:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <MX_CRC_Init+0x80>)
 80083cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083d0:	4a0b      	ldr	r2, [pc, #44]	; (8008400 <MX_CRC_Init+0x80>)
 80083d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80083da:	4b09      	ldr	r3, [pc, #36]	; (8008400 <MX_CRC_Init+0x80>)
 80083dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 80083e8:	4803      	ldr	r0, [pc, #12]	; (80083f8 <MX_CRC_Init+0x78>)
 80083ea:	f000 f9dd 	bl	80087a8 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	240009e8 	.word	0x240009e8
 80083fc:	58024c00 	.word	0x58024c00
 8008400:	58024400 	.word	0x58024400

08008404 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_B1.Instance = SAI1_Block_B;
 8008408:	4b16      	ldr	r3, [pc, #88]	; (8008464 <MX_SAI1_Init+0x60>)
 800840a:	4a17      	ldr	r2, [pc, #92]	; (8008468 <MX_SAI1_Init+0x64>)
 800840c:	601a      	str	r2, [r3, #0]
  hsai_B1.Init.AudioMode = SAI_MODEMASTER_TX;
 800840e:	4b15      	ldr	r3, [pc, #84]	; (8008464 <MX_SAI1_Init+0x60>)
 8008410:	2200      	movs	r2, #0
 8008412:	605a      	str	r2, [r3, #4]
  hsai_B1.Init.Synchro = SAI_ASYNCHRONOUS;
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <MX_SAI1_Init+0x60>)
 8008416:	2200      	movs	r2, #0
 8008418:	609a      	str	r2, [r3, #8]
  hsai_B1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800841a:	4b12      	ldr	r3, [pc, #72]	; (8008464 <MX_SAI1_Init+0x60>)
 800841c:	2200      	movs	r2, #0
 800841e:	615a      	str	r2, [r3, #20]
  hsai_B1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008420:	4b10      	ldr	r3, [pc, #64]	; (8008464 <MX_SAI1_Init+0x60>)
 8008422:	2200      	movs	r2, #0
 8008424:	619a      	str	r2, [r3, #24]
  hsai_B1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008426:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <MX_SAI1_Init+0x60>)
 8008428:	2200      	movs	r2, #0
 800842a:	61da      	str	r2, [r3, #28]
  hsai_B1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <MX_SAI1_Init+0x60>)
 800842e:	4a0f      	ldr	r2, [pc, #60]	; (800846c <MX_SAI1_Init+0x68>)
 8008430:	621a      	str	r2, [r3, #32]
  hsai_B1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008432:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <MX_SAI1_Init+0x60>)
 8008434:	2200      	movs	r2, #0
 8008436:	60da      	str	r2, [r3, #12]
  hsai_B1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008438:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <MX_SAI1_Init+0x60>)
 800843a:	2200      	movs	r2, #0
 800843c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_B1.Init.CompandingMode = SAI_NOCOMPANDING;
 800843e:	4b09      	ldr	r3, [pc, #36]	; (8008464 <MX_SAI1_Init+0x60>)
 8008440:	2200      	movs	r2, #0
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_B1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008444:	4b07      	ldr	r3, [pc, #28]	; (8008464 <MX_SAI1_Init+0x60>)
 8008446:	2200      	movs	r2, #0
 8008448:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_B1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800844a:	2302      	movs	r3, #2
 800844c:	2200      	movs	r2, #0
 800844e:	2100      	movs	r1, #0
 8008450:	4804      	ldr	r0, [pc, #16]	; (8008464 <MX_SAI1_Init+0x60>)
 8008452:	f7fe f893 	bl	800657c <HAL_SAI_InitProtocol>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 800845c:	f000 f95a 	bl	8008714 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8008460:	bf00      	nop
 8008462:	bd80      	pop	{r7, pc}
 8008464:	24000ab8 	.word	0x24000ab8
 8008468:	40015824 	.word	0x40015824
 800846c:	0002ee00 	.word	0x0002ee00

08008470 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_A4.Instance = SAI4_Block_A;
 8008474:	4b2c      	ldr	r3, [pc, #176]	; (8008528 <MX_SAI4_Init+0xb8>)
 8008476:	4a2d      	ldr	r2, [pc, #180]	; (800852c <MX_SAI4_Init+0xbc>)
 8008478:	601a      	str	r2, [r3, #0]
  hsai_A4.Init.Protocol = SAI_FREE_PROTOCOL;
 800847a:	4b2b      	ldr	r3, [pc, #172]	; (8008528 <MX_SAI4_Init+0xb8>)
 800847c:	2200      	movs	r2, #0
 800847e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_A4.Init.AudioMode = SAI_MODEMASTER_RX;
 8008480:	4b29      	ldr	r3, [pc, #164]	; (8008528 <MX_SAI4_Init+0xb8>)
 8008482:	2201      	movs	r2, #1
 8008484:	605a      	str	r2, [r3, #4]
  hsai_A4.Init.DataSize = SAI_DATASIZE_16;
 8008486:	4b28      	ldr	r3, [pc, #160]	; (8008528 <MX_SAI4_Init+0xb8>)
 8008488:	2280      	movs	r2, #128	; 0x80
 800848a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_A4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800848c:	4b26      	ldr	r3, [pc, #152]	; (8008528 <MX_SAI4_Init+0xb8>)
 800848e:	2200      	movs	r2, #0
 8008490:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_A4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008492:	4b25      	ldr	r3, [pc, #148]	; (8008528 <MX_SAI4_Init+0xb8>)
 8008494:	2200      	movs	r2, #0
 8008496:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_A4.Init.Synchro = SAI_ASYNCHRONOUS;
 8008498:	4b23      	ldr	r3, [pc, #140]	; (8008528 <MX_SAI4_Init+0xb8>)
 800849a:	2200      	movs	r2, #0
 800849c:	609a      	str	r2, [r3, #8]
  hsai_A4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800849e:	4b22      	ldr	r3, [pc, #136]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	615a      	str	r2, [r3, #20]
  hsai_A4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80084a4:	4b20      	ldr	r3, [pc, #128]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	619a      	str	r2, [r3, #24]
  hsai_A4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80084aa:	4b1f      	ldr	r3, [pc, #124]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	61da      	str	r2, [r3, #28]
  hsai_A4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80084b0:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084b2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80084b6:	621a      	str	r2, [r3, #32]
  hsai_A4.Init.MonoStereoMode = SAI_STEREOMODE;
 80084b8:	4b1b      	ldr	r3, [pc, #108]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_A4.Init.CompandingMode = SAI_NOCOMPANDING;
 80084be:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_A4.Init.PdmInit.Activation = ENABLE;
 80084c4:	4b18      	ldr	r3, [pc, #96]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_A4.Init.PdmInit.MicPairsNbr = 1;
 80084cc:	4b16      	ldr	r3, [pc, #88]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_A4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 80084d2:	4b15      	ldr	r3, [pc, #84]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084d8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_A4.FrameInit.FrameLength = 32;
 80084da:	4b13      	ldr	r3, [pc, #76]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084dc:	2220      	movs	r2, #32
 80084de:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_A4.FrameInit.ActiveFrameLength = 16;
 80084e0:	4b11      	ldr	r3, [pc, #68]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084e2:	2210      	movs	r2, #16
 80084e4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_A4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80084e6:	4b10      	ldr	r3, [pc, #64]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_A4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80084ec:	4b0e      	ldr	r3, [pc, #56]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_A4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80084f2:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_A4.SlotInit.FirstBitOffset = 0;
 80084f8:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <MX_SAI4_Init+0xb8>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_A4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80084fe:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <MX_SAI4_Init+0xb8>)
 8008500:	2200      	movs	r2, #0
 8008502:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_A4.SlotInit.SlotNumber = 1;
 8008504:	4b08      	ldr	r3, [pc, #32]	; (8008528 <MX_SAI4_Init+0xb8>)
 8008506:	2201      	movs	r2, #1
 8008508:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_A4.SlotInit.SlotActive = 0x0000FFFF;
 800850a:	4b07      	ldr	r3, [pc, #28]	; (8008528 <MX_SAI4_Init+0xb8>)
 800850c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008510:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_A4) != HAL_OK)
 8008512:	4805      	ldr	r0, [pc, #20]	; (8008528 <MX_SAI4_Init+0xb8>)
 8008514:	f7fe f864 	bl	80065e0 <HAL_SAI_Init>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <MX_SAI4_Init+0xb2>
  {
    Error_Handler();
 800851e:	f000 f8f9 	bl	8008714 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8008522:	bf00      	nop
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	24000a0c 	.word	0x24000a0c
 800852c:	58005404 	.word	0x58005404

08008530 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008534:	4b22      	ldr	r3, [pc, #136]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 8008536:	4a23      	ldr	r2, [pc, #140]	; (80085c4 <MX_USART3_UART_Init+0x94>)
 8008538:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800853a:	4b21      	ldr	r3, [pc, #132]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 800853c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008540:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008542:	4b1f      	ldr	r3, [pc, #124]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 8008544:	2200      	movs	r2, #0
 8008546:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008548:	4b1d      	ldr	r3, [pc, #116]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 800854a:	2200      	movs	r2, #0
 800854c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800854e:	4b1c      	ldr	r3, [pc, #112]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 8008550:	2200      	movs	r2, #0
 8008552:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008554:	4b1a      	ldr	r3, [pc, #104]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 8008556:	220c      	movs	r2, #12
 8008558:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800855a:	4b19      	ldr	r3, [pc, #100]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 800855c:	2200      	movs	r2, #0
 800855e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008560:	4b17      	ldr	r3, [pc, #92]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 8008562:	2200      	movs	r2, #0
 8008564:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008566:	4b16      	ldr	r3, [pc, #88]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 8008568:	2200      	movs	r2, #0
 800856a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800856c:	4b14      	ldr	r3, [pc, #80]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 800856e:	2200      	movs	r2, #0
 8008570:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008572:	4b13      	ldr	r3, [pc, #76]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 8008574:	2200      	movs	r2, #0
 8008576:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008578:	4811      	ldr	r0, [pc, #68]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 800857a:	f7fe fcec 	bl	8006f56 <HAL_UART_Init>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8008584:	f000 f8c6 	bl	8008714 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008588:	2100      	movs	r1, #0
 800858a:	480d      	ldr	r0, [pc, #52]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 800858c:	f7ff fd80 	bl	8008090 <HAL_UARTEx_SetTxFifoThreshold>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8008596:	f000 f8bd 	bl	8008714 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800859a:	2100      	movs	r1, #0
 800859c:	4808      	ldr	r0, [pc, #32]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 800859e:	f7ff fdb5 	bl	800810c <HAL_UARTEx_SetRxFifoThreshold>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80085a8:	f000 f8b4 	bl	8008714 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80085ac:	4804      	ldr	r0, [pc, #16]	; (80085c0 <MX_USART3_UART_Init+0x90>)
 80085ae:	f7ff fd36 	bl	800801e <HAL_UARTEx_DisableFifoMode>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80085b8:	f000 f8ac 	bl	8008714 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80085bc:	bf00      	nop
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	24000958 	.word	0x24000958
 80085c4:	40004800 	.word	0x40004800

080085c8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80085ce:	4b11      	ldr	r3, [pc, #68]	; (8008614 <MX_BDMA_Init+0x4c>)
 80085d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085d4:	4a0f      	ldr	r2, [pc, #60]	; (8008614 <MX_BDMA_Init+0x4c>)
 80085d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085de:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <MX_BDMA_Init+0x4c>)
 80085e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085e8:	607b      	str	r3, [r7, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 80085ec:	2200      	movs	r2, #0
 80085ee:	2100      	movs	r1, #0
 80085f0:	2080      	movs	r0, #128	; 0x80
 80085f2:	f7f8 fade 	bl	8000bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 80085f6:	2080      	movs	r0, #128	; 0x80
 80085f8:	f7f8 faf5 	bl	8000be6 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80085fc:	2200      	movs	r2, #0
 80085fe:	2100      	movs	r1, #0
 8008600:	2081      	movs	r0, #129	; 0x81
 8008602:	f7f8 fad6 	bl	8000bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8008606:	2081      	movs	r0, #129	; 0x81
 8008608:	f7f8 faed 	bl	8000be6 <HAL_NVIC_EnableIRQ>

}
 800860c:	bf00      	nop
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	58024400 	.word	0x58024400

08008618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800861e:	4b11      	ldr	r3, [pc, #68]	; (8008664 <MX_DMA_Init+0x4c>)
 8008620:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008624:	4a0f      	ldr	r2, [pc, #60]	; (8008664 <MX_DMA_Init+0x4c>)
 8008626:	f043 0301 	orr.w	r3, r3, #1
 800862a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <MX_DMA_Init+0x4c>)
 8008630:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	607b      	str	r3, [r7, #4]
 800863a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800863c:	2200      	movs	r2, #0
 800863e:	2100      	movs	r1, #0
 8008640:	200c      	movs	r0, #12
 8008642:	f7f8 fab6 	bl	8000bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008646:	200c      	movs	r0, #12
 8008648:	f7f8 facd 	bl	8000be6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800864c:	2200      	movs	r2, #0
 800864e:	2100      	movs	r1, #0
 8008650:	2066      	movs	r0, #102	; 0x66
 8008652:	f7f8 faae 	bl	8000bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8008656:	2066      	movs	r0, #102	; 0x66
 8008658:	f7f8 fac5 	bl	8000be6 <HAL_NVIC_EnableIRQ>

}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	58024400 	.word	0x58024400

08008668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800866e:	4b28      	ldr	r3, [pc, #160]	; (8008710 <MX_GPIO_Init+0xa8>)
 8008670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008674:	4a26      	ldr	r2, [pc, #152]	; (8008710 <MX_GPIO_Init+0xa8>)
 8008676:	f043 0301 	orr.w	r3, r3, #1
 800867a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800867e:	4b24      	ldr	r3, [pc, #144]	; (8008710 <MX_GPIO_Init+0xa8>)
 8008680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	617b      	str	r3, [r7, #20]
 800868a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800868c:	4b20      	ldr	r3, [pc, #128]	; (8008710 <MX_GPIO_Init+0xa8>)
 800868e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008692:	4a1f      	ldr	r2, [pc, #124]	; (8008710 <MX_GPIO_Init+0xa8>)
 8008694:	f043 0310 	orr.w	r3, r3, #16
 8008698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800869c:	4b1c      	ldr	r3, [pc, #112]	; (8008710 <MX_GPIO_Init+0xa8>)
 800869e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086aa:	4b19      	ldr	r3, [pc, #100]	; (8008710 <MX_GPIO_Init+0xa8>)
 80086ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086b0:	4a17      	ldr	r2, [pc, #92]	; (8008710 <MX_GPIO_Init+0xa8>)
 80086b2:	f043 0304 	orr.w	r3, r3, #4
 80086b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086ba:	4b15      	ldr	r3, [pc, #84]	; (8008710 <MX_GPIO_Init+0xa8>)
 80086bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80086c8:	4b11      	ldr	r3, [pc, #68]	; (8008710 <MX_GPIO_Init+0xa8>)
 80086ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086ce:	4a10      	ldr	r2, [pc, #64]	; (8008710 <MX_GPIO_Init+0xa8>)
 80086d0:	f043 0308 	orr.w	r3, r3, #8
 80086d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086d8:	4b0d      	ldr	r3, [pc, #52]	; (8008710 <MX_GPIO_Init+0xa8>)
 80086da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086de:	f003 0308 	and.w	r3, r3, #8
 80086e2:	60bb      	str	r3, [r7, #8]
 80086e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80086e6:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <MX_GPIO_Init+0xa8>)
 80086e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086ec:	4a08      	ldr	r2, [pc, #32]	; (8008710 <MX_GPIO_Init+0xa8>)
 80086ee:	f043 0320 	orr.w	r3, r3, #32
 80086f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086f6:	4b06      	ldr	r3, [pc, #24]	; (8008710 <MX_GPIO_Init+0xa8>)
 80086f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	607b      	str	r3, [r7, #4]
 8008702:	687b      	ldr	r3, [r7, #4]

}
 8008704:	bf00      	nop
 8008706:	371c      	adds	r7, #28
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	58024400 	.word	0x58024400

08008714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008718:	b672      	cpsid	i
}
 800871a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800871c:	e7fe      	b.n	800871c <Error_Handler+0x8>
	...

08008720 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8008724:	4b10      	ldr	r3, [pc, #64]	; (8008768 <MX_PDM2PCM_Init+0x48>)
 8008726:	2200      	movs	r2, #0
 8008728:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800872a:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <MX_PDM2PCM_Init+0x48>)
 800872c:	2201      	movs	r2, #1
 800872e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8008730:	4b0d      	ldr	r3, [pc, #52]	; (8008768 <MX_PDM2PCM_Init+0x48>)
 8008732:	4a0e      	ldr	r2, [pc, #56]	; (800876c <MX_PDM2PCM_Init+0x4c>)
 8008734:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 8008736:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <MX_PDM2PCM_Init+0x48>)
 8008738:	2202      	movs	r2, #2
 800873a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 800873c:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <MX_PDM2PCM_Init+0x48>)
 800873e:	2202      	movs	r2, #2
 8008740:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8008742:	4809      	ldr	r0, [pc, #36]	; (8008768 <MX_PDM2PCM_Init+0x48>)
 8008744:	f002 f808 	bl	800a758 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8008748:	4b09      	ldr	r3, [pc, #36]	; (8008770 <MX_PDM2PCM_Init+0x50>)
 800874a:	2202      	movs	r2, #2
 800874c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800874e:	4b08      	ldr	r3, [pc, #32]	; (8008770 <MX_PDM2PCM_Init+0x50>)
 8008750:	2210      	movs	r2, #16
 8008752:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <MX_PDM2PCM_Init+0x50>)
 8008756:	2200      	movs	r2, #0
 8008758:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800875a:	4905      	ldr	r1, [pc, #20]	; (8008770 <MX_PDM2PCM_Init+0x50>)
 800875c:	4802      	ldr	r0, [pc, #8]	; (8008768 <MX_PDM2PCM_Init+0x48>)
 800875e:	f002 f8cb 	bl	800a8f8 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008762:	bf00      	nop
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	24000c94 	.word	0x24000c94
 800876c:	7d70a3d6 	.word	0x7d70a3d6
 8008770:	24000c8c 	.word	0x24000c8c

08008774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800877a:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <HAL_MspInit+0x30>)
 800877c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <HAL_MspInit+0x30>)
 8008782:	f043 0302 	orr.w	r3, r3, #2
 8008786:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800878a:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <HAL_MspInit+0x30>)
 800878c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	607b      	str	r3, [r7, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	58024400 	.word	0x58024400

080087a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a0b      	ldr	r2, [pc, #44]	; (80087e4 <HAL_CRC_MspInit+0x3c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d10e      	bne.n	80087d8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80087ba:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <HAL_CRC_MspInit+0x40>)
 80087bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087c0:	4a09      	ldr	r2, [pc, #36]	; (80087e8 <HAL_CRC_MspInit+0x40>)
 80087c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087ca:	4b07      	ldr	r3, [pc, #28]	; (80087e8 <HAL_CRC_MspInit+0x40>)
 80087cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80087d8:	bf00      	nop
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	58024c00 	.word	0x58024c00
 80087e8:	58024400 	.word	0x58024400

080087ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b0b6      	sub	sp, #216	; 0xd8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	605a      	str	r2, [r3, #4]
 80087fe:	609a      	str	r2, [r3, #8]
 8008800:	60da      	str	r2, [r3, #12]
 8008802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008804:	f107 0310 	add.w	r3, r7, #16
 8008808:	22b4      	movs	r2, #180	; 0xb4
 800880a:	2100      	movs	r1, #0
 800880c:	4618      	mov	r0, r3
 800880e:	f002 f9b1 	bl	800ab74 <memset>
  if(huart->Instance==USART3)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a25      	ldr	r2, [pc, #148]	; (80088ac <HAL_UART_MspInit+0xc0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d142      	bne.n	80088a2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800881c:	2302      	movs	r3, #2
 800881e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008820:	2300      	movs	r3, #0
 8008822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008826:	f107 0310 	add.w	r3, r7, #16
 800882a:	4618      	mov	r0, r3
 800882c:	f7fb fe14 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008836:	f7ff ff6d 	bl	8008714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800883a:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <HAL_UART_MspInit+0xc4>)
 800883c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008840:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <HAL_UART_MspInit+0xc4>)
 8008842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008846:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800884a:	4b19      	ldr	r3, [pc, #100]	; (80088b0 <HAL_UART_MspInit+0xc4>)
 800884c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008858:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <HAL_UART_MspInit+0xc4>)
 800885a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800885e:	4a14      	ldr	r2, [pc, #80]	; (80088b0 <HAL_UART_MspInit+0xc4>)
 8008860:	f043 0304 	orr.w	r3, r3, #4
 8008864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008868:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <HAL_UART_MspInit+0xc4>)
 800886a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	60bb      	str	r3, [r7, #8]
 8008874:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8008876:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800887a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800887e:	2302      	movs	r3, #2
 8008880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008884:	2300      	movs	r3, #0
 8008886:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800888a:	2300      	movs	r3, #0
 800888c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008890:	2307      	movs	r3, #7
 8008892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008896:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800889a:	4619      	mov	r1, r3
 800889c:	4805      	ldr	r0, [pc, #20]	; (80088b4 <HAL_UART_MspInit+0xc8>)
 800889e:	f7fa fca1 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80088a2:	bf00      	nop
 80088a4:	37d8      	adds	r7, #216	; 0xd8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	40004800 	.word	0x40004800
 80088b0:	58024400 	.word	0x58024400
 80088b4:	58020800 	.word	0x58020800

080088b8 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b0ba      	sub	sp, #232	; 0xe8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80088c0:	f107 0310 	add.w	r3, r7, #16
 80088c4:	22b4      	movs	r2, #180	; 0xb4
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 f953 	bl	800ab74 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4aaa      	ldr	r2, [pc, #680]	; (8008b7c <HAL_SAI_MspInit+0x2c4>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	f040 80a5 	bne.w	8008a24 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80088da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088de:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088e4:	f107 0310 	add.w	r3, r7, #16
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fb fdb5 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 80088f4:	f7ff ff0e 	bl	8008714 <Error_Handler>
    }

      if (SAI1_client == 0)
 80088f8:	4ba1      	ldr	r3, [pc, #644]	; (8008b80 <HAL_SAI_MspInit+0x2c8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10e      	bne.n	800891e <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008900:	4ba0      	ldr	r3, [pc, #640]	; (8008b84 <HAL_SAI_MspInit+0x2cc>)
 8008902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008906:	4a9f      	ldr	r2, [pc, #636]	; (8008b84 <HAL_SAI_MspInit+0x2cc>)
 8008908:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800890c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008910:	4b9c      	ldr	r3, [pc, #624]	; (8008b84 <HAL_SAI_MspInit+0x2cc>)
 8008912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800891e:	4b98      	ldr	r3, [pc, #608]	; (8008b80 <HAL_SAI_MspInit+0x2c8>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	4a96      	ldr	r2, [pc, #600]	; (8008b80 <HAL_SAI_MspInit+0x2c8>)
 8008926:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008928:	2308      	movs	r3, #8
 800892a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800892e:	2302      	movs	r3, #2
 8008930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008934:	2300      	movs	r3, #0
 8008936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800893a:	2300      	movs	r3, #0
 800893c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008940:	2306      	movs	r3, #6
 8008942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008946:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800894a:	4619      	mov	r1, r3
 800894c:	488e      	ldr	r0, [pc, #568]	; (8008b88 <HAL_SAI_MspInit+0x2d0>)
 800894e:	f7fa fc49 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 8008952:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800895a:	2302      	movs	r3, #2
 800895c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008960:	2300      	movs	r3, #0
 8008962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008966:	2300      	movs	r3, #0
 8008968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800896c:	2306      	movs	r3, #6
 800896e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008972:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008976:	4619      	mov	r1, r3
 8008978:	4884      	ldr	r0, [pc, #528]	; (8008b8c <HAL_SAI_MspInit+0x2d4>)
 800897a:	f7fa fc33 	bl	80031e4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai_B1.Instance = DMA1_Stream1;
 800897e:	4b84      	ldr	r3, [pc, #528]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 8008980:	4a84      	ldr	r2, [pc, #528]	; (8008b94 <HAL_SAI_MspInit+0x2dc>)
 8008982:	601a      	str	r2, [r3, #0]
    hdma_sai_B1.Init.Request = DMA_REQUEST_SAI1_B;
 8008984:	4b82      	ldr	r3, [pc, #520]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 8008986:	2258      	movs	r2, #88	; 0x58
 8008988:	605a      	str	r2, [r3, #4]
    hdma_sai_B1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800898a:	4b81      	ldr	r3, [pc, #516]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 800898c:	2240      	movs	r2, #64	; 0x40
 800898e:	609a      	str	r2, [r3, #8]
    hdma_sai_B1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008990:	4b7f      	ldr	r3, [pc, #508]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 8008992:	2200      	movs	r2, #0
 8008994:	60da      	str	r2, [r3, #12]
    hdma_sai_B1.Init.MemInc = DMA_MINC_ENABLE;
 8008996:	4b7e      	ldr	r3, [pc, #504]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 8008998:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800899c:	611a      	str	r2, [r3, #16]
    hdma_sai_B1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800899e:	4b7c      	ldr	r3, [pc, #496]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 80089a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80089a4:	615a      	str	r2, [r3, #20]
    hdma_sai_B1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80089a6:	4b7a      	ldr	r3, [pc, #488]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 80089a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80089ac:	619a      	str	r2, [r3, #24]
    hdma_sai_B1.Init.Mode = DMA_CIRCULAR;
 80089ae:	4b78      	ldr	r3, [pc, #480]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 80089b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089b4:	61da      	str	r2, [r3, #28]
    hdma_sai_B1.Init.Priority = DMA_PRIORITY_HIGH;
 80089b6:	4b76      	ldr	r3, [pc, #472]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 80089b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80089bc:	621a      	str	r2, [r3, #32]
    hdma_sai_B1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089be:	4b74      	ldr	r3, [pc, #464]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai_B1) != HAL_OK)
 80089c4:	4872      	ldr	r0, [pc, #456]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 80089c6:	f7f8 fa13 	bl	8000df0 <HAL_DMA_Init>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80089d0:	f7ff fea0 	bl	8008714 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80089d4:	2306      	movs	r3, #6
 80089d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80089da:	2300      	movs	r3, #0
 80089dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 80089e6:	2301      	movs	r3, #1
 80089e8:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 80089ec:	2301      	movs	r3, #1
 80089ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai_B1, &pSyncConfig) != HAL_OK)
 80089f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80089f6:	4619      	mov	r1, r3
 80089f8:	4865      	ldr	r0, [pc, #404]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 80089fa:	f7fa fadb 	bl	8002fb4 <HAL_DMAEx_ConfigMuxSync>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8008a04:	f7ff fe86 	bl	8008714 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai_B1);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a61      	ldr	r2, [pc, #388]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 8008a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008a10:	4a5f      	ldr	r2, [pc, #380]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai_B1);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a5d      	ldr	r2, [pc, #372]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 8008a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008a1e:	4a5c      	ldr	r2, [pc, #368]	; (8008b90 <HAL_SAI_MspInit+0x2d8>)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a5b      	ldr	r2, [pc, #364]	; (8008b98 <HAL_SAI_MspInit+0x2e0>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	f040 80a2 	bne.w	8008b74 <HAL_SAI_MspInit+0x2bc>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8008a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a3c:	f107 0310 	add.w	r3, r7, #16
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fb fd09 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8008a4c:	f7ff fe62 	bl	8008714 <Error_Handler>
    }

    if (SAI4_client == 0)
 8008a50:	4b52      	ldr	r3, [pc, #328]	; (8008b9c <HAL_SAI_MspInit+0x2e4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10e      	bne.n	8008a76 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8008a58:	4b4a      	ldr	r3, [pc, #296]	; (8008b84 <HAL_SAI_MspInit+0x2cc>)
 8008a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a5e:	4a49      	ldr	r2, [pc, #292]	; (8008b84 <HAL_SAI_MspInit+0x2cc>)
 8008a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a68:	4b46      	ldr	r3, [pc, #280]	; (8008b84 <HAL_SAI_MspInit+0x2cc>)
 8008a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a72:	60bb      	str	r3, [r7, #8]
 8008a74:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8008a76:	4b49      	ldr	r3, [pc, #292]	; (8008b9c <HAL_SAI_MspInit+0x2e4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	4a47      	ldr	r2, [pc, #284]	; (8008b9c <HAL_SAI_MspInit+0x2e4>)
 8008a7e:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008a80:	2330      	movs	r3, #48	; 0x30
 8008a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a86:	2302      	movs	r3, #2
 8008a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a92:	2300      	movs	r3, #0
 8008a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8008a98:	230a      	movs	r3, #10
 8008a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4838      	ldr	r0, [pc, #224]	; (8008b88 <HAL_SAI_MspInit+0x2d0>)
 8008aa6:	f7fa fb9d 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008aaa:	2340      	movs	r3, #64	; 0x40
 8008aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ac8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008acc:	4619      	mov	r1, r3
 8008ace:	4834      	ldr	r0, [pc, #208]	; (8008ba0 <HAL_SAI_MspInit+0x2e8>)
 8008ad0:	f7fa fb88 	bl	80031e4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai_A4.Instance = BDMA_Channel0;
 8008ad4:	4b33      	ldr	r3, [pc, #204]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008ad6:	4a34      	ldr	r2, [pc, #208]	; (8008ba8 <HAL_SAI_MspInit+0x2f0>)
 8008ad8:	601a      	str	r2, [r3, #0]
    hdma_sai_A4.Init.Request = BDMA_REQUEST_SAI4_A;
 8008ada:	4b32      	ldr	r3, [pc, #200]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008adc:	220f      	movs	r2, #15
 8008ade:	605a      	str	r2, [r3, #4]
    hdma_sai_A4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ae0:	4b30      	ldr	r3, [pc, #192]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	609a      	str	r2, [r3, #8]
    hdma_sai_A4.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ae6:	4b2f      	ldr	r3, [pc, #188]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	60da      	str	r2, [r3, #12]
    hdma_sai_A4.Init.MemInc = DMA_MINC_ENABLE;
 8008aec:	4b2d      	ldr	r3, [pc, #180]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008af2:	611a      	str	r2, [r3, #16]
    hdma_sai_A4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008af4:	4b2b      	ldr	r3, [pc, #172]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008af6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008afa:	615a      	str	r2, [r3, #20]
    hdma_sai_A4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008afc:	4b29      	ldr	r3, [pc, #164]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b02:	619a      	str	r2, [r3, #24]
    hdma_sai_A4.Init.Mode = DMA_CIRCULAR;
 8008b04:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b0a:	61da      	str	r2, [r3, #28]
    hdma_sai_A4.Init.Priority = DMA_PRIORITY_HIGH;
 8008b0c:	4b25      	ldr	r3, [pc, #148]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008b0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai_A4) != HAL_OK)
 8008b14:	4823      	ldr	r0, [pc, #140]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008b16:	f7f8 f96b 	bl	8000df0 <HAL_DMA_Init>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <HAL_SAI_MspInit+0x26c>
    {
      Error_Handler();
 8008b20:	f7ff fdf8 	bl	8008714 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8008b24:	230e      	movs	r3, #14
 8008b26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai_A4, &pSyncConfig) != HAL_OK)
 8008b42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008b46:	4619      	mov	r1, r3
 8008b48:	4816      	ldr	r0, [pc, #88]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008b4a:	f7fa fa33 	bl	8002fb4 <HAL_DMAEx_ConfigMuxSync>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 8008b54:	f7ff fdde 	bl	8008714 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai_A4);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a12      	ldr	r2, [pc, #72]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008b60:	4a10      	ldr	r2, [pc, #64]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai_A4);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a0e      	ldr	r2, [pc, #56]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008b6e:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <HAL_SAI_MspInit+0x2ec>)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8008b74:	bf00      	nop
 8008b76:	37e8      	adds	r7, #232	; 0xe8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40015824 	.word	0x40015824
 8008b80:	24000668 	.word	0x24000668
 8008b84:	58024400 	.word	0x58024400
 8008b88:	58021000 	.word	0x58021000
 8008b8c:	58021400 	.word	0x58021400
 8008b90:	24000b50 	.word	0x24000b50
 8008b94:	40020028 	.word	0x40020028
 8008b98:	58005404 	.word	0x58005404
 8008b9c:	2400066c 	.word	0x2400066c
 8008ba0:	58020c00 	.word	0x58020c00
 8008ba4:	24000bc8 	.word	0x24000bc8
 8008ba8:	58025408 	.word	0x58025408

08008bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008bb0:	e7fe      	b.n	8008bb0 <NMI_Handler+0x4>

08008bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008bb6:	e7fe      	b.n	8008bb6 <HardFault_Handler+0x4>

08008bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008bbc:	e7fe      	b.n	8008bbc <MemManage_Handler+0x4>

08008bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bc2:	e7fe      	b.n	8008bc2 <BusFault_Handler+0x4>

08008bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bc8:	e7fe      	b.n	8008bc8 <UsageFault_Handler+0x4>

08008bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008bce:	bf00      	nop
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008bdc:	bf00      	nop
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008be6:	b480      	push	{r7}
 8008be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008bea:	bf00      	nop
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008bf8:	f7f7 fee0 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008bfc:	bf00      	nop
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai_B1);
 8008c04:	4802      	ldr	r0, [pc, #8]	; (8008c10 <DMA1_Stream1_IRQHandler+0x10>)
 8008c06:	f7f8 feb7 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008c0a:	bf00      	nop
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	24000b50 	.word	0x24000b50

08008c14 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai_B1);
 8008c18:	4802      	ldr	r0, [pc, #8]	; (8008c24 <DMAMUX1_OVR_IRQHandler+0x10>)
 8008c1a:	f7fa fa91 	bl	8003140 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8008c1e:	bf00      	nop
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	24000b50 	.word	0x24000b50

08008c28 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai_A4);
 8008c2c:	4802      	ldr	r0, [pc, #8]	; (8008c38 <DMAMUX2_OVR_IRQHandler+0x10>)
 8008c2e:	f7fa fa87 	bl	8003140 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 8008c32:	bf00      	nop
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	24000bc8 	.word	0x24000bc8

08008c3c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai_A4);
 8008c40:	4802      	ldr	r0, [pc, #8]	; (8008c4c <BDMA_Channel0_IRQHandler+0x10>)
 8008c42:	f7f8 fe99 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8008c46:	bf00      	nop
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	24000bc8 	.word	0x24000bc8

08008c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008c50:	b480      	push	{r7}
 8008c52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008c54:	4b32      	ldr	r3, [pc, #200]	; (8008d20 <SystemInit+0xd0>)
 8008c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c5a:	4a31      	ldr	r2, [pc, #196]	; (8008d20 <SystemInit+0xd0>)
 8008c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008c64:	4b2f      	ldr	r3, [pc, #188]	; (8008d24 <SystemInit+0xd4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	2b06      	cmp	r3, #6
 8008c6e:	d807      	bhi.n	8008c80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008c70:	4b2c      	ldr	r3, [pc, #176]	; (8008d24 <SystemInit+0xd4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f023 030f 	bic.w	r3, r3, #15
 8008c78:	4a2a      	ldr	r2, [pc, #168]	; (8008d24 <SystemInit+0xd4>)
 8008c7a:	f043 0307 	orr.w	r3, r3, #7
 8008c7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008c80:	4b29      	ldr	r3, [pc, #164]	; (8008d28 <SystemInit+0xd8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a28      	ldr	r2, [pc, #160]	; (8008d28 <SystemInit+0xd8>)
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008c8c:	4b26      	ldr	r3, [pc, #152]	; (8008d28 <SystemInit+0xd8>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008c92:	4b25      	ldr	r3, [pc, #148]	; (8008d28 <SystemInit+0xd8>)
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	4924      	ldr	r1, [pc, #144]	; (8008d28 <SystemInit+0xd8>)
 8008c98:	4b24      	ldr	r3, [pc, #144]	; (8008d2c <SystemInit+0xdc>)
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008c9e:	4b21      	ldr	r3, [pc, #132]	; (8008d24 <SystemInit+0xd4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0308 	and.w	r3, r3, #8
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d007      	beq.n	8008cba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008caa:	4b1e      	ldr	r3, [pc, #120]	; (8008d24 <SystemInit+0xd4>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f023 030f 	bic.w	r3, r3, #15
 8008cb2:	4a1c      	ldr	r2, [pc, #112]	; (8008d24 <SystemInit+0xd4>)
 8008cb4:	f043 0307 	orr.w	r3, r3, #7
 8008cb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008cba:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <SystemInit+0xd8>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008cc0:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <SystemInit+0xd8>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008cc6:	4b18      	ldr	r3, [pc, #96]	; (8008d28 <SystemInit+0xd8>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008ccc:	4b16      	ldr	r3, [pc, #88]	; (8008d28 <SystemInit+0xd8>)
 8008cce:	4a18      	ldr	r2, [pc, #96]	; (8008d30 <SystemInit+0xe0>)
 8008cd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008cd2:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <SystemInit+0xd8>)
 8008cd4:	4a17      	ldr	r2, [pc, #92]	; (8008d34 <SystemInit+0xe4>)
 8008cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008cd8:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <SystemInit+0xd8>)
 8008cda:	4a17      	ldr	r2, [pc, #92]	; (8008d38 <SystemInit+0xe8>)
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008cde:	4b12      	ldr	r3, [pc, #72]	; (8008d28 <SystemInit+0xd8>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008ce4:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <SystemInit+0xd8>)
 8008ce6:	4a14      	ldr	r2, [pc, #80]	; (8008d38 <SystemInit+0xe8>)
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008cea:	4b0f      	ldr	r3, [pc, #60]	; (8008d28 <SystemInit+0xd8>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008cf0:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <SystemInit+0xd8>)
 8008cf2:	4a11      	ldr	r2, [pc, #68]	; (8008d38 <SystemInit+0xe8>)
 8008cf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008cf6:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <SystemInit+0xd8>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008cfc:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <SystemInit+0xd8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <SystemInit+0xd8>)
 8008d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008d08:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <SystemInit+0xd8>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <SystemInit+0xec>)
 8008d10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008d14:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008d16:	bf00      	nop
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	e000ed00 	.word	0xe000ed00
 8008d24:	52002000 	.word	0x52002000
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008d30:	02020200 	.word	0x02020200
 8008d34:	01ff0000 	.word	0x01ff0000
 8008d38:	01010280 	.word	0x01010280
 8008d3c:	52004000 	.word	0x52004000

08008d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008d44:	f7ff ff84 	bl	8008c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008d48:	480c      	ldr	r0, [pc, #48]	; (8008d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008d4a:	490d      	ldr	r1, [pc, #52]	; (8008d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008d4c:	4a0d      	ldr	r2, [pc, #52]	; (8008d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d50:	e002      	b.n	8008d58 <LoopCopyDataInit>

08008d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d56:	3304      	adds	r3, #4

08008d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d5c:	d3f9      	bcc.n	8008d52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d5e:	4a0a      	ldr	r2, [pc, #40]	; (8008d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008d60:	4c0a      	ldr	r4, [pc, #40]	; (8008d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d64:	e001      	b.n	8008d6a <LoopFillZerobss>

08008d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d68:	3204      	adds	r2, #4

08008d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d6c:	d3fb      	bcc.n	8008d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008d6e:	f001 fedd 	bl	800ab2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008d72:	f7ff fa57 	bl	8008224 <main>
  bx  lr
 8008d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008d78:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008d7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008d80:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 8008d84:	0800b220 	.word	0x0800b220
  ldr r2, =_sbss
 8008d88:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8008d8c:	24000ce0 	.word	0x24000ce0

08008d90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d90:	e7fe      	b.n	8008d90 <ADC3_IRQHandler>
	...

08008d94 <D16_GENERIC>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	b089      	sub	sp, #36	; 0x24
 8008d9a:	6993      	ldr	r3, [r2, #24]
 8008d9c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008d9e:	9103      	str	r1, [sp, #12]
 8008da0:	9307      	str	r3, [sp, #28]
 8008da2:	69d3      	ldr	r3, [r2, #28]
 8008da4:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8008da8:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008dac:	9106      	str	r1, [sp, #24]
 8008dae:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8008db2:	2d00      	cmp	r5, #0
 8008db4:	d063      	beq.n	8008e7e <D16_GENERIC+0xea>
 8008db6:	f001 0520 	and.w	r5, r1, #32
 8008dba:	f001 0110 	and.w	r1, r1, #16
 8008dbe:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8008ea0 <D16_GENERIC+0x10c>
 8008dc2:	46c1      	mov	r9, r8
 8008dc4:	9104      	str	r1, [sp, #16]
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	9505      	str	r5, [sp, #20]
 8008dca:	e04d      	b.n	8008e68 <D16_GENERIC+0xd4>
 8008dcc:	5d87      	ldrb	r7, [r0, r6]
 8008dce:	7805      	ldrb	r5, [r0, #0]
 8008dd0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8008dd4:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8008dd8:	b2fe      	uxtb	r6, r7
 8008dda:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8008dde:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8008de2:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8008de6:	441d      	add	r5, r3
 8008de8:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8008dec:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008df0:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8008df4:	0a9b      	lsrs	r3, r3, #10
 8008df6:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8008dfa:	4d27      	ldr	r5, [pc, #156]	; (8008e98 <D16_GENERIC+0x104>)
 8008dfc:	fb26 c505 	smlad	r5, r6, r5, ip
 8008e00:	4f26      	ldr	r7, [pc, #152]	; (8008e9c <D16_GENERIC+0x108>)
 8008e02:	fb26 fc07 	smuad	ip, r6, r7
 8008e06:	9e04      	ldr	r6, [sp, #16]
 8008e08:	f101 0801 	add.w	r8, r1, #1
 8008e0c:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8008e10:	b1ae      	cbz	r6, 8008e3e <D16_GENERIC+0xaa>
 8008e12:	442c      	add	r4, r5
 8008e14:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8008e18:	eba4 040a 	sub.w	r4, r4, sl
 8008e1c:	46aa      	mov	sl, r5
 8008e1e:	17e7      	asrs	r7, r4, #31
 8008e20:	fba4 450b 	umull	r4, r5, r4, fp
 8008e24:	e9cd 4500 	strd	r4, r5, [sp]
 8008e28:	fb0b 5407 	mla	r4, fp, r7, r5
 8008e2c:	9401      	str	r4, [sp, #4]
 8008e2e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008e32:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008e36:	f145 0500 	adc.w	r5, r5, #0
 8008e3a:	006c      	lsls	r4, r5, #1
 8008e3c:	4625      	mov	r5, r4
 8008e3e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008e42:	042d      	lsls	r5, r5, #16
 8008e44:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008e48:	2700      	movs	r7, #0
 8008e4a:	fb01 fb0b 	mul.w	fp, r1, fp
 8008e4e:	fa1f f188 	uxth.w	r1, r8
 8008e52:	fbc9 6705 	smlal	r6, r7, r9, r5
 8008e56:	9e03      	ldr	r6, [sp, #12]
 8008e58:	10bd      	asrs	r5, r7, #2
 8008e5a:	f305 050f 	ssat	r5, #16, r5
 8008e5e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008e62:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008e64:	428d      	cmp	r5, r1
 8008e66:	d90a      	bls.n	8008e7e <D16_GENERIC+0xea>
 8008e68:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008e6a:	2d01      	cmp	r5, #1
 8008e6c:	b2ee      	uxtb	r6, r5
 8008e6e:	d1ad      	bne.n	8008dcc <D16_GENERIC+0x38>
 8008e70:	9d05      	ldr	r5, [sp, #20]
 8008e72:	f850 7b02 	ldr.w	r7, [r0], #2
 8008e76:	2d00      	cmp	r5, #0
 8008e78:	d0ae      	beq.n	8008dd8 <D16_GENERIC+0x44>
 8008e7a:	ba7f      	rev16	r7, r7
 8008e7c:	e7ac      	b.n	8008dd8 <D16_GENERIC+0x44>
 8008e7e:	2000      	movs	r0, #0
 8008e80:	9906      	ldr	r1, [sp, #24]
 8008e82:	61d3      	str	r3, [r2, #28]
 8008e84:	9b07      	ldr	r3, [sp, #28]
 8008e86:	f8c2 c008 	str.w	ip, [r2, #8]
 8008e8a:	60d1      	str	r1, [r2, #12]
 8008e8c:	6193      	str	r3, [r2, #24]
 8008e8e:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8008e92:	b009      	add	sp, #36	; 0x24
 8008e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e98:	00030001 	.word	0x00030001
 8008e9c:	00010003 	.word	0x00010003
 8008ea0:	24000000 	.word	0x24000000

08008ea4 <D24_GENERIC>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8008eac:	b089      	sub	sp, #36	; 0x24
 8008eae:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	6993      	ldr	r3, [r2, #24]
 8008eb4:	9104      	str	r1, [sp, #16]
 8008eb6:	9307      	str	r3, [sp, #28]
 8008eb8:	69d1      	ldr	r1, [r2, #28]
 8008eba:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8008ebe:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8008ec2:	2e00      	cmp	r6, #0
 8008ec4:	f000 8088 	beq.w	8008fd8 <D24_GENERIC+0x134>
 8008ec8:	f005 0620 	and.w	r6, r5, #32
 8008ecc:	f005 0510 	and.w	r5, r5, #16
 8008ed0:	f04f 0c00 	mov.w	ip, #0
 8008ed4:	f8df e140 	ldr.w	lr, [pc, #320]	; 8009018 <D24_GENERIC+0x174>
 8008ed8:	9606      	str	r6, [sp, #24]
 8008eda:	9505      	str	r5, [sp, #20]
 8008edc:	e064      	b.n	8008fa8 <D24_GENERIC+0x104>
 8008ede:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8008ee2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8008ee6:	f810 b007 	ldrb.w	fp, [r0, r7]
 8008eea:	042d      	lsls	r5, r5, #16
 8008eec:	19f0      	adds	r0, r6, r7
 8008eee:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8008ef2:	44a9      	add	r9, r5
 8008ef4:	fa5f f689 	uxtb.w	r6, r9
 8008ef8:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8008efc:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8008f00:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8008f04:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8008f08:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8008f0c:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8008f10:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8008f14:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008f18:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8008f1c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8008f20:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8008f24:	4d3a      	ldr	r5, [pc, #232]	; (8009010 <D24_GENERIC+0x16c>)
 8008f26:	fb26 8705 	smlad	r7, r6, r5, r8
 8008f2a:	4d3a      	ldr	r5, [pc, #232]	; (8009014 <D24_GENERIC+0x170>)
 8008f2c:	fb26 3805 	smlad	r8, r6, r5, r3
 8008f30:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008f34:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8008f38:	2301      	movs	r3, #1
 8008f3a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8008f3e:	fb26 f603 	smuad	r6, r6, r3
 8008f42:	eb0c 0903 	add.w	r9, ip, r3
 8008f46:	eb0b 0306 	add.w	r3, fp, r6
 8008f4a:	9e05      	ldr	r6, [sp, #20]
 8008f4c:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8008f50:	b1ae      	cbz	r6, 8008f7e <D24_GENERIC+0xda>
 8008f52:	442c      	add	r4, r5
 8008f54:	9e03      	ldr	r6, [sp, #12]
 8008f56:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8008f5a:	1ba4      	subs	r4, r4, r6
 8008f5c:	9503      	str	r5, [sp, #12]
 8008f5e:	17e7      	asrs	r7, r4, #31
 8008f60:	fba4 450b 	umull	r4, r5, r4, fp
 8008f64:	e9cd 4500 	strd	r4, r5, [sp]
 8008f68:	fb0b 5407 	mla	r4, fp, r7, r5
 8008f6c:	9401      	str	r4, [sp, #4]
 8008f6e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008f72:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008f76:	f145 0500 	adc.w	r5, r5, #0
 8008f7a:	006c      	lsls	r4, r5, #1
 8008f7c:	4625      	mov	r5, r4
 8008f7e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8008f82:	03ad      	lsls	r5, r5, #14
 8008f84:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008f88:	2700      	movs	r7, #0
 8008f8a:	fb0c fb0b 	mul.w	fp, ip, fp
 8008f8e:	fa1f fc89 	uxth.w	ip, r9
 8008f92:	fbca 6705 	smlal	r6, r7, sl, r5
 8008f96:	9e04      	ldr	r6, [sp, #16]
 8008f98:	10bd      	asrs	r5, r7, #2
 8008f9a:	f305 050f 	ssat	r5, #16, r5
 8008f9e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8008fa2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008fa4:	4565      	cmp	r5, ip
 8008fa6:	d917      	bls.n	8008fd8 <D24_GENERIC+0x134>
 8008fa8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008faa:	f890 9000 	ldrb.w	r9, [r0]
 8008fae:	b2ef      	uxtb	r7, r5
 8008fb0:	2d01      	cmp	r5, #1
 8008fb2:	b23e      	sxth	r6, r7
 8008fb4:	d193      	bne.n	8008ede <D24_GENERIC+0x3a>
 8008fb6:	9d06      	ldr	r5, [sp, #24]
 8008fb8:	b1dd      	cbz	r5, 8008ff2 <D24_GENERIC+0x14e>
 8008fba:	78c7      	ldrb	r7, [r0, #3]
 8008fbc:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8008fc0:	f01c 0f01 	tst.w	ip, #1
 8008fc4:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8008fc8:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8008fcc:	d11a      	bne.n	8009004 <D24_GENERIC+0x160>
 8008fce:	f890 9001 	ldrb.w	r9, [r0, #1]
 8008fd2:	3002      	adds	r0, #2
 8008fd4:	44b1      	add	r9, r6
 8008fd6:	e78d      	b.n	8008ef4 <D24_GENERIC+0x50>
 8008fd8:	6093      	str	r3, [r2, #8]
 8008fda:	2000      	movs	r0, #0
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	f8c2 800c 	str.w	r8, [r2, #12]
 8008fe2:	6153      	str	r3, [r2, #20]
 8008fe4:	9b07      	ldr	r3, [sp, #28]
 8008fe6:	61d1      	str	r1, [r2, #28]
 8008fe8:	6114      	str	r4, [r2, #16]
 8008fea:	6193      	str	r3, [r2, #24]
 8008fec:	b009      	add	sp, #36	; 0x24
 8008fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff2:	7845      	ldrb	r5, [r0, #1]
 8008ff4:	3003      	adds	r0, #3
 8008ff6:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8008ffa:	022d      	lsls	r5, r5, #8
 8008ffc:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8009000:	44a9      	add	r9, r5
 8009002:	e777      	b.n	8008ef4 <D24_GENERIC+0x50>
 8009004:	7886      	ldrb	r6, [r0, #2]
 8009006:	3004      	adds	r0, #4
 8009008:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800900c:	44a9      	add	r9, r5
 800900e:	e771      	b.n	8008ef4 <D24_GENERIC+0x50>
 8009010:	00030001 	.word	0x00030001
 8009014:	00060007 	.word	0x00060007
 8009018:	24000000 	.word	0x24000000

0800901c <D32_GENERIC>:
 800901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009020:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8009024:	b089      	sub	sp, #36	; 0x24
 8009026:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009028:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800902a:	9302      	str	r3, [sp, #8]
 800902c:	6993      	ldr	r3, [r2, #24]
 800902e:	9104      	str	r1, [sp, #16]
 8009030:	9307      	str	r3, [sp, #28]
 8009032:	9503      	str	r5, [sp, #12]
 8009034:	69d1      	ldr	r1, [r2, #28]
 8009036:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009038:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800903c:	2e00      	cmp	r6, #0
 800903e:	f000 8097 	beq.w	8009170 <D32_GENERIC+0x154>
 8009042:	f005 0620 	and.w	r6, r5, #32
 8009046:	f005 0510 	and.w	r5, r5, #16
 800904a:	f04f 0e00 	mov.w	lr, #0
 800904e:	f8df c150 	ldr.w	ip, [pc, #336]	; 80091a0 <D32_GENERIC+0x184>
 8009052:	9606      	str	r6, [sp, #24]
 8009054:	9505      	str	r5, [sp, #20]
 8009056:	e079      	b.n	800914c <D32_GENERIC+0x130>
 8009058:	783d      	ldrb	r5, [r7, #0]
 800905a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800905e:	042d      	lsls	r5, r5, #16
 8009060:	f810 a006 	ldrb.w	sl, [r0, r6]
 8009064:	f890 9000 	ldrb.w	r9, [r0]
 8009068:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800906c:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8009070:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8009074:	44a9      	add	r9, r5
 8009076:	fa5f f789 	uxtb.w	r7, r9
 800907a:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800907e:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8009082:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8009086:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800908a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800908e:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8009092:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8009096:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 800909a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800909e:	f3c1 0909 	ubfx	r9, r1, #0, #10
 80090a2:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80090a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80090aa:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 80090ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80090b2:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 80090b6:	f3c1 0509 	ubfx	r5, r1, #0, #10
 80090ba:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80090be:	4d34      	ldr	r5, [pc, #208]	; (8009190 <D32_GENERIC+0x174>)
 80090c0:	fb29 8805 	smlad	r8, r9, r5, r8
 80090c4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80090c8:	fb26 8705 	smlad	r7, r6, r5, r8
 80090cc:	4d31      	ldr	r5, [pc, #196]	; (8009194 <D32_GENERIC+0x178>)
 80090ce:	fb29 3305 	smlad	r3, r9, r5, r3
 80090d2:	4d31      	ldr	r5, [pc, #196]	; (8009198 <D32_GENERIC+0x17c>)
 80090d4:	fb26 3805 	smlad	r8, r6, r5, r3
 80090d8:	2301      	movs	r3, #1
 80090da:	fb29 f903 	smuad	r9, r9, r3
 80090de:	4b2f      	ldr	r3, [pc, #188]	; (800919c <D32_GENERIC+0x180>)
 80090e0:	fb26 9303 	smlad	r3, r6, r3, r9
 80090e4:	9e05      	ldr	r6, [sp, #20]
 80090e6:	f10e 0901 	add.w	r9, lr, #1
 80090ea:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80090ee:	b1ae      	cbz	r6, 800911c <D32_GENERIC+0x100>
 80090f0:	442c      	add	r4, r5
 80090f2:	9e02      	ldr	r6, [sp, #8]
 80090f4:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80090f8:	1ba4      	subs	r4, r4, r6
 80090fa:	9502      	str	r5, [sp, #8]
 80090fc:	17e7      	asrs	r7, r4, #31
 80090fe:	fba4 450a 	umull	r4, r5, r4, sl
 8009102:	e9cd 4500 	strd	r4, r5, [sp]
 8009106:	fb0a 5407 	mla	r4, sl, r7, r5
 800910a:	9401      	str	r4, [sp, #4]
 800910c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009110:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009114:	f145 0500 	adc.w	r5, r5, #0
 8009118:	006c      	lsls	r4, r5, #1
 800911a:	4625      	mov	r5, r4
 800911c:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8009120:	036d      	lsls	r5, r5, #13
 8009122:	9f03      	ldr	r7, [sp, #12]
 8009124:	fb0e fb0a 	mul.w	fp, lr, sl
 8009128:	fa1f fe89 	uxth.w	lr, r9
 800912c:	f04f 0a00 	mov.w	sl, #0
 8009130:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009134:	9e04      	ldr	r6, [sp, #16]
 8009136:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800913a:	4657      	mov	r7, sl
 800913c:	10bd      	asrs	r5, r7, #2
 800913e:	f305 050f 	ssat	r5, #16, r5
 8009142:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8009146:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009148:	4575      	cmp	r5, lr
 800914a:	d911      	bls.n	8009170 <D32_GENERIC+0x154>
 800914c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800914e:	b2ee      	uxtb	r6, r5
 8009150:	2d01      	cmp	r5, #1
 8009152:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8009156:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 800915a:	f47f af7d 	bne.w	8009058 <D32_GENERIC+0x3c>
 800915e:	1d05      	adds	r5, r0, #4
 8009160:	f8d0 9000 	ldr.w	r9, [r0]
 8009164:	9806      	ldr	r0, [sp, #24]
 8009166:	b180      	cbz	r0, 800918a <D32_GENERIC+0x16e>
 8009168:	fa99 f999 	rev16.w	r9, r9
 800916c:	4628      	mov	r0, r5
 800916e:	e782      	b.n	8009076 <D32_GENERIC+0x5a>
 8009170:	6093      	str	r3, [r2, #8]
 8009172:	2000      	movs	r0, #0
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	f8c2 800c 	str.w	r8, [r2, #12]
 800917a:	6153      	str	r3, [r2, #20]
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	61d1      	str	r1, [r2, #28]
 8009180:	6114      	str	r4, [r2, #16]
 8009182:	6193      	str	r3, [r2, #24]
 8009184:	b009      	add	sp, #36	; 0x24
 8009186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918a:	4628      	mov	r0, r5
 800918c:	e773      	b.n	8009076 <D32_GENERIC+0x5a>
 800918e:	bf00      	nop
 8009190:	00060003 	.word	0x00060003
 8009194:	000a000c 	.word	0x000a000c
 8009198:	000c000a 	.word	0x000c000a
 800919c:	00030006 	.word	0x00030006
 80091a0:	24000000 	.word	0x24000000

080091a4 <D48_GENERIC>:
 80091a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a8:	6913      	ldr	r3, [r2, #16]
 80091aa:	b089      	sub	sp, #36	; 0x24
 80091ac:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	6953      	ldr	r3, [r2, #20]
 80091b2:	9104      	str	r1, [sp, #16]
 80091b4:	9302      	str	r3, [sp, #8]
 80091b6:	6993      	ldr	r3, [r2, #24]
 80091b8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 80091c2:	9100      	str	r1, [sp, #0]
 80091c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80091c6:	9103      	str	r1, [sp, #12]
 80091c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80091ca:	2c00      	cmp	r4, #0
 80091cc:	f000 80be 	beq.w	800934c <D48_GENERIC+0x1a8>
 80091d0:	f001 0420 	and.w	r4, r1, #32
 80091d4:	f001 0110 	and.w	r1, r1, #16
 80091d8:	f04f 0e00 	mov.w	lr, #0
 80091dc:	9105      	str	r1, [sp, #20]
 80091de:	9406      	str	r4, [sp, #24]
 80091e0:	4962      	ldr	r1, [pc, #392]	; (800936c <D48_GENERIC+0x1c8>)
 80091e2:	e0a0      	b.n	8009326 <D48_GENERIC+0x182>
 80091e4:	eb00 0608 	add.w	r6, r0, r8
 80091e8:	f810 a008 	ldrb.w	sl, [r0, r8]
 80091ec:	f810 9005 	ldrb.w	r9, [r0, r5]
 80091f0:	5df4      	ldrb	r4, [r6, r7]
 80091f2:	443e      	add	r6, r7
 80091f4:	f890 b000 	ldrb.w	fp, [r0]
 80091f8:	0420      	lsls	r0, r4, #16
 80091fa:	eb06 0408 	add.w	r4, r6, r8
 80091fe:	f816 6008 	ldrb.w	r6, [r6, r8]
 8009202:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8009206:	f814 8007 	ldrb.w	r8, [r4, r7]
 800920a:	4427      	add	r7, r4
 800920c:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8009210:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8009214:	eb0a 040b 	add.w	r4, sl, fp
 8009218:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 800921c:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8009220:	b2f7      	uxtb	r7, r6
 8009222:	b2e6      	uxtb	r6, r4
 8009224:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8009228:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800922c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8009230:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009234:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8009238:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800923c:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8009240:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8009244:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8009248:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800924c:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8009250:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009254:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8009258:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800925c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009260:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009264:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009268:	9d00      	ldr	r5, [sp, #0]
 800926a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800926e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009272:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8009276:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800927a:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800927e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8009282:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8009286:	4c3a      	ldr	r4, [pc, #232]	; (8009370 <D48_GENERIC+0x1cc>)
 8009288:	fb26 5a04 	smlad	sl, r6, r4, r5
 800928c:	4c39      	ldr	r4, [pc, #228]	; (8009374 <D48_GENERIC+0x1d0>)
 800928e:	fb29 aa04 	smlad	sl, r9, r4, sl
 8009292:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8009296:	fb27 aa04 	smlad	sl, r7, r4, sl
 800929a:	4c37      	ldr	r4, [pc, #220]	; (8009378 <D48_GENERIC+0x1d4>)
 800929c:	fb26 3304 	smlad	r3, r6, r4, r3
 80092a0:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80092a4:	fb29 3304 	smlad	r3, r9, r4, r3
 80092a8:	4c34      	ldr	r4, [pc, #208]	; (800937c <D48_GENERIC+0x1d8>)
 80092aa:	fb27 3304 	smlad	r3, r7, r4, r3
 80092ae:	2501      	movs	r5, #1
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	fb26 f605 	smuad	r6, r6, r5
 80092b6:	4b32      	ldr	r3, [pc, #200]	; (8009380 <D48_GENERIC+0x1dc>)
 80092b8:	fb29 6903 	smlad	r9, r9, r3, r6
 80092bc:	4b31      	ldr	r3, [pc, #196]	; (8009384 <D48_GENERIC+0x1e0>)
 80092be:	fb27 9303 	smlad	r3, r7, r3, r9
 80092c2:	9c05      	ldr	r4, [sp, #20]
 80092c4:	eb0e 0805 	add.w	r8, lr, r5
 80092c8:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 80092cc:	b19c      	cbz	r4, 80092f6 <D48_GENERIC+0x152>
 80092ce:	9c01      	ldr	r4, [sp, #4]
 80092d0:	9d02      	ldr	r5, [sp, #8]
 80092d2:	4454      	add	r4, sl
 80092d4:	f8d2 9020 	ldr.w	r9, [r2, #32]
 80092d8:	f8cd a008 	str.w	sl, [sp, #8]
 80092dc:	1b64      	subs	r4, r4, r5
 80092de:	fba4 ab09 	umull	sl, fp, r4, r9
 80092e2:	17e7      	asrs	r7, r4, #31
 80092e4:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 80092e8:	fb09 bb07 	mla	fp, r9, r7, fp
 80092ec:	f14b 0500 	adc.w	r5, fp, #0
 80092f0:	006c      	lsls	r4, r5, #1
 80092f2:	46a2      	mov	sl, r4
 80092f4:	9401      	str	r4, [sp, #4]
 80092f6:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80092f8:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 80092fc:	9d03      	ldr	r5, [sp, #12]
 80092fe:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009302:	fb0e f606 	mul.w	r6, lr, r6
 8009306:	fa1f fe88 	uxth.w	lr, r8
 800930a:	f04f 0800 	mov.w	r8, #0
 800930e:	fbc5 780a 	smlal	r7, r8, r5, sl
 8009312:	4645      	mov	r5, r8
 8009314:	10ac      	asrs	r4, r5, #2
 8009316:	9d04      	ldr	r5, [sp, #16]
 8009318:	f304 040f 	ssat	r4, #16, r4
 800931c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8009320:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009322:	4574      	cmp	r4, lr
 8009324:	d912      	bls.n	800934c <D48_GENERIC+0x1a8>
 8009326:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8009328:	b2e5      	uxtb	r5, r4
 800932a:	2c01      	cmp	r4, #1
 800932c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8009330:	f1c5 0700 	rsb	r7, r5, #0
 8009334:	f47f af56 	bne.w	80091e4 <D48_GENERIC+0x40>
 8009338:	9d06      	ldr	r5, [sp, #24]
 800933a:	e9d0 4600 	ldrd	r4, r6, [r0]
 800933e:	3006      	adds	r0, #6
 8009340:	2d00      	cmp	r5, #0
 8009342:	f43f af6b 	beq.w	800921c <D48_GENERIC+0x78>
 8009346:	ba64      	rev16	r4, r4
 8009348:	ba76      	rev16	r6, r6
 800934a:	e767      	b.n	800921c <D48_GENERIC+0x78>
 800934c:	6093      	str	r3, [r2, #8]
 800934e:	2000      	movs	r0, #0
 8009350:	9b00      	ldr	r3, [sp, #0]
 8009352:	f8c2 c01c 	str.w	ip, [r2, #28]
 8009356:	60d3      	str	r3, [r2, #12]
 8009358:	9b01      	ldr	r3, [sp, #4]
 800935a:	6113      	str	r3, [r2, #16]
 800935c:	9b02      	ldr	r3, [sp, #8]
 800935e:	6153      	str	r3, [r2, #20]
 8009360:	9b07      	ldr	r3, [sp, #28]
 8009362:	6193      	str	r3, [r2, #24]
 8009364:	b009      	add	sp, #36	; 0x24
 8009366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936a:	bf00      	nop
 800936c:	24000000 	.word	0x24000000
 8009370:	000f000a 	.word	0x000f000a
 8009374:	00060003 	.word	0x00060003
 8009378:	00150019 	.word	0x00150019
 800937c:	00190015 	.word	0x00190015
 8009380:	00030006 	.word	0x00030006
 8009384:	000a000f 	.word	0x000a000f

08009388 <D64_GENERIC>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	6913      	ldr	r3, [r2, #16]
 800938e:	b089      	sub	sp, #36	; 0x24
 8009390:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	6953      	ldr	r3, [r2, #20]
 8009396:	9105      	str	r1, [sp, #20]
 8009398:	9303      	str	r3, [sp, #12]
 800939a:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800939c:	6993      	ldr	r3, [r2, #24]
 800939e:	69d4      	ldr	r4, [r2, #28]
 80093a0:	9307      	str	r3, [sp, #28]
 80093a2:	9504      	str	r5, [sp, #16]
 80093a4:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 80093a8:	2900      	cmp	r1, #0
 80093aa:	f000 80e8 	beq.w	800957e <D64_GENERIC+0x1f6>
 80093ae:	6a11      	ldr	r1, [r2, #32]
 80093b0:	2500      	movs	r5, #0
 80093b2:	46b3      	mov	fp, r6
 80093b4:	9302      	str	r3, [sp, #8]
 80093b6:	9106      	str	r1, [sp, #24]
 80093b8:	4978      	ldr	r1, [pc, #480]	; (800959c <D64_GENERIC+0x214>)
 80093ba:	e0cc      	b.n	8009556 <D64_GENERIC+0x1ce>
 80093bc:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 80093c0:	f1ce 0c00 	rsb	ip, lr, #0
 80093c4:	f890 9000 	ldrb.w	r9, [r0]
 80093c8:	eb00 0708 	add.w	r7, r0, r8
 80093cc:	f810 6008 	ldrb.w	r6, [r0, r8]
 80093d0:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 80093d4:	f817 000c 	ldrb.w	r0, [r7, ip]
 80093d8:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 80093dc:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 80093e0:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 80093e4:	ea4f 4800 	mov.w	r8, r0, lsl #16
 80093e8:	f817 000c 	ldrb.w	r0, [r7, ip]
 80093ec:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 80093f0:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 80093f4:	0400      	lsls	r0, r0, #16
 80093f6:	4467      	add	r7, ip
 80093f8:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 80093fc:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8009400:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8009404:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8009408:	444e      	add	r6, r9
 800940a:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800940e:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8009412:	44c2      	add	sl, r8
 8009414:	b2f7      	uxtb	r7, r6
 8009416:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800941a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800941e:	0e36      	lsrs	r6, r6, #24
 8009420:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8009424:	fa5f fc8a 	uxtb.w	ip, sl
 8009428:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800942c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8009430:	443c      	add	r4, r7
 8009432:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8009436:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800943a:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800943e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8009442:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009446:	4b56      	ldr	r3, [pc, #344]	; (80095a0 <D64_GENERIC+0x218>)
 8009448:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 800944c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009450:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8009454:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8009458:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800945c:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8009460:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8009464:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009468:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800946c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009470:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009474:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8009478:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800947c:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8009480:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8009484:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8009488:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800948c:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8009490:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009494:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8009498:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800949c:	ea4f 2499 	mov.w	r4, r9, lsr #10
 80094a0:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 80094a4:	fb28 b903 	smlad	r9, r8, r3, fp
 80094a8:	4b3e      	ldr	r3, [pc, #248]	; (80095a4 <D64_GENERIC+0x21c>)
 80094aa:	fb26 9903 	smlad	r9, r6, r3, r9
 80094ae:	4b3e      	ldr	r3, [pc, #248]	; (80095a8 <D64_GENERIC+0x220>)
 80094b0:	fb2c 9703 	smlad	r7, ip, r3, r9
 80094b4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 80094b8:	fb2a 7909 	smlad	r9, sl, r9, r7
 80094bc:	4f3b      	ldr	r7, [pc, #236]	; (80095ac <D64_GENERIC+0x224>)
 80094be:	9b02      	ldr	r3, [sp, #8]
 80094c0:	fb28 3307 	smlad	r3, r8, r7, r3
 80094c4:	fb2a 3317 	smladx	r3, sl, r7, r3
 80094c8:	4f39      	ldr	r7, [pc, #228]	; (80095b0 <D64_GENERIC+0x228>)
 80094ca:	fb26 3307 	smlad	r3, r6, r7, r3
 80094ce:	fb2c 3b17 	smladx	fp, ip, r7, r3
 80094d2:	f04f 0e01 	mov.w	lr, #1
 80094d6:	fb28 f80e 	smuad	r8, r8, lr
 80094da:	4b36      	ldr	r3, [pc, #216]	; (80095b4 <D64_GENERIC+0x22c>)
 80094dc:	fb26 8603 	smlad	r6, r6, r3, r8
 80094e0:	4b35      	ldr	r3, [pc, #212]	; (80095b8 <D64_GENERIC+0x230>)
 80094e2:	fb2c 6c03 	smlad	ip, ip, r3, r6
 80094e6:	4b35      	ldr	r3, [pc, #212]	; (80095bc <D64_GENERIC+0x234>)
 80094e8:	fb2a c303 	smlad	r3, sl, r3, ip
 80094ec:	9f06      	ldr	r7, [sp, #24]
 80094ee:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 80094f2:	9302      	str	r3, [sp, #8]
 80094f4:	b1cf      	cbz	r7, 800952a <D64_GENERIC+0x1a2>
 80094f6:	9b00      	ldr	r3, [sp, #0]
 80094f8:	444b      	add	r3, r9
 80094fa:	461e      	mov	r6, r3
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8009502:	1af6      	subs	r6, r6, r3
 8009504:	46b0      	mov	r8, r6
 8009506:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800950a:	e9cd 8900 	strd	r8, r9, [sp]
 800950e:	fba6 8907 	umull	r8, r9, r6, r7
 8009512:	9e01      	ldr	r6, [sp, #4]
 8009514:	fb07 9306 	mla	r3, r7, r6, r9
 8009518:	4646      	mov	r6, r8
 800951a:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800951e:	f143 0700 	adc.w	r7, r3, #0
 8009522:	fa07 f30e 	lsl.w	r3, r7, lr
 8009526:	4699      	mov	r9, r3
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800952e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8009532:	9b04      	ldr	r3, [sp, #16]
 8009534:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009538:	2700      	movs	r7, #0
 800953a:	fb05 fc0c 	mul.w	ip, r5, ip
 800953e:	3501      	adds	r5, #1
 8009540:	fbc3 6709 	smlal	r6, r7, r3, r9
 8009544:	9b05      	ldr	r3, [sp, #20]
 8009546:	10be      	asrs	r6, r7, #2
 8009548:	f306 060f 	ssat	r6, #16, r6
 800954c:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8009550:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009552:	42ae      	cmp	r6, r5
 8009554:	dd11      	ble.n	800957a <D64_GENERIC+0x1f2>
 8009556:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800955a:	f1be 0f01 	cmp.w	lr, #1
 800955e:	f47f af2d 	bne.w	80093bc <D64_GENERIC+0x34>
 8009562:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8009564:	f100 0c08 	add.w	ip, r0, #8
 8009568:	06bb      	lsls	r3, r7, #26
 800956a:	e9d0 6a00 	ldrd	r6, sl, [r0]
 800956e:	d513      	bpl.n	8009598 <D64_GENERIC+0x210>
 8009570:	ba76      	rev16	r6, r6
 8009572:	fa9a fa9a 	rev16.w	sl, sl
 8009576:	4660      	mov	r0, ip
 8009578:	e74c      	b.n	8009414 <D64_GENERIC+0x8c>
 800957a:	465e      	mov	r6, fp
 800957c:	9b02      	ldr	r3, [sp, #8]
 800957e:	6093      	str	r3, [r2, #8]
 8009580:	2000      	movs	r0, #0
 8009582:	9b00      	ldr	r3, [sp, #0]
 8009584:	60d6      	str	r6, [r2, #12]
 8009586:	6113      	str	r3, [r2, #16]
 8009588:	9b03      	ldr	r3, [sp, #12]
 800958a:	61d4      	str	r4, [r2, #28]
 800958c:	6153      	str	r3, [r2, #20]
 800958e:	9b07      	ldr	r3, [sp, #28]
 8009590:	6193      	str	r3, [r2, #24]
 8009592:	b009      	add	sp, #36	; 0x24
 8009594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	4660      	mov	r0, ip
 800959a:	e73b      	b.n	8009414 <D64_GENERIC+0x8c>
 800959c:	24000000 	.word	0x24000000
 80095a0:	001c0015 	.word	0x001c0015
 80095a4:	000f000a 	.word	0x000f000a
 80095a8:	00060003 	.word	0x00060003
 80095ac:	0024002a 	.word	0x0024002a
 80095b0:	002e0030 	.word	0x002e0030
 80095b4:	00030006 	.word	0x00030006
 80095b8:	000a000f 	.word	0x000a000f
 80095bc:	0015001c 	.word	0x0015001c

080095c0 <D80_GENERIC>:
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	b08b      	sub	sp, #44	; 0x2c
 80095c6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80095c8:	9107      	str	r1, [sp, #28]
 80095ca:	6911      	ldr	r1, [r2, #16]
 80095cc:	9104      	str	r1, [sp, #16]
 80095ce:	6951      	ldr	r1, [r2, #20]
 80095d0:	9105      	str	r1, [sp, #20]
 80095d2:	6991      	ldr	r1, [r2, #24]
 80095d4:	9109      	str	r1, [sp, #36]	; 0x24
 80095d6:	69d1      	ldr	r1, [r2, #28]
 80095d8:	9102      	str	r1, [sp, #8]
 80095da:	6891      	ldr	r1, [r2, #8]
 80095dc:	9103      	str	r1, [sp, #12]
 80095de:	68d1      	ldr	r1, [r2, #12]
 80095e0:	9101      	str	r1, [sp, #4]
 80095e2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80095e4:	9106      	str	r1, [sp, #24]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 810b 	beq.w	8009802 <D80_GENERIC+0x242>
 80095ec:	6a13      	ldr	r3, [r2, #32]
 80095ee:	f04f 0800 	mov.w	r8, #0
 80095f2:	f8df c260 	ldr.w	ip, [pc, #608]	; 8009854 <D80_GENERIC+0x294>
 80095f6:	9308      	str	r3, [sp, #32]
 80095f8:	9200      	str	r2, [sp, #0]
 80095fa:	e0ee      	b.n	80097da <D80_GENERIC+0x21a>
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	f890 e000 	ldrb.w	lr, [r0]
 8009602:	b219      	sxth	r1, r3
 8009604:	425c      	negs	r4, r3
 8009606:	f810 9003 	ldrb.w	r9, [r0, r3]
 800960a:	004e      	lsls	r6, r1, #1
 800960c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8009610:	4431      	add	r1, r6
 8009612:	1843      	adds	r3, r0, r1
 8009614:	f810 b001 	ldrb.w	fp, [r0, r1]
 8009618:	1919      	adds	r1, r3, r4
 800961a:	5d1b      	ldrb	r3, [r3, r4]
 800961c:	1948      	adds	r0, r1, r5
 800961e:	f811 a005 	ldrb.w	sl, [r1, r5]
 8009622:	041b      	lsls	r3, r3, #16
 8009624:	1907      	adds	r7, r0, r4
 8009626:	5d01      	ldrb	r1, [r0, r4]
 8009628:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800962c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8009630:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8009634:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8009638:	0409      	lsls	r1, r1, #16
 800963a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800963e:	eb0b 0905 	add.w	r9, fp, r5
 8009642:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8009646:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800964a:	eb09 0b04 	add.w	fp, r9, r4
 800964e:	f819 4004 	ldrb.w	r4, [r9, r4]
 8009652:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8009656:	4473      	add	r3, lr
 8009658:	eb0b 0006 	add.w	r0, fp, r6
 800965c:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8009660:	4439      	add	r1, r7
 8009662:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8009666:	b2df      	uxtb	r7, r3
 8009668:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800966c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8009670:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8009674:	fa5f fa81 	uxtb.w	sl, r1
 8009678:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800967c:	9c02      	ldr	r4, [sp, #8]
 800967e:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8009682:	441c      	add	r4, r3
 8009684:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8009688:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 800968c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8009690:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8009694:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8009698:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800969c:	b2ed      	uxtb	r5, r5
 800969e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 80096a2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80096a6:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80096aa:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80096ae:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 80096b2:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80096b6:	f3c1 4707 	ubfx	r7, r1, #16, #8
 80096ba:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80096be:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80096c2:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80096c6:	0e09      	lsrs	r1, r1, #24
 80096c8:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80096cc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80096d0:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80096d4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80096d8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80096dc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80096e0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80096e4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80096e8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80096ec:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 80096f0:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80096f4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80096f8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80096fc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009700:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009704:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8009708:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800970c:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8009710:	9202      	str	r2, [sp, #8]
 8009712:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8009716:	4a43      	ldr	r2, [pc, #268]	; (8009824 <D80_GENERIC+0x264>)
 8009718:	9f01      	ldr	r7, [sp, #4]
 800971a:	fb23 7a02 	smlad	sl, r3, r2, r7
 800971e:	4a42      	ldr	r2, [pc, #264]	; (8009828 <D80_GENERIC+0x268>)
 8009720:	fb26 aa02 	smlad	sl, r6, r2, sl
 8009724:	4a41      	ldr	r2, [pc, #260]	; (800982c <D80_GENERIC+0x26c>)
 8009726:	fb24 aa02 	smlad	sl, r4, r2, sl
 800972a:	4a41      	ldr	r2, [pc, #260]	; (8009830 <D80_GENERIC+0x270>)
 800972c:	fb21 a702 	smlad	r7, r1, r2, sl
 8009730:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8009734:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8009738:	4a3e      	ldr	r2, [pc, #248]	; (8009834 <D80_GENERIC+0x274>)
 800973a:	9f03      	ldr	r7, [sp, #12]
 800973c:	fb23 7e02 	smlad	lr, r3, r2, r7
 8009740:	4a3d      	ldr	r2, [pc, #244]	; (8009838 <D80_GENERIC+0x278>)
 8009742:	fb26 ee02 	smlad	lr, r6, r2, lr
 8009746:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800974a:	fb24 e707 	smlad	r7, r4, r7, lr
 800974e:	4a3b      	ldr	r2, [pc, #236]	; (800983c <D80_GENERIC+0x27c>)
 8009750:	fb21 7702 	smlad	r7, r1, r2, r7
 8009754:	4a3a      	ldr	r2, [pc, #232]	; (8009840 <D80_GENERIC+0x280>)
 8009756:	fb25 7202 	smlad	r2, r5, r2, r7
 800975a:	f04f 0901 	mov.w	r9, #1
 800975e:	9201      	str	r2, [sp, #4]
 8009760:	fb23 f909 	smuad	r9, r3, r9
 8009764:	4b37      	ldr	r3, [pc, #220]	; (8009844 <D80_GENERIC+0x284>)
 8009766:	fb26 9603 	smlad	r6, r6, r3, r9
 800976a:	4f37      	ldr	r7, [pc, #220]	; (8009848 <D80_GENERIC+0x288>)
 800976c:	fb24 6407 	smlad	r4, r4, r7, r6
 8009770:	4f36      	ldr	r7, [pc, #216]	; (800984c <D80_GENERIC+0x28c>)
 8009772:	fb21 4707 	smlad	r7, r1, r7, r4
 8009776:	4936      	ldr	r1, [pc, #216]	; (8009850 <D80_GENERIC+0x290>)
 8009778:	fb25 7301 	smlad	r3, r5, r1, r7
 800977c:	9303      	str	r3, [sp, #12]
 800977e:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8009782:	9b08      	ldr	r3, [sp, #32]
 8009784:	b193      	cbz	r3, 80097ac <D80_GENERIC+0x1ec>
 8009786:	9a04      	ldr	r2, [sp, #16]
 8009788:	4452      	add	r2, sl
 800978a:	4614      	mov	r4, r2
 800978c:	9a05      	ldr	r2, [sp, #20]
 800978e:	f8cd a014 	str.w	sl, [sp, #20]
 8009792:	1aa4      	subs	r4, r4, r2
 8009794:	fba4 1203 	umull	r1, r2, r4, r3
 8009798:	17e7      	asrs	r7, r4, #31
 800979a:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 800979e:	fb03 2207 	mla	r2, r3, r7, r2
 80097a2:	f142 0500 	adc.w	r5, r2, #0
 80097a6:	006b      	lsls	r3, r5, #1
 80097a8:	469a      	mov	sl, r3
 80097aa:	9304      	str	r3, [sp, #16]
 80097ac:	9e00      	ldr	r6, [sp, #0]
 80097ae:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 80097b2:	9a06      	ldr	r2, [sp, #24]
 80097b4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80097b8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 80097ba:	2500      	movs	r5, #0
 80097bc:	fb08 f303 	mul.w	r3, r8, r3
 80097c0:	fbc2 450a 	smlal	r4, r5, r2, sl
 80097c4:	9a07      	ldr	r2, [sp, #28]
 80097c6:	f108 0801 	add.w	r8, r8, #1
 80097ca:	10a9      	asrs	r1, r5, #2
 80097cc:	f301 010f 	ssat	r1, #16, r1
 80097d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80097d4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80097d6:	4543      	cmp	r3, r8
 80097d8:	dd12      	ble.n	8009800 <D80_GENERIC+0x240>
 80097da:	9b00      	ldr	r3, [sp, #0]
 80097dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097de:	2b01      	cmp	r3, #1
 80097e0:	f47f af0c 	bne.w	80095fc <D80_GENERIC+0x3c>
 80097e4:	9b00      	ldr	r3, [sp, #0]
 80097e6:	6885      	ldr	r5, [r0, #8]
 80097e8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80097ea:	06b2      	lsls	r2, r6, #26
 80097ec:	e9d0 3100 	ldrd	r3, r1, [r0]
 80097f0:	f100 000a 	add.w	r0, r0, #10
 80097f4:	f57f af35 	bpl.w	8009662 <D80_GENERIC+0xa2>
 80097f8:	ba5b      	rev16	r3, r3
 80097fa:	ba49      	rev16	r1, r1
 80097fc:	ba6d      	rev16	r5, r5
 80097fe:	e730      	b.n	8009662 <D80_GENERIC+0xa2>
 8009800:	4632      	mov	r2, r6
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	2000      	movs	r0, #0
 8009806:	6093      	str	r3, [r2, #8]
 8009808:	9b01      	ldr	r3, [sp, #4]
 800980a:	60d3      	str	r3, [r2, #12]
 800980c:	9b02      	ldr	r3, [sp, #8]
 800980e:	61d3      	str	r3, [r2, #28]
 8009810:	9b04      	ldr	r3, [sp, #16]
 8009812:	6113      	str	r3, [r2, #16]
 8009814:	9b05      	ldr	r3, [sp, #20]
 8009816:	6153      	str	r3, [r2, #20]
 8009818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981a:	6193      	str	r3, [r2, #24]
 800981c:	b00b      	add	sp, #44	; 0x2c
 800981e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009822:	bf00      	nop
 8009824:	002d0024 	.word	0x002d0024
 8009828:	001c0015 	.word	0x001c0015
 800982c:	000f000a 	.word	0x000f000a
 8009830:	00060003 	.word	0x00060003
 8009834:	0037003f 	.word	0x0037003f
 8009838:	00450049 	.word	0x00450049
 800983c:	00490045 	.word	0x00490045
 8009840:	003f0037 	.word	0x003f0037
 8009844:	00030006 	.word	0x00030006
 8009848:	000a000f 	.word	0x000a000f
 800984c:	0015001c 	.word	0x0015001c
 8009850:	0024002d 	.word	0x0024002d
 8009854:	24000000 	.word	0x24000000

08009858 <D128_GENERIC>:
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	b08d      	sub	sp, #52	; 0x34
 800985e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009860:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8009864:	9109      	str	r1, [sp, #36]	; 0x24
 8009866:	6911      	ldr	r1, [r2, #16]
 8009868:	9201      	str	r2, [sp, #4]
 800986a:	9106      	str	r1, [sp, #24]
 800986c:	6951      	ldr	r1, [r2, #20]
 800986e:	9107      	str	r1, [sp, #28]
 8009870:	6991      	ldr	r1, [r2, #24]
 8009872:	910b      	str	r1, [sp, #44]	; 0x2c
 8009874:	6891      	ldr	r1, [r2, #8]
 8009876:	9103      	str	r1, [sp, #12]
 8009878:	68d1      	ldr	r1, [r2, #12]
 800987a:	9102      	str	r1, [sp, #8]
 800987c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800987e:	9108      	str	r1, [sp, #32]
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 8183 	beq.w	8009b8c <D128_GENERIC+0x334>
 8009886:	2300      	movs	r3, #0
 8009888:	6a12      	ldr	r2, [r2, #32]
 800988a:	4681      	mov	r9, r0
 800988c:	920a      	str	r2, [sp, #40]	; 0x28
 800988e:	e9cd a304 	strd	sl, r3, [sp, #16]
 8009892:	e165      	b.n	8009b60 <D128_GENERIC+0x308>
 8009894:	b2d2      	uxtb	r2, r2
 8009896:	f899 b000 	ldrb.w	fp, [r9]
 800989a:	b213      	sxth	r3, r2
 800989c:	4255      	negs	r5, r2
 800989e:	f819 0002 	ldrb.w	r0, [r9, r2]
 80098a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80098a6:	009f      	lsls	r7, r3, #2
 80098a8:	eb09 0402 	add.w	r4, r9, r2
 80098ac:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 80098b0:	f819 8002 	ldrb.w	r8, [r9, r2]
 80098b4:	443b      	add	r3, r7
 80098b6:	1962      	adds	r2, r4, r5
 80098b8:	5d64      	ldrb	r4, [r4, r5]
 80098ba:	eb02 0c03 	add.w	ip, r2, r3
 80098be:	0424      	lsls	r4, r4, #16
 80098c0:	5cd3      	ldrb	r3, [r2, r3]
 80098c2:	eb0c 0e05 	add.w	lr, ip, r5
 80098c6:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 80098ca:	f81c 2005 	ldrb.w	r2, [ip, r5]
 80098ce:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 80098d2:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 80098d6:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 80098da:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 80098de:	eb0c 0e06 	add.w	lr, ip, r6
 80098e2:	f81c a006 	ldrb.w	sl, [ip, r6]
 80098e6:	0412      	lsls	r2, r2, #16
 80098e8:	445c      	add	r4, fp
 80098ea:	eb0e 0c05 	add.w	ip, lr, r5
 80098ee:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 80098f2:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80098f6:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80098fa:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80098fe:	041b      	lsls	r3, r3, #16
 8009900:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8009904:	eb00 0b06 	add.w	fp, r0, r6
 8009908:	5d80      	ldrb	r0, [r0, r6]
 800990a:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800990e:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8009912:	eb0b 0a05 	add.w	sl, fp, r5
 8009916:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800991a:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800991e:	0436      	lsls	r6, r6, #16
 8009920:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8009924:	4442      	add	r2, r8
 8009926:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800992a:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 800992e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009932:	44b9      	add	r9, r7
 8009934:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8009938:	4463      	add	r3, ip
 800993a:	eb06 0508 	add.w	r5, r6, r8
 800993e:	b2e7      	uxtb	r7, r4
 8009940:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8009944:	499b      	ldr	r1, [pc, #620]	; (8009bb4 <D128_GENERIC+0x35c>)
 8009946:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800994a:	0e24      	lsrs	r4, r4, #24
 800994c:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8009950:	b2d7      	uxtb	r7, r2
 8009952:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8009956:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800995a:	9904      	ldr	r1, [sp, #16]
 800995c:	4461      	add	r1, ip
 800995e:	468c      	mov	ip, r1
 8009960:	4994      	ldr	r1, [pc, #592]	; (8009bb4 <D128_GENERIC+0x35c>)
 8009962:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8009966:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800996a:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 800996e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009972:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8009976:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 800997a:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800997e:	0e12      	lsrs	r2, r2, #24
 8009980:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8009984:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009988:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800998c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009990:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8009994:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009998:	b2da      	uxtb	r2, r3
 800999a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800999e:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 80099a2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80099a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80099aa:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 80099ae:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80099b2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80099b6:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 80099ba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80099be:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 80099c2:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 80099c6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80099ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80099ce:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80099d2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80099d6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80099da:	0e1b      	lsrs	r3, r3, #24
 80099dc:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 80099e0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80099e4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80099e8:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 80099ec:	b2eb      	uxtb	r3, r5
 80099ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80099f2:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 80099f6:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80099fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80099fe:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8009a02:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8009a06:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8009a0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009a0e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009a12:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8009a16:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8009a1a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8009a1e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8009a22:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009a26:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009a2a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8009a2e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009a32:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8009a36:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8009a3a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8009a3e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009a42:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8009a46:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009a4a:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8009a4e:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8009a52:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8009a56:	9104      	str	r1, [sp, #16]
 8009a58:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8009a5c:	9902      	ldr	r1, [sp, #8]
 8009a5e:	4a56      	ldr	r2, [pc, #344]	; (8009bb8 <D128_GENERIC+0x360>)
 8009a60:	fb2b 1202 	smlad	r2, fp, r2, r1
 8009a64:	4955      	ldr	r1, [pc, #340]	; (8009bbc <D128_GENERIC+0x364>)
 8009a66:	fb28 2201 	smlad	r2, r8, r1, r2
 8009a6a:	4955      	ldr	r1, [pc, #340]	; (8009bc0 <D128_GENERIC+0x368>)
 8009a6c:	fb27 2201 	smlad	r2, r7, r1, r2
 8009a70:	4954      	ldr	r1, [pc, #336]	; (8009bc4 <D128_GENERIC+0x36c>)
 8009a72:	fb26 2201 	smlad	r2, r6, r1, r2
 8009a76:	4954      	ldr	r1, [pc, #336]	; (8009bc8 <D128_GENERIC+0x370>)
 8009a78:	fb24 2201 	smlad	r2, r4, r1, r2
 8009a7c:	4953      	ldr	r1, [pc, #332]	; (8009bcc <D128_GENERIC+0x374>)
 8009a7e:	fb20 2201 	smlad	r2, r0, r1, r2
 8009a82:	4953      	ldr	r1, [pc, #332]	; (8009bd0 <D128_GENERIC+0x378>)
 8009a84:	fb23 2201 	smlad	r2, r3, r1, r2
 8009a88:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8009a8c:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8009a90:	4950      	ldr	r1, [pc, #320]	; (8009bd4 <D128_GENERIC+0x37c>)
 8009a92:	9a03      	ldr	r2, [sp, #12]
 8009a94:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8009a98:	4a4f      	ldr	r2, [pc, #316]	; (8009bd8 <D128_GENERIC+0x380>)
 8009a9a:	fb28 ce02 	smlad	lr, r8, r2, ip
 8009a9e:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009bf0 <D128_GENERIC+0x398>
 8009aa2:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8009aa6:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8009bf4 <D128_GENERIC+0x39c>
 8009aaa:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8009aae:	f8df e148 	ldr.w	lr, [pc, #328]	; 8009bf8 <D128_GENERIC+0x3a0>
 8009ab2:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8009ab6:	f8df c144 	ldr.w	ip, [pc, #324]	; 8009bfc <D128_GENERIC+0x3a4>
 8009aba:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8009abe:	f8df c140 	ldr.w	ip, [pc, #320]	; 8009c00 <D128_GENERIC+0x3a8>
 8009ac2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8009ac6:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8009c04 <D128_GENERIC+0x3ac>
 8009aca:	fb25 c20e 	smlad	r2, r5, lr, ip
 8009ace:	f04f 0c01 	mov.w	ip, #1
 8009ad2:	9202      	str	r2, [sp, #8]
 8009ad4:	fb2b fb0c 	smuad	fp, fp, ip
 8009ad8:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8009c08 <D128_GENERIC+0x3b0>
 8009adc:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8009ae0:	f8df c128 	ldr.w	ip, [pc, #296]	; 8009c0c <D128_GENERIC+0x3b4>
 8009ae4:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8009ae8:	4f3c      	ldr	r7, [pc, #240]	; (8009bdc <D128_GENERIC+0x384>)
 8009aea:	fb26 bb07 	smlad	fp, r6, r7, fp
 8009aee:	4f3c      	ldr	r7, [pc, #240]	; (8009be0 <D128_GENERIC+0x388>)
 8009af0:	fb24 bb07 	smlad	fp, r4, r7, fp
 8009af4:	4f3b      	ldr	r7, [pc, #236]	; (8009be4 <D128_GENERIC+0x38c>)
 8009af6:	fb20 bb07 	smlad	fp, r0, r7, fp
 8009afa:	4f3b      	ldr	r7, [pc, #236]	; (8009be8 <D128_GENERIC+0x390>)
 8009afc:	fb23 bb07 	smlad	fp, r3, r7, fp
 8009b00:	4b3a      	ldr	r3, [pc, #232]	; (8009bec <D128_GENERIC+0x394>)
 8009b02:	fb25 b303 	smlad	r3, r5, r3, fp
 8009b06:	9303      	str	r3, [sp, #12]
 8009b08:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8009b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b0e:	b183      	cbz	r3, 8009b32 <D128_GENERIC+0x2da>
 8009b10:	9a06      	ldr	r2, [sp, #24]
 8009b12:	9907      	ldr	r1, [sp, #28]
 8009b14:	4422      	add	r2, r4
 8009b16:	9407      	str	r4, [sp, #28]
 8009b18:	1a52      	subs	r2, r2, r1
 8009b1a:	fba2 0103 	umull	r0, r1, r2, r3
 8009b1e:	17d5      	asrs	r5, r2, #31
 8009b20:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8009b24:	fb03 1105 	mla	r1, r3, r5, r1
 8009b28:	f141 0300 	adc.w	r3, r1, #0
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	461c      	mov	r4, r3
 8009b30:	9306      	str	r3, [sp, #24]
 8009b32:	9d01      	ldr	r5, [sp, #4]
 8009b34:	01e4      	lsls	r4, r4, #7
 8009b36:	9e05      	ldr	r6, [sp, #20]
 8009b38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b3c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9908      	ldr	r1, [sp, #32]
 8009b42:	fb06 f000 	mul.w	r0, r6, r0
 8009b46:	3601      	adds	r6, #1
 8009b48:	fbc1 2304 	smlal	r2, r3, r1, r4
 8009b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b4e:	109b      	asrs	r3, r3, #2
 8009b50:	9605      	str	r6, [sp, #20]
 8009b52:	f303 030f 	ssat	r3, #16, r3
 8009b56:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8009b5a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8009b5c:	42b3      	cmp	r3, r6
 8009b5e:	dd13      	ble.n	8009b88 <D128_GENERIC+0x330>
 8009b60:	9b01      	ldr	r3, [sp, #4]
 8009b62:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009b64:	2a01      	cmp	r2, #1
 8009b66:	f47f ae95 	bne.w	8009894 <D128_GENERIC+0x3c>
 8009b6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009b6c:	f109 0610 	add.w	r6, r9, #16
 8009b70:	0681      	lsls	r1, r0, #26
 8009b72:	e9d9 4200 	ldrd	r4, r2, [r9]
 8009b76:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8009b7a:	d518      	bpl.n	8009bae <D128_GENERIC+0x356>
 8009b7c:	ba64      	rev16	r4, r4
 8009b7e:	ba52      	rev16	r2, r2
 8009b80:	ba5b      	rev16	r3, r3
 8009b82:	ba6d      	rev16	r5, r5
 8009b84:	46b1      	mov	r9, r6
 8009b86:	e6da      	b.n	800993e <D128_GENERIC+0xe6>
 8009b88:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009b8c:	9b01      	ldr	r3, [sp, #4]
 8009b8e:	2000      	movs	r0, #0
 8009b90:	9903      	ldr	r1, [sp, #12]
 8009b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b94:	6099      	str	r1, [r3, #8]
 8009b96:	9902      	ldr	r1, [sp, #8]
 8009b98:	f8c3 a01c 	str.w	sl, [r3, #28]
 8009b9c:	60d9      	str	r1, [r3, #12]
 8009b9e:	9906      	ldr	r1, [sp, #24]
 8009ba0:	619a      	str	r2, [r3, #24]
 8009ba2:	6119      	str	r1, [r3, #16]
 8009ba4:	9907      	ldr	r1, [sp, #28]
 8009ba6:	6159      	str	r1, [r3, #20]
 8009ba8:	b00d      	add	sp, #52	; 0x34
 8009baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bae:	46b1      	mov	r9, r6
 8009bb0:	e6c5      	b.n	800993e <D128_GENERIC+0xe6>
 8009bb2:	bf00      	nop
 8009bb4:	24000000 	.word	0x24000000
 8009bb8:	00780069 	.word	0x00780069
 8009bbc:	005b004e 	.word	0x005b004e
 8009bc0:	00420037 	.word	0x00420037
 8009bc4:	002d0024 	.word	0x002d0024
 8009bc8:	001c0015 	.word	0x001c0015
 8009bcc:	000f000a 	.word	0x000f000a
 8009bd0:	00060003 	.word	0x00060003
 8009bd4:	00880096 	.word	0x00880096
 8009bd8:	00a200ac 	.word	0x00a200ac
 8009bdc:	0015001c 	.word	0x0015001c
 8009be0:	0024002d 	.word	0x0024002d
 8009be4:	00370042 	.word	0x00370042
 8009be8:	004e005b 	.word	0x004e005b
 8009bec:	00690078 	.word	0x00690078
 8009bf0:	00b400ba 	.word	0x00b400ba
 8009bf4:	00be00c0 	.word	0x00be00c0
 8009bf8:	00c000be 	.word	0x00c000be
 8009bfc:	00ba00b4 	.word	0x00ba00b4
 8009c00:	00ac00a2 	.word	0x00ac00a2
 8009c04:	00960088 	.word	0x00960088
 8009c08:	00030006 	.word	0x00030006
 8009c0c:	000a000f 	.word	0x000a000f

08009c10 <D16_1CH_HTONS_VOL_HP>:
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	6993      	ldr	r3, [r2, #24]
 8009c16:	b087      	sub	sp, #28
 8009c18:	4682      	mov	sl, r0
 8009c1a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009c1c:	9304      	str	r3, [sp, #16]
 8009c1e:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8009c22:	69d3      	ldr	r3, [r2, #28]
 8009c24:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8009c28:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8009c2c:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8009c30:	9403      	str	r4, [sp, #12]
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d054      	beq.n	8009ce0 <D16_1CH_HTONS_VOL_HP+0xd0>
 8009c36:	f1a1 0902 	sub.w	r9, r1, #2
 8009c3a:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8009c3e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8009cec <D16_1CH_HTONS_VOL_HP+0xdc>
 8009c42:	4650      	mov	r0, sl
 8009c44:	9101      	str	r1, [sp, #4]
 8009c46:	4619      	mov	r1, r3
 8009c48:	f8cd b008 	str.w	fp, [sp, #8]
 8009c4c:	9205      	str	r2, [sp, #20]
 8009c4e:	f850 3b02 	ldr.w	r3, [r0], #2
 8009c52:	ba5b      	rev16	r3, r3
 8009c54:	b2dc      	uxtb	r4, r3
 8009c56:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009c5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c5e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8009c62:	4419      	add	r1, r3
 8009c64:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8009c68:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8009c6c:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8009c70:	0aa1      	lsrs	r1, r4, #10
 8009c72:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009c76:	4a1b      	ldr	r2, [pc, #108]	; (8009ce4 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8009c78:	fb23 5402 	smlad	r4, r3, r2, r5
 8009c7c:	4a1a      	ldr	r2, [pc, #104]	; (8009ce8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8009c7e:	fb23 f502 	smuad	r5, r3, r2
 8009c82:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009c86:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8009c8a:	f04f 0b00 	mov.w	fp, #0
 8009c8e:	19a2      	adds	r2, r4, r6
 8009c90:	eba2 020c 	sub.w	r2, r2, ip
 8009c94:	46a4      	mov	ip, r4
 8009c96:	17d7      	asrs	r7, r2, #31
 8009c98:	fba2 230e 	umull	r2, r3, r2, lr
 8009c9c:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8009ca0:	fb0e 3307 	mla	r3, lr, r7, r3
 8009ca4:	f143 0700 	adc.w	r7, r3, #0
 8009ca8:	9b02      	ldr	r3, [sp, #8]
 8009caa:	047a      	lsls	r2, r7, #17
 8009cac:	007e      	lsls	r6, r7, #1
 8009cae:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8009cb2:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8009cb6:	f303 030f 	ssat	r3, #16, r3
 8009cba:	f829 3f02 	strh.w	r3, [r9, #2]!
 8009cbe:	9b01      	ldr	r3, [sp, #4]
 8009cc0:	4298      	cmp	r0, r3
 8009cc2:	d1c4      	bne.n	8009c4e <D16_1CH_HTONS_VOL_HP+0x3e>
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	9a05      	ldr	r2, [sp, #20]
 8009cc8:	2000      	movs	r0, #0
 8009cca:	9903      	ldr	r1, [sp, #12]
 8009ccc:	61d3      	str	r3, [r2, #28]
 8009cce:	9b04      	ldr	r3, [sp, #16]
 8009cd0:	6095      	str	r5, [r2, #8]
 8009cd2:	60d1      	str	r1, [r2, #12]
 8009cd4:	6193      	str	r3, [r2, #24]
 8009cd6:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8009cda:	b007      	add	sp, #28
 8009cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce0:	4664      	mov	r4, ip
 8009ce2:	e7f1      	b.n	8009cc8 <D16_1CH_HTONS_VOL_HP+0xb8>
 8009ce4:	00030001 	.word	0x00030001
 8009ce8:	00010003 	.word	0x00010003
 8009cec:	24000000 	.word	0x24000000

08009cf0 <D24_1CH_HTONS_VOL_HP>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009cf6:	b089      	sub	sp, #36	; 0x24
 8009cf8:	6993      	ldr	r3, [r2, #24]
 8009cfa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009cfc:	9604      	str	r6, [sp, #16]
 8009cfe:	6a16      	ldr	r6, [r2, #32]
 8009d00:	9306      	str	r3, [sp, #24]
 8009d02:	9505      	str	r5, [sp, #20]
 8009d04:	69d3      	ldr	r3, [r2, #28]
 8009d06:	9600      	str	r6, [sp, #0]
 8009d08:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009d0c:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8009d10:	2d00      	cmp	r5, #0
 8009d12:	f000 8083 	beq.w	8009e1c <D24_1CH_HTONS_VOL_HP+0x12c>
 8009d16:	9207      	str	r2, [sp, #28]
 8009d18:	2600      	movs	r6, #0
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	f1a1 0b02 	sub.w	fp, r1, #2
 8009d20:	4f3f      	ldr	r7, [pc, #252]	; (8009e20 <D24_1CH_HTONS_VOL_HP+0x130>)
 8009d22:	461d      	mov	r5, r3
 8009d24:	f8cd a00c 	str.w	sl, [sp, #12]
 8009d28:	9c00      	ldr	r4, [sp, #0]
 8009d2a:	e056      	b.n	8009dda <D24_1CH_HTONS_VOL_HP+0xea>
 8009d2c:	7841      	ldrb	r1, [r0, #1]
 8009d2e:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8009d32:	3002      	adds	r0, #2
 8009d34:	4488      	add	r8, r1
 8009d36:	fa5f f388 	uxtb.w	r3, r8
 8009d3a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8009d3e:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8009d42:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8009d46:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8009d4a:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8009d4e:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8009d52:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009d56:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009d5a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8009d5e:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009d66:	492f      	ldr	r1, [pc, #188]	; (8009e24 <D24_1CH_HTONS_VOL_HP+0x134>)
 8009d68:	fb23 e901 	smlad	r9, r3, r1, lr
 8009d6c:	492e      	ldr	r1, [pc, #184]	; (8009e28 <D24_1CH_HTONS_VOL_HP+0x138>)
 8009d6e:	fb23 ce01 	smlad	lr, r3, r1, ip
 8009d72:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8009d76:	2101      	movs	r1, #1
 8009d78:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8009d7c:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8009d80:	fb23 f301 	smuad	r3, r3, r1
 8009d84:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8009d88:	eb08 0c03 	add.w	ip, r8, r3
 8009d8c:	9b03      	ldr	r3, [sp, #12]
 8009d8e:	f04f 0a00 	mov.w	sl, #0
 8009d92:	440a      	add	r2, r1
 8009d94:	3601      	adds	r6, #1
 8009d96:	9103      	str	r1, [sp, #12]
 8009d98:	1ad2      	subs	r2, r2, r3
 8009d9a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009d9e:	fba2 2304 	umull	r2, r3, r2, r4
 8009da2:	e9cd 2300 	strd	r2, r3, [sp]
 8009da6:	fb04 3309 	mla	r3, r4, r9, r3
 8009daa:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009db4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009db8:	f143 0300 	adc.w	r3, r3, #0
 8009dbc:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8009dc0:	005a      	lsls	r2, r3, #1
 8009dc2:	9b04      	ldr	r3, [sp, #16]
 8009dc4:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8009dc8:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8009dcc:	f303 030f 	ssat	r3, #16, r3
 8009dd0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009dd4:	9b05      	ldr	r3, [sp, #20]
 8009dd6:	429e      	cmp	r6, r3
 8009dd8:	d010      	beq.n	8009dfc <D24_1CH_HTONS_VOL_HP+0x10c>
 8009dda:	f890 9003 	ldrb.w	r9, [r0, #3]
 8009dde:	f016 0f01 	tst.w	r6, #1
 8009de2:	7801      	ldrb	r1, [r0, #0]
 8009de4:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8009de8:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8009dec:	d09e      	beq.n	8009d2c <D24_1CH_HTONS_VOL_HP+0x3c>
 8009dee:	f890 8002 	ldrb.w	r8, [r0, #2]
 8009df2:	3004      	adds	r0, #4
 8009df4:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8009df8:	4488      	add	r8, r1
 8009dfa:	e79c      	b.n	8009d36 <D24_1CH_HTONS_VOL_HP+0x46>
 8009dfc:	4614      	mov	r4, r2
 8009dfe:	462b      	mov	r3, r5
 8009e00:	9a07      	ldr	r2, [sp, #28]
 8009e02:	2000      	movs	r0, #0
 8009e04:	61d3      	str	r3, [r2, #28]
 8009e06:	9b06      	ldr	r3, [sp, #24]
 8009e08:	f8c2 c008 	str.w	ip, [r2, #8]
 8009e0c:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009e10:	6193      	str	r3, [r2, #24]
 8009e12:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009e16:	b009      	add	sp, #36	; 0x24
 8009e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1c:	4651      	mov	r1, sl
 8009e1e:	e7f0      	b.n	8009e02 <D24_1CH_HTONS_VOL_HP+0x112>
 8009e20:	24000000 	.word	0x24000000
 8009e24:	00030001 	.word	0x00030001
 8009e28:	00060007 	.word	0x00060007

08009e2c <D32_1CH_HTONS_VOL_HP>:
 8009e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	6993      	ldr	r3, [r2, #24]
 8009e32:	b087      	sub	sp, #28
 8009e34:	4683      	mov	fp, r0
 8009e36:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	69d5      	ldr	r5, [r2, #28]
 8009e3c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009e3e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8009e42:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8009e46:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d077      	beq.n	8009f3e <D32_1CH_HTONS_VOL_HP+0x112>
 8009e4e:	460f      	mov	r7, r1
 8009e50:	46f1      	mov	r9, lr
 8009e52:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009e56:	f8cd 8000 	str.w	r8, [sp]
 8009e5a:	4e3a      	ldr	r6, [pc, #232]	; (8009f44 <D32_1CH_HTONS_VOL_HP+0x118>)
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	46a0      	mov	r8, r4
 8009e60:	9103      	str	r1, [sp, #12]
 8009e62:	9205      	str	r2, [sp, #20]
 8009e64:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009e68:	ba64      	rev16	r4, r4
 8009e6a:	b2e0      	uxtb	r0, r4
 8009e6c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009e70:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009e74:	0e24      	lsrs	r4, r4, #24
 8009e76:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8009e7a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009e7e:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8009e82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009e86:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8009e8a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8009e8e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009e92:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8009e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e9a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009e9e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009ea2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ea6:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8009eaa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8009eae:	4826      	ldr	r0, [pc, #152]	; (8009f48 <D32_1CH_HTONS_VOL_HP+0x11c>)
 8009eb0:	fb23 c400 	smlad	r4, r3, r0, ip
 8009eb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009eb8:	fb21 4402 	smlad	r4, r1, r2, r4
 8009ebc:	4823      	ldr	r0, [pc, #140]	; (8009f4c <D32_1CH_HTONS_VOL_HP+0x120>)
 8009ebe:	fb23 ec00 	smlad	ip, r3, r0, lr
 8009ec2:	4823      	ldr	r0, [pc, #140]	; (8009f50 <D32_1CH_HTONS_VOL_HP+0x124>)
 8009ec4:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009ec8:	2201      	movs	r2, #1
 8009eca:	fb23 f302 	smuad	r3, r3, r2
 8009ece:	4821      	ldr	r0, [pc, #132]	; (8009f54 <D32_1CH_HTONS_VOL_HP+0x128>)
 8009ed0:	fb21 3e00 	smlad	lr, r1, r0, r3
 8009ed4:	9b00      	ldr	r3, [sp, #0]
 8009ed6:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8009eda:	4423      	add	r3, r4
 8009edc:	eba3 0209 	sub.w	r2, r3, r9
 8009ee0:	46a1      	mov	r9, r4
 8009ee2:	17d1      	asrs	r1, r2, #31
 8009ee4:	fba2 230a 	umull	r2, r3, r2, sl
 8009ee8:	e9cd 2300 	strd	r2, r3, [sp]
 8009eec:	fb0a 3301 	mla	r3, sl, r1, r3
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ef6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009efa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009efe:	f143 0300 	adc.w	r3, r3, #0
 8009f02:	0399      	lsls	r1, r3, #14
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	fbc8 2301 	smlal	r2, r3, r8, r1
 8009f0e:	109b      	asrs	r3, r3, #2
 8009f10:	f303 030f 	ssat	r3, #16, r3
 8009f14:	f827 3b02 	strh.w	r3, [r7], #2
 8009f18:	9b03      	ldr	r3, [sp, #12]
 8009f1a:	429f      	cmp	r7, r3
 8009f1c:	d1a2      	bne.n	8009e64 <D32_1CH_HTONS_VOL_HP+0x38>
 8009f1e:	4673      	mov	r3, lr
 8009f20:	f8dd 8000 	ldr.w	r8, [sp]
 8009f24:	9a05      	ldr	r2, [sp, #20]
 8009f26:	6093      	str	r3, [r2, #8]
 8009f28:	2000      	movs	r0, #0
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009f30:	61d5      	str	r5, [r2, #28]
 8009f32:	6193      	str	r3, [r2, #24]
 8009f34:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8009f38:	b007      	add	sp, #28
 8009f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3e:	4674      	mov	r4, lr
 8009f40:	e7f1      	b.n	8009f26 <D32_1CH_HTONS_VOL_HP+0xfa>
 8009f42:	bf00      	nop
 8009f44:	24000000 	.word	0x24000000
 8009f48:	00060003 	.word	0x00060003
 8009f4c:	000a000c 	.word	0x000a000c
 8009f50:	000c000a 	.word	0x000c000a
 8009f54:	00030006 	.word	0x00030006

08009f58 <D48_1CH_HTONS_VOL_HP>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8009f5e:	b087      	sub	sp, #28
 8009f60:	6993      	ldr	r3, [r2, #24]
 8009f62:	9701      	str	r7, [sp, #4]
 8009f64:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009f66:	6a17      	ldr	r7, [r2, #32]
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	69d6      	ldr	r6, [r2, #28]
 8009f6c:	9702      	str	r7, [sp, #8]
 8009f6e:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 8009f72:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009f76:	2d00      	cmp	r5, #0
 8009f78:	f000 8093 	beq.w	800a0a2 <D48_1CH_HTONS_VOL_HP+0x14a>
 8009f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f80:	f1a1 0b02 	sub.w	fp, r1, #2
 8009f84:	46f2      	mov	sl, lr
 8009f86:	4f48      	ldr	r7, [pc, #288]	; (800a0a8 <D48_1CH_HTONS_VOL_HP+0x150>)
 8009f88:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8009f8c:	469e      	mov	lr, r3
 8009f8e:	9205      	str	r2, [sp, #20]
 8009f90:	9103      	str	r1, [sp, #12]
 8009f92:	e9d0 3200 	ldrd	r3, r2, [r0]
 8009f96:	3006      	adds	r0, #6
 8009f98:	ba5b      	rev16	r3, r3
 8009f9a:	fa92 f992 	rev16.w	r9, r2
 8009f9e:	b2dd      	uxtb	r5, r3
 8009fa0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009fa4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009fa8:	0e1b      	lsrs	r3, r3, #24
 8009faa:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8009fae:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009fb2:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8009fb6:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 8009fba:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8009fbe:	fa5f f289 	uxtb.w	r2, r9
 8009fc2:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8009fc6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8009fca:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009fce:	f3c6 0809 	ubfx	r8, r6, #0, #10
 8009fd2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009fd6:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 8009fda:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009fde:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8009fe2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009fe6:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8009fea:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8009fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ff2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8009ff6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009ffa:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8009ffe:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800a002:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a006:	4b29      	ldr	r3, [pc, #164]	; (800a0ac <D48_1CH_HTONS_VOL_HP+0x154>)
 800a008:	fb28 c103 	smlad	r1, r8, r3, ip
 800a00c:	4b28      	ldr	r3, [pc, #160]	; (800a0b0 <D48_1CH_HTONS_VOL_HP+0x158>)
 800a00e:	fb25 1103 	smlad	r1, r5, r3, r1
 800a012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a016:	fb22 1903 	smlad	r9, r2, r3, r1
 800a01a:	4b26      	ldr	r3, [pc, #152]	; (800a0b4 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a01c:	fb28 ec03 	smlad	ip, r8, r3, lr
 800a020:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a024:	fb25 cc03 	smlad	ip, r5, r3, ip
 800a028:	4b23      	ldr	r3, [pc, #140]	; (800a0b8 <D48_1CH_HTONS_VOL_HP+0x160>)
 800a02a:	fb22 cc03 	smlad	ip, r2, r3, ip
 800a02e:	2101      	movs	r1, #1
 800a030:	fb28 f801 	smuad	r8, r8, r1
 800a034:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <D48_1CH_HTONS_VOL_HP+0x164>)
 800a036:	fb25 8503 	smlad	r5, r5, r3, r8
 800a03a:	4b21      	ldr	r3, [pc, #132]	; (800a0c0 <D48_1CH_HTONS_VOL_HP+0x168>)
 800a03c:	fb22 5e03 	smlad	lr, r2, r3, r5
 800a040:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800a044:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a048:	190a      	adds	r2, r1, r4
 800a04a:	9c02      	ldr	r4, [sp, #8]
 800a04c:	eba2 020a 	sub.w	r2, r2, sl
 800a050:	468a      	mov	sl, r1
 800a052:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a056:	fba2 2304 	umull	r2, r3, r2, r4
 800a05a:	fb04 3309 	mla	r3, r4, r9, r3
 800a05e:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a062:	f04f 0900 	mov.w	r9, #0
 800a066:	f143 0500 	adc.w	r5, r3, #0
 800a06a:	9b01      	ldr	r3, [sp, #4]
 800a06c:	032a      	lsls	r2, r5, #12
 800a06e:	006c      	lsls	r4, r5, #1
 800a070:	fbc3 8902 	smlal	r8, r9, r3, r2
 800a074:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800a078:	f303 030f 	ssat	r3, #16, r3
 800a07c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800a080:	9b03      	ldr	r3, [sp, #12]
 800a082:	4283      	cmp	r3, r0
 800a084:	d185      	bne.n	8009f92 <D48_1CH_HTONS_VOL_HP+0x3a>
 800a086:	4673      	mov	r3, lr
 800a088:	9a05      	ldr	r2, [sp, #20]
 800a08a:	6093      	str	r3, [r2, #8]
 800a08c:	2000      	movs	r0, #0
 800a08e:	9b04      	ldr	r3, [sp, #16]
 800a090:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a094:	61d6      	str	r6, [r2, #28]
 800a096:	6193      	str	r3, [r2, #24]
 800a098:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800a09c:	b007      	add	sp, #28
 800a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a2:	4671      	mov	r1, lr
 800a0a4:	e7f1      	b.n	800a08a <D48_1CH_HTONS_VOL_HP+0x132>
 800a0a6:	bf00      	nop
 800a0a8:	24000000 	.word	0x24000000
 800a0ac:	000f000a 	.word	0x000f000a
 800a0b0:	00060003 	.word	0x00060003
 800a0b4:	00150019 	.word	0x00150019
 800a0b8:	00190015 	.word	0x00190015
 800a0bc:	00030006 	.word	0x00030006
 800a0c0:	000a000f 	.word	0x000a000f

0800a0c4 <D64_1CH_HTONS_VOL_HP>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a0ca:	b089      	sub	sp, #36	; 0x24
 800a0cc:	6993      	ldr	r3, [r2, #24]
 800a0ce:	4686      	mov	lr, r0
 800a0d0:	9503      	str	r5, [sp, #12]
 800a0d2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800a0d4:	6a15      	ldr	r5, [r2, #32]
 800a0d6:	9306      	str	r3, [sp, #24]
 800a0d8:	69d6      	ldr	r6, [r2, #28]
 800a0da:	9504      	str	r5, [sp, #16]
 800a0dc:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800a0e0:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f000 80a4 	beq.w	800a232 <D64_1CH_HTONS_VOL_HP+0x16e>
 800a0ea:	460f      	mov	r7, r1
 800a0ec:	46f1      	mov	r9, lr
 800a0ee:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800a0f2:	4d56      	ldr	r5, [pc, #344]	; (800a24c <D64_1CH_HTONS_VOL_HP+0x188>)
 800a0f4:	46a2      	mov	sl, r4
 800a0f6:	469e      	mov	lr, r3
 800a0f8:	9105      	str	r1, [sp, #20]
 800a0fa:	9207      	str	r2, [sp, #28]
 800a0fc:	f859 1b08 	ldr.w	r1, [r9], #8
 800a100:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800a104:	ba49      	rev16	r1, r1
 800a106:	fa93 fb93 	rev16.w	fp, r3
 800a10a:	b2cb      	uxtb	r3, r1
 800a10c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a110:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800a114:	0e09      	lsrs	r1, r1, #24
 800a116:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800a11a:	fa5f f38b 	uxtb.w	r3, fp
 800a11e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a122:	4426      	add	r6, r4
 800a124:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 800a128:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a12c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a130:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a134:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a138:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800a13c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a140:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a144:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a148:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800a14c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a150:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800a154:	f3cb 4607 	ubfx	r6, fp, #16, #8
 800a158:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 800a15c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a160:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a164:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800a168:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800a16c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a170:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800a174:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a178:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800a17c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a180:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800a184:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800a188:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a18c:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800a190:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800a194:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 800a198:	482d      	ldr	r0, [pc, #180]	; (800a250 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800a19a:	fb22 cc00 	smlad	ip, r2, r0, ip
 800a19e:	482d      	ldr	r0, [pc, #180]	; (800a254 <D64_1CH_HTONS_VOL_HP+0x190>)
 800a1a0:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a1a4:	482c      	ldr	r0, [pc, #176]	; (800a258 <D64_1CH_HTONS_VOL_HP+0x194>)
 800a1a6:	fb23 cc00 	smlad	ip, r3, r0, ip
 800a1aa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a1ae:	fb2b c404 	smlad	r4, fp, r4, ip
 800a1b2:	482a      	ldr	r0, [pc, #168]	; (800a25c <D64_1CH_HTONS_VOL_HP+0x198>)
 800a1b4:	fb22 ec00 	smlad	ip, r2, r0, lr
 800a1b8:	fb2b cc10 	smladx	ip, fp, r0, ip
 800a1bc:	4828      	ldr	r0, [pc, #160]	; (800a260 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a1be:	fb21 cc00 	smlad	ip, r1, r0, ip
 800a1c2:	fb23 cc10 	smladx	ip, r3, r0, ip
 800a1c6:	f04f 0e01 	mov.w	lr, #1
 800a1ca:	fb22 f20e 	smuad	r2, r2, lr
 800a1ce:	4825      	ldr	r0, [pc, #148]	; (800a264 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a1d0:	fb21 2100 	smlad	r1, r1, r0, r2
 800a1d4:	4a24      	ldr	r2, [pc, #144]	; (800a268 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a1d6:	fb23 1302 	smlad	r3, r3, r2, r1
 800a1da:	4a24      	ldr	r2, [pc, #144]	; (800a26c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a1dc:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800a1e0:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 800a1e4:	eb04 0208 	add.w	r2, r4, r8
 800a1e8:	eba2 020a 	sub.w	r2, r2, sl
 800a1ec:	46a2      	mov	sl, r4
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	17d1      	asrs	r1, r2, #31
 800a1f2:	e9cd 0100 	strd	r0, r1, [sp]
 800a1f6:	9904      	ldr	r1, [sp, #16]
 800a1f8:	9801      	ldr	r0, [sp, #4]
 800a1fa:	fba2 2301 	umull	r2, r3, r2, r1
 800a1fe:	fb01 3300 	mla	r3, r1, r0, r3
 800a202:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800a206:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a20a:	f143 0100 	adc.w	r1, r3, #0
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	02ca      	lsls	r2, r1, #11
 800a212:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800a216:	2100      	movs	r1, #0
 800a218:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a21c:	108b      	asrs	r3, r1, #2
 800a21e:	f303 030f 	ssat	r3, #16, r3
 800a222:	f827 3b02 	strh.w	r3, [r7], #2
 800a226:	9b05      	ldr	r3, [sp, #20]
 800a228:	429f      	cmp	r7, r3
 800a22a:	f47f af67 	bne.w	800a0fc <D64_1CH_HTONS_VOL_HP+0x38>
 800a22e:	4673      	mov	r3, lr
 800a230:	9a07      	ldr	r2, [sp, #28]
 800a232:	6093      	str	r3, [r2, #8]
 800a234:	2000      	movs	r0, #0
 800a236:	9b06      	ldr	r3, [sp, #24]
 800a238:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a23c:	61d6      	str	r6, [r2, #28]
 800a23e:	6193      	str	r3, [r2, #24]
 800a240:	e9c2 8404 	strd	r8, r4, [r2, #16]
 800a244:	b009      	add	sp, #36	; 0x24
 800a246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24a:	bf00      	nop
 800a24c:	24000000 	.word	0x24000000
 800a250:	001c0015 	.word	0x001c0015
 800a254:	000f000a 	.word	0x000f000a
 800a258:	00060003 	.word	0x00060003
 800a25c:	0024002a 	.word	0x0024002a
 800a260:	002e0030 	.word	0x002e0030
 800a264:	00030006 	.word	0x00030006
 800a268:	000a000f 	.word	0x000a000f
 800a26c:	0015001c 	.word	0x0015001c

0800a270 <D80_1CH_HTONS_VOL_HP>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	6913      	ldr	r3, [r2, #16]
 800a276:	b089      	sub	sp, #36	; 0x24
 800a278:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	9603      	str	r6, [sp, #12]
 800a27e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a280:	6a16      	ldr	r6, [r2, #32]
 800a282:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 800a286:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 800a28a:	9306      	str	r3, [sp, #24]
 800a28c:	9604      	str	r6, [sp, #16]
 800a28e:	69d3      	ldr	r3, [r2, #28]
 800a290:	2c00      	cmp	r4, #0
 800a292:	f000 80ce 	beq.w	800a432 <D80_1CH_HTONS_VOL_HP+0x1c2>
 800a296:	3902      	subs	r1, #2
 800a298:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a29c:	4e66      	ldr	r6, [pc, #408]	; (800a438 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800a29e:	469e      	mov	lr, r3
 800a2a0:	9102      	str	r1, [sp, #8]
 800a2a2:	46aa      	mov	sl, r5
 800a2a4:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 800a2a8:	9207      	str	r2, [sp, #28]
 800a2aa:	9105      	str	r1, [sp, #20]
 800a2ac:	6883      	ldr	r3, [r0, #8]
 800a2ae:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a2b2:	300a      	adds	r0, #10
 800a2b4:	ba64      	rev16	r4, r4
 800a2b6:	ba52      	rev16	r2, r2
 800a2b8:	fa93 fb93 	rev16.w	fp, r3
 800a2bc:	b2e5      	uxtb	r5, r4
 800a2be:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800a2c2:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800a2c6:	0e24      	lsrs	r4, r4, #24
 800a2c8:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800a2cc:	b2d5      	uxtb	r5, r2
 800a2ce:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a2d2:	44c6      	add	lr, r8
 800a2d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a2d8:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 800a2dc:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800a2e0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a2e4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a2e8:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 800a2ec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a2f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2f4:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 800a2f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800a2fc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800a300:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800a304:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 800a308:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800a30c:	0e12      	lsrs	r2, r2, #24
 800a30e:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800a312:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800a316:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800a31a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a31e:	fa5f fb8b 	uxtb.w	fp, fp
 800a322:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800a326:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a32a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800a32e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a332:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800a336:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a33a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a33e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 800a342:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800a346:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a34a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a34e:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 800a352:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a356:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800a35a:	f3ce 0109 	ubfx	r1, lr, #0, #10
 800a35e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800a362:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800a366:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800a36a:	4934      	ldr	r1, [pc, #208]	; (800a43c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800a36c:	fb23 cc01 	smlad	ip, r3, r1, ip
 800a370:	4933      	ldr	r1, [pc, #204]	; (800a440 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800a372:	fb24 cc01 	smlad	ip, r4, r1, ip
 800a376:	4933      	ldr	r1, [pc, #204]	; (800a444 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800a378:	fb28 cc01 	smlad	ip, r8, r1, ip
 800a37c:	4932      	ldr	r1, [pc, #200]	; (800a448 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800a37e:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a382:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a386:	fb2b c901 	smlad	r9, fp, r1, ip
 800a38a:	4930      	ldr	r1, [pc, #192]	; (800a44c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800a38c:	fb23 7701 	smlad	r7, r3, r1, r7
 800a390:	492f      	ldr	r1, [pc, #188]	; (800a450 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a392:	fb24 7701 	smlad	r7, r4, r1, r7
 800a396:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 800a39a:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800a39e:	492d      	ldr	r1, [pc, #180]	; (800a454 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a3a0:	fb22 cc01 	smlad	ip, r2, r1, ip
 800a3a4:	492c      	ldr	r1, [pc, #176]	; (800a458 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a3a6:	fb2b cc01 	smlad	ip, fp, r1, ip
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	fb23 f301 	smuad	r3, r3, r1
 800a3b0:	492a      	ldr	r1, [pc, #168]	; (800a45c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a3b2:	fb24 3401 	smlad	r4, r4, r1, r3
 800a3b6:	492a      	ldr	r1, [pc, #168]	; (800a460 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a3b8:	fb28 4101 	smlad	r1, r8, r1, r4
 800a3bc:	4f29      	ldr	r7, [pc, #164]	; (800a464 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a3be:	fb22 1207 	smlad	r2, r2, r7, r1
 800a3c2:	4f29      	ldr	r7, [pc, #164]	; (800a468 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a3c4:	fb2b 2707 	smlad	r7, fp, r7, r2
 800a3c8:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 800a3cc:	9b01      	ldr	r3, [sp, #4]
 800a3ce:	9c04      	ldr	r4, [sp, #16]
 800a3d0:	440b      	add	r3, r1
 800a3d2:	eba3 020a 	sub.w	r2, r3, sl
 800a3d6:	468a      	mov	sl, r1
 800a3d8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a3dc:	fba2 2304 	umull	r2, r3, r2, r4
 800a3e0:	fb04 3309 	mla	r3, r4, r9, r3
 800a3e4:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800a3e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a3ec:	f143 0500 	adc.w	r5, r3, #0
 800a3f0:	006b      	lsls	r3, r5, #1
 800a3f2:	02aa      	lsls	r2, r5, #10
 800a3f4:	2500      	movs	r5, #0
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	9b03      	ldr	r3, [sp, #12]
 800a3fa:	fbc3 4502 	smlal	r4, r5, r3, r2
 800a3fe:	9a02      	ldr	r2, [sp, #8]
 800a400:	10ab      	asrs	r3, r5, #2
 800a402:	f303 030f 	ssat	r3, #16, r3
 800a406:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a40a:	9b05      	ldr	r3, [sp, #20]
 800a40c:	9202      	str	r2, [sp, #8]
 800a40e:	4298      	cmp	r0, r3
 800a410:	f47f af4c 	bne.w	800a2ac <D80_1CH_HTONS_VOL_HP+0x3c>
 800a414:	4673      	mov	r3, lr
 800a416:	9a07      	ldr	r2, [sp, #28]
 800a418:	61d3      	str	r3, [r2, #28]
 800a41a:	2000      	movs	r0, #0
 800a41c:	9b01      	ldr	r3, [sp, #4]
 800a41e:	6097      	str	r7, [r2, #8]
 800a420:	f8c2 c00c 	str.w	ip, [r2, #12]
 800a424:	e9c2 3104 	strd	r3, r1, [r2, #16]
 800a428:	9b06      	ldr	r3, [sp, #24]
 800a42a:	6193      	str	r3, [r2, #24]
 800a42c:	b009      	add	sp, #36	; 0x24
 800a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a432:	4629      	mov	r1, r5
 800a434:	e7f0      	b.n	800a418 <D80_1CH_HTONS_VOL_HP+0x1a8>
 800a436:	bf00      	nop
 800a438:	24000000 	.word	0x24000000
 800a43c:	002d0024 	.word	0x002d0024
 800a440:	001c0015 	.word	0x001c0015
 800a444:	000f000a 	.word	0x000f000a
 800a448:	00060003 	.word	0x00060003
 800a44c:	0037003f 	.word	0x0037003f
 800a450:	00450049 	.word	0x00450049
 800a454:	00490045 	.word	0x00490045
 800a458:	003f0037 	.word	0x003f0037
 800a45c:	00030006 	.word	0x00030006
 800a460:	000a000f 	.word	0x000a000f
 800a464:	0015001c 	.word	0x0015001c
 800a468:	0024002d 	.word	0x0024002d

0800a46c <D128_1CH_HTONS_VOL_HP>:
 800a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	6914      	ldr	r4, [r2, #16]
 800a472:	b08d      	sub	sp, #52	; 0x34
 800a474:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a476:	9404      	str	r4, [sp, #16]
 800a478:	6954      	ldr	r4, [r2, #20]
 800a47a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a47c:	9405      	str	r4, [sp, #20]
 800a47e:	6994      	ldr	r4, [r2, #24]
 800a480:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 800a484:	940a      	str	r4, [sp, #40]	; 0x28
 800a486:	6894      	ldr	r4, [r2, #8]
 800a488:	9403      	str	r4, [sp, #12]
 800a48a:	68d4      	ldr	r4, [r2, #12]
 800a48c:	9402      	str	r4, [sp, #8]
 800a48e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a490:	6a12      	ldr	r2, [r2, #32]
 800a492:	9407      	str	r4, [sp, #28]
 800a494:	9208      	str	r2, [sp, #32]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 812e 	beq.w	800a6f8 <D128_1CH_HTONS_VOL_HP+0x28c>
 800a49c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a4a0:	f100 0b10 	add.w	fp, r0, #16
 800a4a4:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800a738 <D128_1CH_HTONS_VOL_HP+0x2cc>
 800a4a8:	9106      	str	r1, [sp, #24]
 800a4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ac:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 800a4b0:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 800a4b4:	ba40      	rev16	r0, r0
 800a4b6:	ba52      	rev16	r2, r2
 800a4b8:	ba5b      	rev16	r3, r3
 800a4ba:	ba76      	rev16	r6, r6
 800a4bc:	b2c5      	uxtb	r5, r0
 800a4be:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a4c2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a4c6:	0e00      	lsrs	r0, r0, #24
 800a4c8:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800a4cc:	b2d5      	uxtb	r5, r2
 800a4ce:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800a4d2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a4d6:	44bc      	add	ip, r7
 800a4d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a4dc:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 800a4e0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800a4e4:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800a4e8:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800a4ec:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800a4f0:	0e12      	lsrs	r2, r2, #24
 800a4f2:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800a4f6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800a4fa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a4fe:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a502:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a506:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800a50a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 800a514:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a518:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800a51c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800a520:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800a524:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a528:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800a52c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a530:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 800a534:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a538:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800a53c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800a540:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a544:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a548:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800a54c:	0e1b      	lsrs	r3, r3, #24
 800a54e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a552:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a556:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800a55a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800a55e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800a562:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a566:	b2f3      	uxtb	r3, r6
 800a568:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800a56c:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800a570:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a574:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800a578:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a57c:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 800a580:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a584:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a588:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800a58c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 800a590:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800a594:	0e36      	lsrs	r6, r6, #24
 800a596:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800a59a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a59e:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 800a5a2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a5a6:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 800a5aa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a5ae:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 800a5b2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800a5b6:	9101      	str	r1, [sp, #4]
 800a5b8:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800a5bc:	9b02      	ldr	r3, [sp, #8]
 800a5be:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800a5c2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	f3cc 0209 	ubfx	r2, ip, #0, #10
 800a5cc:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 800a5d0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a5d4:	4a49      	ldr	r2, [pc, #292]	; (800a6fc <D128_1CH_HTONS_VOL_HP+0x290>)
 800a5d6:	fb2e 3202 	smlad	r2, lr, r2, r3
 800a5da:	4b49      	ldr	r3, [pc, #292]	; (800a700 <D128_1CH_HTONS_VOL_HP+0x294>)
 800a5dc:	fb27 2203 	smlad	r2, r7, r3, r2
 800a5e0:	4b48      	ldr	r3, [pc, #288]	; (800a704 <D128_1CH_HTONS_VOL_HP+0x298>)
 800a5e2:	fb25 2203 	smlad	r2, r5, r3, r2
 800a5e6:	4b48      	ldr	r3, [pc, #288]	; (800a708 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800a5e8:	fb24 2203 	smlad	r2, r4, r3, r2
 800a5ec:	4b47      	ldr	r3, [pc, #284]	; (800a70c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800a5ee:	fb20 2803 	smlad	r8, r0, r3, r2
 800a5f2:	4b47      	ldr	r3, [pc, #284]	; (800a710 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800a5f4:	9a01      	ldr	r2, [sp, #4]
 800a5f6:	fb22 8203 	smlad	r2, r2, r3, r8
 800a5fa:	4b46      	ldr	r3, [pc, #280]	; (800a714 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800a5fc:	9102      	str	r1, [sp, #8]
 800a5fe:	fb21 2203 	smlad	r2, r1, r3, r2
 800a602:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800a606:	fb26 2308 	smlad	r3, r6, r8, r2
 800a60a:	4619      	mov	r1, r3
 800a60c:	9a03      	ldr	r2, [sp, #12]
 800a60e:	4b42      	ldr	r3, [pc, #264]	; (800a718 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800a610:	fb2e 2803 	smlad	r8, lr, r3, r2
 800a614:	4b41      	ldr	r3, [pc, #260]	; (800a71c <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800a616:	fb27 8a03 	smlad	sl, r7, r3, r8
 800a61a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a73c <D128_1CH_HTONS_VOL_HP+0x2d0>
 800a61e:	fb25 a808 	smlad	r8, r5, r8, sl
 800a622:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800a740 <D128_1CH_HTONS_VOL_HP+0x2d4>
 800a626:	fb24 880a 	smlad	r8, r4, sl, r8
 800a62a:	f8df a118 	ldr.w	sl, [pc, #280]	; 800a744 <D128_1CH_HTONS_VOL_HP+0x2d8>
 800a62e:	fb20 8a0a 	smlad	sl, r0, sl, r8
 800a632:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800a748 <D128_1CH_HTONS_VOL_HP+0x2dc>
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	fb23 aa08 	smlad	sl, r3, r8, sl
 800a63c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800a74c <D128_1CH_HTONS_VOL_HP+0x2e0>
 800a640:	9a02      	ldr	r2, [sp, #8]
 800a642:	fb22 a808 	smlad	r8, r2, r8, sl
 800a646:	f8df a108 	ldr.w	sl, [pc, #264]	; 800a750 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800a64a:	fb26 830a 	smlad	r3, r6, sl, r8
 800a64e:	f04f 0801 	mov.w	r8, #1
 800a652:	9302      	str	r3, [sp, #8]
 800a654:	fb2e fe08 	smuad	lr, lr, r8
 800a658:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a754 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800a65c:	fb27 ee08 	smlad	lr, r7, r8, lr
 800a660:	4f2f      	ldr	r7, [pc, #188]	; (800a720 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800a662:	fb25 ee07 	smlad	lr, r5, r7, lr
 800a666:	4f2f      	ldr	r7, [pc, #188]	; (800a724 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800a668:	fb24 ee07 	smlad	lr, r4, r7, lr
 800a66c:	4f2e      	ldr	r7, [pc, #184]	; (800a728 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800a66e:	fb20 ee07 	smlad	lr, r0, r7, lr
 800a672:	4f2e      	ldr	r7, [pc, #184]	; (800a72c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800a674:	9b01      	ldr	r3, [sp, #4]
 800a676:	fb23 ee07 	smlad	lr, r3, r7, lr
 800a67a:	4f2d      	ldr	r7, [pc, #180]	; (800a730 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800a67c:	fb22 e707 	smlad	r7, r2, r7, lr
 800a680:	4b2c      	ldr	r3, [pc, #176]	; (800a734 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800a682:	fb26 7303 	smlad	r3, r6, r3, r7
 800a686:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 800a68a:	9303      	str	r3, [sp, #12]
 800a68c:	9b04      	ldr	r3, [sp, #16]
 800a68e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a692:	9f08      	ldr	r7, [sp, #32]
 800a694:	2100      	movs	r1, #0
 800a696:	4433      	add	r3, r6
 800a698:	f10b 0b10 	add.w	fp, fp, #16
 800a69c:	461a      	mov	r2, r3
 800a69e:	9b05      	ldr	r3, [sp, #20]
 800a6a0:	9605      	str	r6, [sp, #20]
 800a6a2:	1ad2      	subs	r2, r2, r3
 800a6a4:	17d5      	asrs	r5, r2, #31
 800a6a6:	fba2 2307 	umull	r2, r3, r2, r7
 800a6aa:	1814      	adds	r4, r2, r0
 800a6ac:	fb07 3305 	mla	r3, r7, r5, r3
 800a6b0:	eb43 0501 	adc.w	r5, r3, r1
 800a6b4:	006b      	lsls	r3, r5, #1
 800a6b6:	022a      	lsls	r2, r5, #8
 800a6b8:	9304      	str	r3, [sp, #16]
 800a6ba:	9b07      	ldr	r3, [sp, #28]
 800a6bc:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a6c0:	9a06      	ldr	r2, [sp, #24]
 800a6c2:	108b      	asrs	r3, r1, #2
 800a6c4:	f303 030f 	ssat	r3, #16, r3
 800a6c8:	f822 3b02 	strh.w	r3, [r2], #2
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	9206      	str	r2, [sp, #24]
 800a6d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	f47f aeea 	bne.w	800a4ac <D128_1CH_HTONS_VOL_HP+0x40>
 800a6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6da:	2000      	movs	r0, #0
 800a6dc:	9903      	ldr	r1, [sp, #12]
 800a6de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6e0:	6099      	str	r1, [r3, #8]
 800a6e2:	9902      	ldr	r1, [sp, #8]
 800a6e4:	f8c3 c01c 	str.w	ip, [r3, #28]
 800a6e8:	60d9      	str	r1, [r3, #12]
 800a6ea:	9904      	ldr	r1, [sp, #16]
 800a6ec:	619a      	str	r2, [r3, #24]
 800a6ee:	e9c3 1604 	strd	r1, r6, [r3, #16]
 800a6f2:	b00d      	add	sp, #52	; 0x34
 800a6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f8:	9e05      	ldr	r6, [sp, #20]
 800a6fa:	e7ed      	b.n	800a6d8 <D128_1CH_HTONS_VOL_HP+0x26c>
 800a6fc:	00780069 	.word	0x00780069
 800a700:	005b004e 	.word	0x005b004e
 800a704:	00420037 	.word	0x00420037
 800a708:	002d0024 	.word	0x002d0024
 800a70c:	001c0015 	.word	0x001c0015
 800a710:	000f000a 	.word	0x000f000a
 800a714:	00060003 	.word	0x00060003
 800a718:	00880096 	.word	0x00880096
 800a71c:	00a200ac 	.word	0x00a200ac
 800a720:	000a000f 	.word	0x000a000f
 800a724:	0015001c 	.word	0x0015001c
 800a728:	0024002d 	.word	0x0024002d
 800a72c:	00370042 	.word	0x00370042
 800a730:	004e005b 	.word	0x004e005b
 800a734:	00690078 	.word	0x00690078
 800a738:	24000000 	.word	0x24000000
 800a73c:	00b400ba 	.word	0x00b400ba
 800a740:	00be00c0 	.word	0x00be00c0
 800a744:	00c000be 	.word	0x00c000be
 800a748:	00ba00b4 	.word	0x00ba00b4
 800a74c:	00ac00a2 	.word	0x00ac00a2
 800a750:	00960088 	.word	0x00960088
 800a754:	00030006 	.word	0x00030006

0800a758 <PDM_Filter_Init>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	2240      	movs	r2, #64	; 0x40
 800a75c:	2100      	movs	r1, #0
 800a75e:	4604      	mov	r4, r0
 800a760:	300c      	adds	r0, #12
 800a762:	f000 fa07 	bl	800ab74 <memset>
 800a766:	4a56      	ldr	r2, [pc, #344]	; (800a8c0 <PDM_Filter_Init+0x168>)
 800a768:	4856      	ldr	r0, [pc, #344]	; (800a8c4 <PDM_Filter_Init+0x16c>)
 800a76a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800a76e:	6813      	ldr	r3, [r2, #0]
 800a770:	f24c 2540 	movw	r5, #49728	; 0xc240
 800a774:	f023 0301 	bic.w	r3, r3, #1
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	6803      	ldr	r3, [r0, #0]
 800a77c:	400b      	ands	r3, r1
 800a77e:	42ab      	cmp	r3, r5
 800a780:	d040      	beq.n	800a804 <PDM_Filter_Init+0xac>
 800a782:	6803      	ldr	r3, [r0, #0]
 800a784:	f24c 2270 	movw	r2, #49776	; 0xc270
 800a788:	4019      	ands	r1, r3
 800a78a:	4291      	cmp	r1, r2
 800a78c:	d03a      	beq.n	800a804 <PDM_Filter_Init+0xac>
 800a78e:	4b4e      	ldr	r3, [pc, #312]	; (800a8c8 <PDM_Filter_Init+0x170>)
 800a790:	2101      	movs	r1, #1
 800a792:	461a      	mov	r2, r3
 800a794:	6019      	str	r1, [r3, #0]
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1fc      	bne.n	800a796 <PDM_Filter_Init+0x3e>
 800a79c:	4b4b      	ldr	r3, [pc, #300]	; (800a8cc <PDM_Filter_Init+0x174>)
 800a79e:	494c      	ldr	r1, [pc, #304]	; (800a8d0 <PDM_Filter_Init+0x178>)
 800a7a0:	4a4c      	ldr	r2, [pc, #304]	; (800a8d4 <PDM_Filter_Init+0x17c>)
 800a7a2:	6019      	str	r1, [r3, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	8820      	ldrh	r0, [r4, #0]
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	8961      	ldrh	r1, [r4, #10]
 800a7ac:	f04f 0300 	mov.w	r3, #0
 800a7b0:	8922      	ldrh	r2, [r4, #8]
 800a7b2:	bf14      	ite	ne
 800a7b4:	2500      	movne	r5, #0
 800a7b6:	4d47      	ldreq	r5, [pc, #284]	; (800a8d4 <PDM_Filter_Init+0x17c>)
 800a7b8:	2801      	cmp	r0, #1
 800a7ba:	61a3      	str	r3, [r4, #24]
 800a7bc:	6465      	str	r5, [r4, #68]	; 0x44
 800a7be:	60e3      	str	r3, [r4, #12]
 800a7c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a7c2:	6423      	str	r3, [r4, #64]	; 0x40
 800a7c4:	86a1      	strh	r1, [r4, #52]	; 0x34
 800a7c6:	86e2      	strh	r2, [r4, #54]	; 0x36
 800a7c8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800a7cc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a7d0:	d936      	bls.n	800a840 <PDM_Filter_Init+0xe8>
 800a7d2:	2003      	movs	r0, #3
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	8862      	ldrh	r2, [r4, #2]
 800a7d8:	2a01      	cmp	r2, #1
 800a7da:	d92e      	bls.n	800a83a <PDM_Filter_Init+0xe2>
 800a7dc:	2140      	movs	r1, #64	; 0x40
 800a7de:	2300      	movs	r3, #0
 800a7e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a7e2:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800a7e6:	d101      	bne.n	800a7ec <PDM_Filter_Init+0x94>
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	6421      	str	r1, [r4, #64]	; 0x40
 800a7ec:	6862      	ldr	r2, [r4, #4]
 800a7ee:	b11a      	cbz	r2, 800a7f8 <PDM_Filter_Init+0xa0>
 800a7f0:	f043 0310 	orr.w	r3, r3, #16
 800a7f4:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a7f6:	6423      	str	r3, [r4, #64]	; 0x40
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	8722      	strh	r2, [r4, #56]	; 0x38
 800a7fc:	b908      	cbnz	r0, 800a802 <PDM_Filter_Init+0xaa>
 800a7fe:	3380      	adds	r3, #128	; 0x80
 800a800:	6423      	str	r3, [r4, #64]	; 0x40
 800a802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a804:	4b34      	ldr	r3, [pc, #208]	; (800a8d8 <PDM_Filter_Init+0x180>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1c0      	bne.n	800a78e <PDM_Filter_Init+0x36>
 800a80c:	4a33      	ldr	r2, [pc, #204]	; (800a8dc <PDM_Filter_Init+0x184>)
 800a80e:	6813      	ldr	r3, [r2, #0]
 800a810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a814:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a818:	d006      	beq.n	800a828 <PDM_Filter_Init+0xd0>
 800a81a:	6813      	ldr	r3, [r2, #0]
 800a81c:	f240 4283 	movw	r2, #1155	; 0x483
 800a820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a824:	4293      	cmp	r3, r2
 800a826:	d1b2      	bne.n	800a78e <PDM_Filter_Init+0x36>
 800a828:	4b2d      	ldr	r3, [pc, #180]	; (800a8e0 <PDM_Filter_Init+0x188>)
 800a82a:	2101      	movs	r1, #1
 800a82c:	461a      	mov	r2, r3
 800a82e:	6019      	str	r1, [r3, #0]
 800a830:	6813      	ldr	r3, [r2, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1fc      	bne.n	800a830 <PDM_Filter_Init+0xd8>
 800a836:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <PDM_Filter_Init+0x18c>)
 800a838:	e7b1      	b.n	800a79e <PDM_Filter_Init+0x46>
 800a83a:	d03a      	beq.n	800a8b2 <PDM_Filter_Init+0x15a>
 800a83c:	4618      	mov	r0, r3
 800a83e:	e7cd      	b.n	800a7dc <PDM_Filter_Init+0x84>
 800a840:	4d29      	ldr	r5, [pc, #164]	; (800a8e8 <PDM_Filter_Init+0x190>)
 800a842:	782a      	ldrb	r2, [r5, #0]
 800a844:	d01b      	beq.n	800a87e <PDM_Filter_Init+0x126>
 800a846:	2a01      	cmp	r2, #1
 800a848:	d001      	beq.n	800a84e <PDM_Filter_Init+0xf6>
 800a84a:	2001      	movs	r0, #1
 800a84c:	e7c3      	b.n	800a7d6 <PDM_Filter_Init+0x7e>
 800a84e:	4927      	ldr	r1, [pc, #156]	; (800a8ec <PDM_Filter_Init+0x194>)
 800a850:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800a8f4 <PDM_Filter_Init+0x19c>
 800a854:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a858:	4e25      	ldr	r6, [pc, #148]	; (800a8f0 <PDM_Filter_Init+0x198>)
 800a85a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a85e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a862:	ea02 0006 	and.w	r0, r2, r6
 800a866:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a86a:	428f      	cmp	r7, r1
 800a86c:	ea43 0300 	orr.w	r3, r3, r0
 800a870:	4413      	add	r3, r2
 800a872:	600b      	str	r3, [r1, #0]
 800a874:	d1f1      	bne.n	800a85a <PDM_Filter_Init+0x102>
 800a876:	2300      	movs	r3, #0
 800a878:	2001      	movs	r0, #1
 800a87a:	702b      	strb	r3, [r5, #0]
 800a87c:	e7ab      	b.n	800a7d6 <PDM_Filter_Init+0x7e>
 800a87e:	2a00      	cmp	r2, #0
 800a880:	d1a9      	bne.n	800a7d6 <PDM_Filter_Init+0x7e>
 800a882:	491a      	ldr	r1, [pc, #104]	; (800a8ec <PDM_Filter_Init+0x194>)
 800a884:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800a8f4 <PDM_Filter_Init+0x19c>
 800a888:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800a88c:	4e18      	ldr	r6, [pc, #96]	; (800a8f0 <PDM_Filter_Init+0x198>)
 800a88e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a892:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a896:	ea02 0006 	and.w	r0, r2, r6
 800a89a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a89e:	428f      	cmp	r7, r1
 800a8a0:	ea43 0300 	orr.w	r3, r3, r0
 800a8a4:	4413      	add	r3, r2
 800a8a6:	600b      	str	r3, [r1, #0]
 800a8a8:	d1f1      	bne.n	800a88e <PDM_Filter_Init+0x136>
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	7028      	strb	r0, [r5, #0]
 800a8b0:	e791      	b.n	800a7d6 <PDM_Filter_Init+0x7e>
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	2160      	movs	r1, #96	; 0x60
 800a8b8:	6422      	str	r2, [r4, #64]	; 0x40
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	e790      	b.n	800a7e0 <PDM_Filter_Init+0x88>
 800a8be:	bf00      	nop
 800a8c0:	e0002000 	.word	0xe0002000
 800a8c4:	e000ed00 	.word	0xe000ed00
 800a8c8:	40023008 	.word	0x40023008
 800a8cc:	40023000 	.word	0x40023000
 800a8d0:	f407a5c2 	.word	0xf407a5c2
 800a8d4:	b5e8b5cd 	.word	0xb5e8b5cd
 800a8d8:	e0042000 	.word	0xe0042000
 800a8dc:	5c001000 	.word	0x5c001000
 800a8e0:	58024c08 	.word	0x58024c08
 800a8e4:	58024c00 	.word	0x58024c00
 800a8e8:	24000490 	.word	0x24000490
 800a8ec:	23fffffc 	.word	0x23fffffc
 800a8f0:	000ffc00 	.word	0x000ffc00
 800a8f4:	3ff00000 	.word	0x3ff00000

0800a8f8 <PDM_Filter_setConfig>:
 800a8f8:	4b67      	ldr	r3, [pc, #412]	; (800aa98 <PDM_Filter_setConfig+0x1a0>)
 800a8fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d128      	bne.n	800a952 <PDM_Filter_setConfig+0x5a>
 800a900:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a902:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a904:	880e      	ldrh	r6, [r1, #0]
 800a906:	460d      	mov	r5, r1
 800a908:	4604      	mov	r4, r0
 800a90a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800a90e:	1e73      	subs	r3, r6, #1
 800a910:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800a914:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800a918:	2b06      	cmp	r3, #6
 800a91a:	ed2d 8b02 	vpush	{d8}
 800a91e:	6421      	str	r1, [r4, #64]	; 0x40
 800a920:	b083      	sub	sp, #12
 800a922:	d820      	bhi.n	800a966 <PDM_Filter_setConfig+0x6e>
 800a924:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a926:	42b3      	cmp	r3, r6
 800a928:	d03d      	beq.n	800a9a6 <PDM_Filter_setConfig+0xae>
 800a92a:	4b5c      	ldr	r3, [pc, #368]	; (800aa9c <PDM_Filter_setConfig+0x1a4>)
 800a92c:	4013      	ands	r3, r2
 800a92e:	4333      	orrs	r3, r6
 800a930:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a934:	6423      	str	r3, [r4, #64]	; 0x40
 800a936:	f003 030f 	and.w	r3, r3, #15
 800a93a:	2a70      	cmp	r2, #112	; 0x70
 800a93c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a940:	d009      	beq.n	800a956 <PDM_Filter_setConfig+0x5e>
 800a942:	2b06      	cmp	r3, #6
 800a944:	d824      	bhi.n	800a990 <PDM_Filter_setConfig+0x98>
 800a946:	e8df f003 	tbb	[pc, r3]
 800a94a:	878a      	.short	0x878a
 800a94c:	7b7e8184 	.word	0x7b7e8184
 800a950:	78          	.byte	0x78
 800a951:	00          	.byte	0x00
 800a952:	2004      	movs	r0, #4
 800a954:	4770      	bx	lr
 800a956:	2b06      	cmp	r3, #6
 800a958:	d81a      	bhi.n	800a990 <PDM_Filter_setConfig+0x98>
 800a95a:	e8df f003 	tbb	[pc, r3]
 800a95e:	8f92      	.short	0x8f92
 800a960:	8617898c 	.word	0x8617898c
 800a964:	83          	.byte	0x83
 800a965:	00          	.byte	0x00
 800a966:	4287      	cmp	r7, r0
 800a968:	f000 808e 	beq.w	800aa88 <PDM_Filter_setConfig+0x190>
 800a96c:	f117 0f0c 	cmn.w	r7, #12
 800a970:	f04f 0008 	mov.w	r0, #8
 800a974:	da11      	bge.n	800a99a <PDM_Filter_setConfig+0xa2>
 800a976:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800a97a:	3040      	adds	r0, #64	; 0x40
 800a97c:	80ab      	strh	r3, [r5, #4]
 800a97e:	886b      	ldrh	r3, [r5, #2]
 800a980:	8626      	strh	r6, [r4, #48]	; 0x30
 800a982:	8663      	strh	r3, [r4, #50]	; 0x32
 800a984:	b003      	add	sp, #12
 800a986:	ecbd 8b02 	vpop	{d8}
 800a98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a98c:	4b44      	ldr	r3, [pc, #272]	; (800aaa0 <PDM_Filter_setConfig+0x1a8>)
 800a98e:	64a3      	str	r3, [r4, #72]	; 0x48
 800a990:	f117 0f0c 	cmn.w	r7, #12
 800a994:	f04f 0000 	mov.w	r0, #0
 800a998:	dbed      	blt.n	800a976 <PDM_Filter_setConfig+0x7e>
 800a99a:	2f33      	cmp	r7, #51	; 0x33
 800a99c:	dd10      	ble.n	800a9c0 <PDM_Filter_setConfig+0xc8>
 800a99e:	2333      	movs	r3, #51	; 0x33
 800a9a0:	3040      	adds	r0, #64	; 0x40
 800a9a2:	80ab      	strh	r3, [r5, #4]
 800a9a4:	e7eb      	b.n	800a97e <PDM_Filter_setConfig+0x86>
 800a9a6:	4287      	cmp	r7, r0
 800a9a8:	d1f2      	bne.n	800a990 <PDM_Filter_setConfig+0x98>
 800a9aa:	886b      	ldrh	r3, [r5, #2]
 800a9ac:	8663      	strh	r3, [r4, #50]	; 0x32
 800a9ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9b6:	6423      	str	r3, [r4, #64]	; 0x40
 800a9b8:	b003      	add	sp, #12
 800a9ba:	ecbd 8b02 	vpop	{d8}
 800a9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	2b06      	cmp	r3, #6
 800a9ca:	d831      	bhi.n	800aa30 <PDM_Filter_setConfig+0x138>
 800a9cc:	4a35      	ldr	r2, [pc, #212]	; (800aaa4 <PDM_Filter_setConfig+0x1ac>)
 800a9ce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800a9d2:	eddf 0a35 	vldr	s1, [pc, #212]	; 800aaa8 <PDM_Filter_setConfig+0x1b0>
 800a9d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9da:	9001      	str	r0, [sp, #4]
 800a9dc:	edd3 7a07 	vldr	s15, [r3, #28]
 800a9e0:	ed93 8a00 	vldr	s16, [r3]
 800a9e4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a9e8:	f000 f8e6 	bl	800abb8 <powf>
 800a9ec:	eef0 8a40 	vmov.f32	s17, s0
 800a9f0:	9801      	ldr	r0, [sp, #4]
 800a9f2:	ee07 7a90 	vmov	s15, r7
 800a9f6:	ee28 8a28 	vmul.f32	s16, s16, s17
 800a9fa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800a9fe:	9001      	str	r0, [sp, #4]
 800aa00:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800aa04:	eddf 7a29 	vldr	s15, [pc, #164]	; 800aaac <PDM_Filter_setConfig+0x1b4>
 800aa08:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800aa0c:	f000 f8d4 	bl	800abb8 <powf>
 800aa10:	ee28 8a00 	vmul.f32	s16, s16, s0
 800aa14:	886b      	ldrh	r3, [r5, #2]
 800aa16:	9801      	ldr	r0, [sp, #4]
 800aa18:	feb8 8a48 	vrinta.f32	s16, s16
 800aa1c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800aa20:	8727      	strh	r7, [r4, #56]	; 0x38
 800aa22:	8663      	strh	r3, [r4, #50]	; 0x32
 800aa24:	8626      	strh	r6, [r4, #48]	; 0x30
 800aa26:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d0bf      	beq.n	800a9ae <PDM_Filter_setConfig+0xb6>
 800aa2e:	e7a9      	b.n	800a984 <PDM_Filter_setConfig+0x8c>
 800aa30:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800aab0 <PDM_Filter_setConfig+0x1b8>
 800aa34:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800aab4 <PDM_Filter_setConfig+0x1bc>
 800aa38:	e7db      	b.n	800a9f2 <PDM_Filter_setConfig+0xfa>
 800aa3a:	4b1f      	ldr	r3, [pc, #124]	; (800aab8 <PDM_Filter_setConfig+0x1c0>)
 800aa3c:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa3e:	e7a7      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa40:	4b1e      	ldr	r3, [pc, #120]	; (800aabc <PDM_Filter_setConfig+0x1c4>)
 800aa42:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa44:	e7a4      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa46:	4b1e      	ldr	r3, [pc, #120]	; (800aac0 <PDM_Filter_setConfig+0x1c8>)
 800aa48:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa4a:	e7a1      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa4c:	4b1d      	ldr	r3, [pc, #116]	; (800aac4 <PDM_Filter_setConfig+0x1cc>)
 800aa4e:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa50:	e79e      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa52:	4b1d      	ldr	r3, [pc, #116]	; (800aac8 <PDM_Filter_setConfig+0x1d0>)
 800aa54:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa56:	e79b      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa58:	4b1c      	ldr	r3, [pc, #112]	; (800aacc <PDM_Filter_setConfig+0x1d4>)
 800aa5a:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa5c:	e798      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa5e:	4b1c      	ldr	r3, [pc, #112]	; (800aad0 <PDM_Filter_setConfig+0x1d8>)
 800aa60:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa62:	e795      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa64:	4b1b      	ldr	r3, [pc, #108]	; (800aad4 <PDM_Filter_setConfig+0x1dc>)
 800aa66:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa68:	e792      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa6a:	4b1b      	ldr	r3, [pc, #108]	; (800aad8 <PDM_Filter_setConfig+0x1e0>)
 800aa6c:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa6e:	e78f      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa70:	4b1a      	ldr	r3, [pc, #104]	; (800aadc <PDM_Filter_setConfig+0x1e4>)
 800aa72:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa74:	e78c      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa76:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <PDM_Filter_setConfig+0x1e8>)
 800aa78:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa7a:	e789      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa7c:	4b19      	ldr	r3, [pc, #100]	; (800aae4 <PDM_Filter_setConfig+0x1ec>)
 800aa7e:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa80:	e786      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa82:	4b19      	ldr	r3, [pc, #100]	; (800aae8 <PDM_Filter_setConfig+0x1f0>)
 800aa84:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa86:	e783      	b.n	800a990 <PDM_Filter_setConfig+0x98>
 800aa88:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800aa8a:	42b3      	cmp	r3, r6
 800aa8c:	f47f af6e 	bne.w	800a96c <PDM_Filter_setConfig+0x74>
 800aa90:	886b      	ldrh	r3, [r5, #2]
 800aa92:	2008      	movs	r0, #8
 800aa94:	8663      	strh	r3, [r4, #50]	; 0x32
 800aa96:	e775      	b.n	800a984 <PDM_Filter_setConfig+0x8c>
 800aa98:	b5e8b5cd 	.word	0xb5e8b5cd
 800aa9c:	fffffef0 	.word	0xfffffef0
 800aaa0:	08009c11 	.word	0x08009c11
 800aaa4:	0800af28 	.word	0x0800af28
 800aaa8:	42000000 	.word	0x42000000
 800aaac:	3d4ccccd 	.word	0x3d4ccccd
 800aab0:	4f800000 	.word	0x4f800000
 800aab4:	00000000 	.word	0x00000000
 800aab8:	0800901d 	.word	0x0800901d
 800aabc:	08008ea5 	.word	0x08008ea5
 800aac0:	08008d95 	.word	0x08008d95
 800aac4:	08009859 	.word	0x08009859
 800aac8:	080095c1 	.word	0x080095c1
 800aacc:	08009389 	.word	0x08009389
 800aad0:	080091a5 	.word	0x080091a5
 800aad4:	08009e2d 	.word	0x08009e2d
 800aad8:	08009cf1 	.word	0x08009cf1
 800aadc:	0800a46d 	.word	0x0800a46d
 800aae0:	0800a271 	.word	0x0800a271
 800aae4:	0800a0c5 	.word	0x0800a0c5
 800aae8:	08009f59 	.word	0x08009f59

0800aaec <PDM_Filter>:
 800aaec:	b410      	push	{r4}
 800aaee:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <PDM_Filter+0x30>)
 800aaf0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800aaf2:	429c      	cmp	r4, r3
 800aaf4:	d107      	bne.n	800ab06 <PDM_Filter+0x1a>
 800aaf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800aaf8:	05dc      	lsls	r4, r3, #23
 800aafa:	d508      	bpl.n	800ab0e <PDM_Filter+0x22>
 800aafc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800aafe:	320c      	adds	r2, #12
 800ab00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab04:	4718      	bx	r3
 800ab06:	2004      	movs	r0, #4
 800ab08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ab12:	bf14      	ite	ne
 800ab14:	2020      	movne	r0, #32
 800ab16:	2030      	moveq	r0, #48	; 0x30
 800ab18:	e7f6      	b.n	800ab08 <PDM_Filter+0x1c>
 800ab1a:	bf00      	nop
 800ab1c:	b5e8b5cd 	.word	0xb5e8b5cd

0800ab20 <__errno>:
 800ab20:	4b01      	ldr	r3, [pc, #4]	; (800ab28 <__errno+0x8>)
 800ab22:	6818      	ldr	r0, [r3, #0]
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	24000410 	.word	0x24000410

0800ab2c <__libc_init_array>:
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	4d0d      	ldr	r5, [pc, #52]	; (800ab64 <__libc_init_array+0x38>)
 800ab30:	4c0d      	ldr	r4, [pc, #52]	; (800ab68 <__libc_init_array+0x3c>)
 800ab32:	1b64      	subs	r4, r4, r5
 800ab34:	10a4      	asrs	r4, r4, #2
 800ab36:	2600      	movs	r6, #0
 800ab38:	42a6      	cmp	r6, r4
 800ab3a:	d109      	bne.n	800ab50 <__libc_init_array+0x24>
 800ab3c:	4d0b      	ldr	r5, [pc, #44]	; (800ab6c <__libc_init_array+0x40>)
 800ab3e:	4c0c      	ldr	r4, [pc, #48]	; (800ab70 <__libc_init_array+0x44>)
 800ab40:	f000 f9e6 	bl	800af10 <_init>
 800ab44:	1b64      	subs	r4, r4, r5
 800ab46:	10a4      	asrs	r4, r4, #2
 800ab48:	2600      	movs	r6, #0
 800ab4a:	42a6      	cmp	r6, r4
 800ab4c:	d105      	bne.n	800ab5a <__libc_init_array+0x2e>
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab54:	4798      	blx	r3
 800ab56:	3601      	adds	r6, #1
 800ab58:	e7ee      	b.n	800ab38 <__libc_init_array+0xc>
 800ab5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab5e:	4798      	blx	r3
 800ab60:	3601      	adds	r6, #1
 800ab62:	e7f2      	b.n	800ab4a <__libc_init_array+0x1e>
 800ab64:	0800b218 	.word	0x0800b218
 800ab68:	0800b218 	.word	0x0800b218
 800ab6c:	0800b218 	.word	0x0800b218
 800ab70:	0800b21c 	.word	0x0800b21c

0800ab74 <memset>:
 800ab74:	4402      	add	r2, r0
 800ab76:	4603      	mov	r3, r0
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d100      	bne.n	800ab7e <memset+0xa>
 800ab7c:	4770      	bx	lr
 800ab7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab82:	e7f9      	b.n	800ab78 <memset+0x4>

0800ab84 <checkint>:
 800ab84:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ab88:	2b7e      	cmp	r3, #126	; 0x7e
 800ab8a:	dd10      	ble.n	800abae <checkint+0x2a>
 800ab8c:	2b96      	cmp	r3, #150	; 0x96
 800ab8e:	dc0c      	bgt.n	800abaa <checkint+0x26>
 800ab90:	2201      	movs	r2, #1
 800ab92:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ab96:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9a:	1e5a      	subs	r2, r3, #1
 800ab9c:	4202      	tst	r2, r0
 800ab9e:	d106      	bne.n	800abae <checkint+0x2a>
 800aba0:	4203      	tst	r3, r0
 800aba2:	bf0c      	ite	eq
 800aba4:	2002      	moveq	r0, #2
 800aba6:	2001      	movne	r0, #1
 800aba8:	4770      	bx	lr
 800abaa:	2002      	movs	r0, #2
 800abac:	4770      	bx	lr
 800abae:	2000      	movs	r0, #0
 800abb0:	4770      	bx	lr
 800abb2:	0000      	movs	r0, r0
 800abb4:	0000      	movs	r0, r0
	...

0800abb8 <powf>:
 800abb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abba:	ee10 1a10 	vmov	r1, s0
 800abbe:	ee10 6a90 	vmov	r6, s1
 800abc2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800abc6:	0072      	lsls	r2, r6, #1
 800abc8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800abcc:	b085      	sub	sp, #20
 800abce:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800abd2:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800abd6:	d256      	bcs.n	800ac86 <powf+0xce>
 800abd8:	4298      	cmp	r0, r3
 800abda:	d256      	bcs.n	800ac8a <powf+0xd2>
 800abdc:	2000      	movs	r0, #0
 800abde:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800abe2:	4ea3      	ldr	r6, [pc, #652]	; (800ae70 <powf+0x2b8>)
 800abe4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800abe8:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800abec:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800abf0:	0dd2      	lsrs	r2, r2, #23
 800abf2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800abf6:	05d2      	lsls	r2, r2, #23
 800abf8:	1a8b      	subs	r3, r1, r2
 800abfa:	ed97 5b00 	vldr	d5, [r7]
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	15d2      	asrs	r2, r2, #23
 800ac04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ac08:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ac0c:	ed97 5b02 	vldr	d5, [r7, #8]
 800ac10:	ee26 2b06 	vmul.f64	d2, d6, d6
 800ac14:	ee22 1b02 	vmul.f64	d1, d2, d2
 800ac18:	ee07 2a90 	vmov	s15, r2
 800ac1c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800ac20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac24:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ac28:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800ac2c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800ac30:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ac34:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800ac38:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ac3c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800ac40:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800ac44:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ac48:	eea2 7b04 	vfma.f64	d7, d2, d4
 800ac4c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ac50:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ac54:	ee10 1a90 	vmov	r1, s1
 800ac58:	2300      	movs	r3, #0
 800ac5a:	2700      	movs	r7, #0
 800ac5c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800ac60:	f248 06be 	movw	r6, #32958	; 0x80be
 800ac64:	429f      	cmp	r7, r3
 800ac66:	bf08      	it	eq
 800ac68:	4296      	cmpeq	r6, r2
 800ac6a:	f080 80b1 	bcs.w	800add0 <powf+0x218>
 800ac6e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800ae50 <powf+0x298>
 800ac72:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ac76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac7a:	dd79      	ble.n	800ad70 <powf+0x1b8>
 800ac7c:	b005      	add	sp, #20
 800ac7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ac82:	f000 b91f 	b.w	800aec4 <__math_oflowf>
 800ac86:	4298      	cmp	r0, r3
 800ac88:	d32d      	bcc.n	800ace6 <powf+0x12e>
 800ac8a:	b952      	cbnz	r2, 800aca2 <powf+0xea>
 800ac8c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800ac90:	005b      	lsls	r3, r3, #1
 800ac92:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800ac96:	f240 80cd 	bls.w	800ae34 <powf+0x27c>
 800ac9a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800ac9e:	b005      	add	sp, #20
 800aca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800aca6:	d105      	bne.n	800acb4 <powf+0xfc>
 800aca8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800acac:	0076      	lsls	r6, r6, #1
 800acae:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800acb2:	e7f0      	b.n	800ac96 <powf+0xde>
 800acb4:	004b      	lsls	r3, r1, #1
 800acb6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800acba:	d8ee      	bhi.n	800ac9a <powf+0xe2>
 800acbc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800acc0:	d1eb      	bne.n	800ac9a <powf+0xe2>
 800acc2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800acc6:	f000 80b5 	beq.w	800ae34 <powf+0x27c>
 800acca:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800acce:	ea6f 0606 	mvn.w	r6, r6
 800acd2:	bf34      	ite	cc
 800acd4:	2300      	movcc	r3, #0
 800acd6:	2301      	movcs	r3, #1
 800acd8:	0ff6      	lsrs	r6, r6, #31
 800acda:	42b3      	cmp	r3, r6
 800acdc:	f040 80ad 	bne.w	800ae3a <powf+0x282>
 800ace0:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800ace4:	e7db      	b.n	800ac9e <powf+0xe6>
 800ace6:	004f      	lsls	r7, r1, #1
 800ace8:	1e7a      	subs	r2, r7, #1
 800acea:	429a      	cmp	r2, r3
 800acec:	d31c      	bcc.n	800ad28 <powf+0x170>
 800acee:	2900      	cmp	r1, #0
 800acf0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800acf4:	da0f      	bge.n	800ad16 <powf+0x15e>
 800acf6:	ee10 0a90 	vmov	r0, s1
 800acfa:	f7ff ff43 	bl	800ab84 <checkint>
 800acfe:	2801      	cmp	r0, #1
 800ad00:	d109      	bne.n	800ad16 <powf+0x15e>
 800ad02:	eeb1 0a40 	vneg.f32	s0, s0
 800ad06:	b947      	cbnz	r7, 800ad1a <powf+0x162>
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	dac8      	bge.n	800ac9e <powf+0xe6>
 800ad0c:	b005      	add	sp, #20
 800ad0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ad12:	f000 b8dd 	b.w	800aed0 <__math_divzerof>
 800ad16:	2000      	movs	r0, #0
 800ad18:	e7f5      	b.n	800ad06 <powf+0x14e>
 800ad1a:	2e00      	cmp	r6, #0
 800ad1c:	dabf      	bge.n	800ac9e <powf+0xe6>
 800ad1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad22:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ad26:	e7ba      	b.n	800ac9e <powf+0xe6>
 800ad28:	2900      	cmp	r1, #0
 800ad2a:	da1f      	bge.n	800ad6c <powf+0x1b4>
 800ad2c:	ee10 0a90 	vmov	r0, s1
 800ad30:	f7ff ff28 	bl	800ab84 <checkint>
 800ad34:	b920      	cbnz	r0, 800ad40 <powf+0x188>
 800ad36:	b005      	add	sp, #20
 800ad38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ad3c:	f000 b8d8 	b.w	800aef0 <__math_invalidf>
 800ad40:	2801      	cmp	r0, #1
 800ad42:	bf14      	ite	ne
 800ad44:	2000      	movne	r0, #0
 800ad46:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ad4a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad4e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800ad52:	f4bf af44 	bcs.w	800abde <powf+0x26>
 800ad56:	eddf 7a47 	vldr	s15, [pc, #284]	; 800ae74 <powf+0x2bc>
 800ad5a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ad5e:	ee10 3a10 	vmov	r3, s0
 800ad62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad66:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800ad6a:	e738      	b.n	800abde <powf+0x26>
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	e7ee      	b.n	800ad4e <powf+0x196>
 800ad70:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800ae58 <powf+0x2a0>
 800ad74:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ad78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7c:	dd10      	ble.n	800ada0 <powf+0x1e8>
 800ad7e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d15c      	bne.n	800ae40 <powf+0x288>
 800ad86:	9302      	str	r3, [sp, #8]
 800ad88:	eddd 7a02 	vldr	s15, [sp, #8]
 800ad8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad94:	eef4 7a47 	vcmp.f32	s15, s14
 800ad98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9c:	f47f af6e 	bne.w	800ac7c <powf+0xc4>
 800ada0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ae60 <powf+0x2a8>
 800ada4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adac:	d804      	bhi.n	800adb8 <powf+0x200>
 800adae:	b005      	add	sp, #20
 800adb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800adb4:	f000 b87a 	b.w	800aeac <__math_uflowf>
 800adb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800ae68 <powf+0x2b0>
 800adbc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800adc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc4:	d504      	bpl.n	800add0 <powf+0x218>
 800adc6:	b005      	add	sp, #20
 800adc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800adcc:	f000 b874 	b.w	800aeb8 <__math_may_uflowf>
 800add0:	4b29      	ldr	r3, [pc, #164]	; (800ae78 <powf+0x2c0>)
 800add2:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800add6:	ee30 6b07 	vadd.f64	d6, d0, d7
 800adda:	ed8d 6b00 	vstr	d6, [sp]
 800adde:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ade2:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ade6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800adea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800adee:	f006 011f 	and.w	r1, r6, #31
 800adf2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800adf6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800adfa:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800adfe:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800ae02:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800ae06:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ae0a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800ae0e:	1836      	adds	r6, r6, r0
 800ae10:	2300      	movs	r3, #0
 800ae12:	eb13 040c 	adds.w	r4, r3, ip
 800ae16:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800ae1a:	eb41 050e 	adc.w	r5, r1, lr
 800ae1e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800ae22:	ec45 4b17 	vmov	d7, r4, r5
 800ae26:	eea6 0b05 	vfma.f64	d0, d6, d5
 800ae2a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ae2e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ae32:	e734      	b.n	800ac9e <powf+0xe6>
 800ae34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ae38:	e731      	b.n	800ac9e <powf+0xe6>
 800ae3a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ae7c <powf+0x2c4>
 800ae3e:	e72e      	b.n	800ac9e <powf+0xe6>
 800ae40:	9303      	str	r3, [sp, #12]
 800ae42:	eddd 7a03 	vldr	s15, [sp, #12]
 800ae46:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ae4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae4e:	e7a1      	b.n	800ad94 <powf+0x1dc>
 800ae50:	ffd1d571 	.word	0xffd1d571
 800ae54:	405fffff 	.word	0x405fffff
 800ae58:	ffa3aae2 	.word	0xffa3aae2
 800ae5c:	405fffff 	.word	0x405fffff
 800ae60:	00000000 	.word	0x00000000
 800ae64:	c062c000 	.word	0xc062c000
 800ae68:	00000000 	.word	0x00000000
 800ae6c:	c062a000 	.word	0xc062a000
 800ae70:	0800afa0 	.word	0x0800afa0
 800ae74:	4b000000 	.word	0x4b000000
 800ae78:	0800b0c8 	.word	0x0800b0c8
 800ae7c:	00000000 	.word	0x00000000

0800ae80 <with_errnof>:
 800ae80:	b513      	push	{r0, r1, r4, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ae88:	f7ff fe4a 	bl	800ab20 <__errno>
 800ae8c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ae90:	6004      	str	r4, [r0, #0]
 800ae92:	b002      	add	sp, #8
 800ae94:	bd10      	pop	{r4, pc}

0800ae96 <xflowf>:
 800ae96:	b130      	cbz	r0, 800aea6 <xflowf+0x10>
 800ae98:	eef1 7a40 	vneg.f32	s15, s0
 800ae9c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aea0:	2022      	movs	r0, #34	; 0x22
 800aea2:	f7ff bfed 	b.w	800ae80 <with_errnof>
 800aea6:	eef0 7a40 	vmov.f32	s15, s0
 800aeaa:	e7f7      	b.n	800ae9c <xflowf+0x6>

0800aeac <__math_uflowf>:
 800aeac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aeb4 <__math_uflowf+0x8>
 800aeb0:	f7ff bff1 	b.w	800ae96 <xflowf>
 800aeb4:	10000000 	.word	0x10000000

0800aeb8 <__math_may_uflowf>:
 800aeb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aec0 <__math_may_uflowf+0x8>
 800aebc:	f7ff bfeb 	b.w	800ae96 <xflowf>
 800aec0:	1a200000 	.word	0x1a200000

0800aec4 <__math_oflowf>:
 800aec4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aecc <__math_oflowf+0x8>
 800aec8:	f7ff bfe5 	b.w	800ae96 <xflowf>
 800aecc:	70000000 	.word	0x70000000

0800aed0 <__math_divzerof>:
 800aed0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aed4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800aed8:	2800      	cmp	r0, #0
 800aeda:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800aede:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800aeec <__math_divzerof+0x1c>
 800aee2:	2022      	movs	r0, #34	; 0x22
 800aee4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800aee8:	f7ff bfca 	b.w	800ae80 <with_errnof>
 800aeec:	00000000 	.word	0x00000000

0800aef0 <__math_invalidf>:
 800aef0:	eef0 7a40 	vmov.f32	s15, s0
 800aef4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800aef8:	eef4 7a67 	vcmp.f32	s15, s15
 800aefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af00:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800af04:	d602      	bvs.n	800af0c <__math_invalidf+0x1c>
 800af06:	2021      	movs	r0, #33	; 0x21
 800af08:	f7ff bfba 	b.w	800ae80 <with_errnof>
 800af0c:	4770      	bx	lr
	...

0800af10 <_init>:
 800af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af12:	bf00      	nop
 800af14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af16:	bc08      	pop	{r3}
 800af18:	469e      	mov	lr, r3
 800af1a:	4770      	bx	lr

0800af1c <_fini>:
 800af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1e:	bf00      	nop
 800af20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af22:	bc08      	pop	{r3}
 800af24:	469e      	mov	lr, r3
 800af26:	4770      	bx	lr
