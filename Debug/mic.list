
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1b0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800a480  0800a480  0001a480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a748  0800a748  0001a748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a74c  0800a74c  0001a74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  24000000  0800a750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000c18  2400047c  0800abcc  0002047c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24001094  0800abcc  00021094  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020641  00000000  00000000  000204aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003874  00000000  00000000  00040aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ef8  00000000  00000000  00044360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000dc8  00000000  00000000  00045258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032696  00000000  00000000  00046020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016642  00000000  00000000  000786b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015102d  00000000  00000000  0008ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001dfd25  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003ddc  00000000  00000000  001dfdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400047c 	.word	0x2400047c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a468 	.word	0x0800a468

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000480 	.word	0x24000480
 800030c:	0800a468 	.word	0x0800a468

08000310 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <BSP_LED_Init+0xb0>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	e015      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <BSP_LED_Init+0xb0>)
 800034c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <BSP_LED_Init+0xb0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <BSP_LED_Init+0xb0>)
 800035c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	e002      	b.n	8000370 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800036a:	f06f 0301 	mvn.w	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <BSP_LED_Init+0xb4>)
 8000380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <BSP_LED_Init+0xb8>)
 800038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038e:	f107 0210 	add.w	r2, r7, #16
 8000392:	4611      	mov	r1, r2
 8000394:	4618      	mov	r0, r3
 8000396:	f002 fb0b 	bl	80029b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <BSP_LED_Init+0xb8>)
 800039e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <BSP_LED_Init+0xb4>)
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	f002 fca6 	bl	8002d00 <HAL_GPIO_WritePin>

  return ret;
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	58024400 	.word	0x58024400
 80003c4:	0800a4b8 	.word	0x0800a4b8
 80003c8:	24000400 	.word	0x24000400

080003cc <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a08      	ldr	r2, [pc, #32]	; (8000400 <BSP_LED_On+0x34>)
 80003de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <BSP_LED_On+0x38>)
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f002 fc86 	bl	8002d00 <HAL_GPIO_WritePin>
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	24000400 	.word	0x24000400
 8000404:	0800a4b8 	.word	0x0800a4b8

08000408 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <BSP_LED_Off+0x34>)
 800041a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <BSP_LED_Off+0x38>)
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	b29b      	uxth	r3, r3
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	f002 fc68 	bl	8002d00 <HAL_GPIO_WritePin>
  return ret;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	24000400 	.word	0x24000400
 8000440:	0800a4b8 	.word	0x0800a4b8

08000444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800044a:	2003      	movs	r0, #3
 800044c:	f000 f95c 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000450:	f004 fa20 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8000454:	4602      	mov	r2, r0
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <HAL_Init+0x68>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	f003 030f 	and.w	r3, r3, #15
 8000460:	4913      	ldr	r1, [pc, #76]	; (80004b0 <HAL_Init+0x6c>)
 8000462:	5ccb      	ldrb	r3, [r1, r3]
 8000464:	f003 031f 	and.w	r3, r3, #31
 8000468:	fa22 f303 	lsr.w	r3, r2, r3
 800046c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_Init+0x68>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 030f 	and.w	r3, r3, #15
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_Init+0x6c>)
 8000478:	5cd3      	ldrb	r3, [r2, r3]
 800047a:	f003 031f 	and.w	r3, r3, #31
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <HAL_Init+0x70>)
 8000486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000488:	4a0b      	ldr	r2, [pc, #44]	; (80004b8 <HAL_Init+0x74>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800048e:	2000      	movs	r0, #0
 8000490:	f000 f814 	bl	80004bc <HAL_InitTick>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800049a:	2301      	movs	r3, #1
 800049c:	e002      	b.n	80004a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800049e:	f007 fbfd 	bl	8007c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	58024400 	.word	0x58024400
 80004b0:	0800a4c8 	.word	0x0800a4c8
 80004b4:	24000414 	.word	0x24000414
 80004b8:	24000410 	.word	0x24000410

080004bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80004c4:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_InitTick+0x60>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d101      	bne.n	80004d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e021      	b.n	8000514 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <HAL_InitTick+0x64>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <HAL_InitTick+0x60>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004de:	fbb3 f3f1 	udiv	r3, r3, r1
 80004e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f941 	bl	800076e <HAL_SYSTICK_Config>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
 80004f4:	e00e      	b.n	8000514 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d80a      	bhi.n	8000512 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	2200      	movs	r2, #0
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000504:	f000 f90b 	bl	800071e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_InitTick+0x68>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	e000      	b.n	8000514 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2400040c 	.word	0x2400040c
 8000520:	24000410 	.word	0x24000410
 8000524:	24000408 	.word	0x24000408

08000528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x20>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x24>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4413      	add	r3, r2
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_IncTick+0x24>)
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2400040c 	.word	0x2400040c
 800054c:	24000ca4 	.word	0x24000ca4

08000550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return uwTick;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <HAL_GetTick+0x14>)
 8000556:	681b      	ldr	r3, [r3, #0]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	24000ca4 	.word	0x24000ca4

08000568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <__NVIC_SetPriorityGrouping+0x40>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	4313      	orrs	r3, r2
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x40>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00
 80005ac:	05fa0000 	.word	0x05fa0000

080005b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <__NVIC_GetPriorityGrouping+0x18>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	f003 0307 	and.w	r3, r3, #7
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db0b      	blt.n	80005f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	f003 021f 	and.w	r2, r3, #31
 80005e4:	4907      	ldr	r1, [pc, #28]	; (8000604 <__NVIC_EnableIRQ+0x38>)
 80005e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ea:	095b      	lsrs	r3, r3, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	fa00 f202 	lsl.w	r2, r0, r2
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e100 	.word	0xe000e100

08000608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0a      	blt.n	8000632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	b2da      	uxtb	r2, r3
 8000620:	490c      	ldr	r1, [pc, #48]	; (8000654 <__NVIC_SetPriority+0x4c>)
 8000622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	440b      	add	r3, r1
 800062c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000630:	e00a      	b.n	8000648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4908      	ldr	r1, [pc, #32]	; (8000658 <__NVIC_SetPriority+0x50>)
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	3b04      	subs	r3, #4
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	440b      	add	r3, r1
 8000646:	761a      	strb	r2, [r3, #24]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	f1c3 0307 	rsb	r3, r3, #7
 8000676:	2b04      	cmp	r3, #4
 8000678:	bf28      	it	cs
 800067a:	2304      	movcs	r3, #4
 800067c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3304      	adds	r3, #4
 8000682:	2b06      	cmp	r3, #6
 8000684:	d902      	bls.n	800068c <NVIC_EncodePriority+0x30>
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3b03      	subs	r3, #3
 800068a:	e000      	b.n	800068e <NVIC_EncodePriority+0x32>
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43da      	mvns	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	401a      	ands	r2, r3
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	43d9      	mvns	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	4313      	orrs	r3, r2
         );
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3724      	adds	r7, #36	; 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d4:	d301      	bcc.n	80006da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00f      	b.n	80006fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <SysTick_Config+0x40>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3b01      	subs	r3, #1
 80006e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006e2:	210f      	movs	r1, #15
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e8:	f7ff ff8e 	bl	8000608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <SysTick_Config+0x40>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <SysTick_Config+0x40>)
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	e000e010 	.word	0xe000e010

08000708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff29 	bl	8000568 <__NVIC_SetPriorityGrouping>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b086      	sub	sp, #24
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800072c:	f7ff ff40 	bl	80005b0 <__NVIC_GetPriorityGrouping>
 8000730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff ff90 	bl	800065c <NVIC_EncodePriority>
 800073c:	4602      	mov	r2, r0
 800073e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5f 	bl	8000608 <__NVIC_SetPriority>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff33 	bl	80005cc <__NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ffa4 	bl	80006c4 <SysTick_Config>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e054      	b.n	8000844 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7f5b      	ldrb	r3, [r3, #29]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d105      	bne.n	80007b0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f007 fa90 	bl	8007cd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2202      	movs	r2, #2
 80007b4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10c      	bne.n	80007d8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <HAL_CRC_Init+0xc4>)
 80007c4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f022 0218 	bic.w	r2, r2, #24
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	e00c      	b.n	80007f2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6899      	ldr	r1, [r3, #8]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	461a      	mov	r2, r3
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f834 	bl	8000850 <HAL_CRCEx_Polynomial_Set>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e028      	b.n	8000844 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	795b      	ldrb	r3, [r3, #5]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d105      	bne.n	8000806 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	e004      	b.n	8000810 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	6912      	ldr	r2, [r2, #16]
 800080e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695a      	ldr	r2, [r3, #20]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	430a      	orrs	r2, r1
 8000824:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	699a      	ldr	r2, [r3, #24]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	430a      	orrs	r2, r1
 800083a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2201      	movs	r2, #1
 8000840:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	04c11db7 	.word	0x04c11db7

08000850 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000860:	231f      	movs	r3, #31
 8000862:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000864:	bf00      	nop
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	613a      	str	r2, [r7, #16]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d009      	beq.n	8000884 <HAL_CRCEx_Polynomial_Set+0x34>
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	f003 031f 	and.w	r3, r3, #31
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	fa22 f303 	lsr.w	r3, r2, r3
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0f0      	beq.n	8000866 <HAL_CRCEx_Polynomial_Set+0x16>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b18      	cmp	r3, #24
 8000888:	d846      	bhi.n	8000918 <HAL_CRCEx_Polynomial_Set+0xc8>
 800088a:	a201      	add	r2, pc, #4	; (adr r2, 8000890 <HAL_CRCEx_Polynomial_Set+0x40>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	0800091f 	.word	0x0800091f
 8000894:	08000919 	.word	0x08000919
 8000898:	08000919 	.word	0x08000919
 800089c:	08000919 	.word	0x08000919
 80008a0:	08000919 	.word	0x08000919
 80008a4:	08000919 	.word	0x08000919
 80008a8:	08000919 	.word	0x08000919
 80008ac:	08000919 	.word	0x08000919
 80008b0:	0800090d 	.word	0x0800090d
 80008b4:	08000919 	.word	0x08000919
 80008b8:	08000919 	.word	0x08000919
 80008bc:	08000919 	.word	0x08000919
 80008c0:	08000919 	.word	0x08000919
 80008c4:	08000919 	.word	0x08000919
 80008c8:	08000919 	.word	0x08000919
 80008cc:	08000919 	.word	0x08000919
 80008d0:	08000901 	.word	0x08000901
 80008d4:	08000919 	.word	0x08000919
 80008d8:	08000919 	.word	0x08000919
 80008dc:	08000919 	.word	0x08000919
 80008e0:	08000919 	.word	0x08000919
 80008e4:	08000919 	.word	0x08000919
 80008e8:	08000919 	.word	0x08000919
 80008ec:	08000919 	.word	0x08000919
 80008f0:	080008f5 	.word	0x080008f5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d913      	bls.n	8000922 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80008fe:	e010      	b.n	8000922 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d90f      	bls.n	8000926 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800090a:	e00c      	b.n	8000926 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	2b0f      	cmp	r3, #15
 8000910:	d90b      	bls.n	800092a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000916:	e008      	b.n	800092a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	75fb      	strb	r3, [r7, #23]
      break;
 800091c:	e006      	b.n	800092c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800091e:	bf00      	nop
 8000920:	e004      	b.n	800092c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000922:	bf00      	nop
 8000924:	e002      	b.n	800092c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000926:	bf00      	nop
 8000928:	e000      	b.n	800092c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800092a:	bf00      	nop
  }
  if (status == HAL_OK)
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10d      	bne.n	800094e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	f023 0118 	bic.w	r1, r3, #24
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	430a      	orrs	r2, r1
 800094c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800094e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000950:	4618      	mov	r0, r3
 8000952:	371c      	adds	r7, #28
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff fdf4 	bl	8000550 <HAL_GetTick>
 8000968:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d101      	bne.n	8000974 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	e314      	b.n	8000f9e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a66      	ldr	r2, [pc, #408]	; (8000b14 <HAL_DMA_Init+0x1b8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d04a      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a65      	ldr	r2, [pc, #404]	; (8000b18 <HAL_DMA_Init+0x1bc>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d045      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a63      	ldr	r2, [pc, #396]	; (8000b1c <HAL_DMA_Init+0x1c0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d040      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a62      	ldr	r2, [pc, #392]	; (8000b20 <HAL_DMA_Init+0x1c4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d03b      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a60      	ldr	r2, [pc, #384]	; (8000b24 <HAL_DMA_Init+0x1c8>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d036      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a5f      	ldr	r2, [pc, #380]	; (8000b28 <HAL_DMA_Init+0x1cc>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d031      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a5d      	ldr	r2, [pc, #372]	; (8000b2c <HAL_DMA_Init+0x1d0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d02c      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a5c      	ldr	r2, [pc, #368]	; (8000b30 <HAL_DMA_Init+0x1d4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d027      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a5a      	ldr	r2, [pc, #360]	; (8000b34 <HAL_DMA_Init+0x1d8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d022      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a59      	ldr	r2, [pc, #356]	; (8000b38 <HAL_DMA_Init+0x1dc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d01d      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a57      	ldr	r2, [pc, #348]	; (8000b3c <HAL_DMA_Init+0x1e0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d018      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a56      	ldr	r2, [pc, #344]	; (8000b40 <HAL_DMA_Init+0x1e4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d013      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a54      	ldr	r2, [pc, #336]	; (8000b44 <HAL_DMA_Init+0x1e8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00e      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a53      	ldr	r2, [pc, #332]	; (8000b48 <HAL_DMA_Init+0x1ec>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d009      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a51      	ldr	r2, [pc, #324]	; (8000b4c <HAL_DMA_Init+0x1f0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d004      	beq.n	8000a14 <HAL_DMA_Init+0xb8>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a50      	ldr	r2, [pc, #320]	; (8000b50 <HAL_DMA_Init+0x1f4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d101      	bne.n	8000a18 <HAL_DMA_Init+0xbc>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <HAL_DMA_Init+0xbe>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 813c 	beq.w	8000c98 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2202      	movs	r2, #2
 8000a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a37      	ldr	r2, [pc, #220]	; (8000b14 <HAL_DMA_Init+0x1b8>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d04a      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a36      	ldr	r2, [pc, #216]	; (8000b18 <HAL_DMA_Init+0x1bc>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d045      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a34      	ldr	r2, [pc, #208]	; (8000b1c <HAL_DMA_Init+0x1c0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d040      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <HAL_DMA_Init+0x1c4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d03b      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a31      	ldr	r2, [pc, #196]	; (8000b24 <HAL_DMA_Init+0x1c8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d036      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <HAL_DMA_Init+0x1cc>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d031      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a2e      	ldr	r2, [pc, #184]	; (8000b2c <HAL_DMA_Init+0x1d0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d02c      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a2d      	ldr	r2, [pc, #180]	; (8000b30 <HAL_DMA_Init+0x1d4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d027      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2b      	ldr	r2, [pc, #172]	; (8000b34 <HAL_DMA_Init+0x1d8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d022      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <HAL_DMA_Init+0x1dc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d01d      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <HAL_DMA_Init+0x1e0>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d018      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a27      	ldr	r2, [pc, #156]	; (8000b40 <HAL_DMA_Init+0x1e4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d013      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <HAL_DMA_Init+0x1e8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00e      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a24      	ldr	r2, [pc, #144]	; (8000b48 <HAL_DMA_Init+0x1ec>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d009      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <HAL_DMA_Init+0x1f0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d004      	beq.n	8000ad0 <HAL_DMA_Init+0x174>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <HAL_DMA_Init+0x1f4>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d108      	bne.n	8000ae2 <HAL_DMA_Init+0x186>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f022 0201 	bic.w	r2, r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e007      	b.n	8000af2 <HAL_DMA_Init+0x196>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f022 0201 	bic.w	r2, r2, #1
 8000af0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000af2:	e02f      	b.n	8000b54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000af4:	f7ff fd2c 	bl	8000550 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b05      	cmp	r3, #5
 8000b00:	d928      	bls.n	8000b54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2220      	movs	r2, #32
 8000b06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e244      	b.n	8000f9e <HAL_DMA_Init+0x642>
 8000b14:	40020010 	.word	0x40020010
 8000b18:	40020028 	.word	0x40020028
 8000b1c:	40020040 	.word	0x40020040
 8000b20:	40020058 	.word	0x40020058
 8000b24:	40020070 	.word	0x40020070
 8000b28:	40020088 	.word	0x40020088
 8000b2c:	400200a0 	.word	0x400200a0
 8000b30:	400200b8 	.word	0x400200b8
 8000b34:	40020410 	.word	0x40020410
 8000b38:	40020428 	.word	0x40020428
 8000b3c:	40020440 	.word	0x40020440
 8000b40:	40020458 	.word	0x40020458
 8000b44:	40020470 	.word	0x40020470
 8000b48:	40020488 	.word	0x40020488
 8000b4c:	400204a0 	.word	0x400204a0
 8000b50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1c8      	bne.n	8000af4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4b84      	ldr	r3, [pc, #528]	; (8000d80 <HAL_DMA_Init+0x424>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000b7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d107      	bne.n	8000bb8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b28      	cmp	r3, #40	; 0x28
 8000bbe:	d903      	bls.n	8000bc8 <HAL_DMA_Init+0x26c>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8000bc6:	d91f      	bls.n	8000c08 <HAL_DMA_Init+0x2ac>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8000bce:	d903      	bls.n	8000bd8 <HAL_DMA_Init+0x27c>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b42      	cmp	r3, #66	; 0x42
 8000bd6:	d917      	bls.n	8000c08 <HAL_DMA_Init+0x2ac>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b46      	cmp	r3, #70	; 0x46
 8000bde:	d903      	bls.n	8000be8 <HAL_DMA_Init+0x28c>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b48      	cmp	r3, #72	; 0x48
 8000be6:	d90f      	bls.n	8000c08 <HAL_DMA_Init+0x2ac>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b4e      	cmp	r3, #78	; 0x4e
 8000bee:	d903      	bls.n	8000bf8 <HAL_DMA_Init+0x29c>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b52      	cmp	r3, #82	; 0x52
 8000bf6:	d907      	bls.n	8000c08 <HAL_DMA_Init+0x2ac>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b73      	cmp	r3, #115	; 0x73
 8000bfe:	d905      	bls.n	8000c0c <HAL_DMA_Init+0x2b0>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b77      	cmp	r3, #119	; 0x77
 8000c06:	d801      	bhi.n	8000c0c <HAL_DMA_Init+0x2b0>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_DMA_Init+0x2b2>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c18:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f023 0307 	bic.w	r3, r3, #7
 8000c30:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d117      	bne.n	8000c74 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d00e      	beq.n	8000c74 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f001 fc08 	bl	800246c <DMA_CheckFifoParam>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2240      	movs	r2, #64	; 0x40
 8000c66:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e194      	b.n	8000f9e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f001 fb43 	bl	8002308 <DMA_CalcBaseAndBitshift>
 8000c82:	4603      	mov	r3, r0
 8000c84:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c8a:	f003 031f 	and.w	r3, r3, #31
 8000c8e:	223f      	movs	r2, #63	; 0x3f
 8000c90:	409a      	lsls	r2, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	e0ca      	b.n	8000e2e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a39      	ldr	r2, [pc, #228]	; (8000d84 <HAL_DMA_Init+0x428>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d022      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a38      	ldr	r2, [pc, #224]	; (8000d88 <HAL_DMA_Init+0x42c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d01d      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a36      	ldr	r2, [pc, #216]	; (8000d8c <HAL_DMA_Init+0x430>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d018      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a35      	ldr	r2, [pc, #212]	; (8000d90 <HAL_DMA_Init+0x434>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d013      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <HAL_DMA_Init+0x438>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00e      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a32      	ldr	r2, [pc, #200]	; (8000d98 <HAL_DMA_Init+0x43c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d009      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <HAL_DMA_Init+0x440>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d004      	beq.n	8000ce8 <HAL_DMA_Init+0x38c>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <HAL_DMA_Init+0x444>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_DMA_Init+0x390>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <HAL_DMA_Init+0x392>
 8000cec:	2300      	movs	r3, #0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8094 	beq.w	8000e1c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <HAL_DMA_Init+0x428>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d021      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <HAL_DMA_Init+0x42c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d01c      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <HAL_DMA_Init+0x430>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d017      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <HAL_DMA_Init+0x434>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d012      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <HAL_DMA_Init+0x438>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00d      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <HAL_DMA_Init+0x43c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d008      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_DMA_Init+0x440>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d003      	beq.n	8000d42 <HAL_DMA_Init+0x3e6>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_DMA_Init+0x444>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2202      	movs	r2, #2
 8000d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_DMA_Init+0x448>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b40      	cmp	r3, #64	; 0x40
 8000d6a:	d01d      	beq.n	8000da8 <HAL_DMA_Init+0x44c>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2b80      	cmp	r3, #128	; 0x80
 8000d72:	d102      	bne.n	8000d7a <HAL_DMA_Init+0x41e>
 8000d74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d78:	e017      	b.n	8000daa <HAL_DMA_Init+0x44e>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e015      	b.n	8000daa <HAL_DMA_Init+0x44e>
 8000d7e:	bf00      	nop
 8000d80:	fe10803f 	.word	0xfe10803f
 8000d84:	58025408 	.word	0x58025408
 8000d88:	5802541c 	.word	0x5802541c
 8000d8c:	58025430 	.word	0x58025430
 8000d90:	58025444 	.word	0x58025444
 8000d94:	58025458 	.word	0x58025458
 8000d98:	5802546c 	.word	0x5802546c
 8000d9c:	58025480 	.word	0x58025480
 8000da0:	58025494 	.word	0x58025494
 8000da4:	fffe000f 	.word	0xfffe000f
 8000da8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68d2      	ldr	r2, [r2, #12]
 8000dae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000dc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000dd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000dd8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <HAL_DMA_Init+0x64c>)
 8000df0:	4413      	add	r3, r2
 8000df2:	4a6e      	ldr	r2, [pc, #440]	; (8000fac <HAL_DMA_Init+0x650>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	009a      	lsls	r2, r3, #2
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f001 fa81 	bl	8002308 <DMA_CalcBaseAndBitshift>
 8000e06:	4603      	mov	r3, r0
 8000e08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	2201      	movs	r2, #1
 8000e14:	409a      	lsls	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	e008      	b.n	8000e2e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2203      	movs	r2, #3
 8000e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0b7      	b.n	8000f9e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <HAL_DMA_Init+0x654>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d072      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a5d      	ldr	r2, [pc, #372]	; (8000fb4 <HAL_DMA_Init+0x658>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d06d      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a5c      	ldr	r2, [pc, #368]	; (8000fb8 <HAL_DMA_Init+0x65c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d068      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a5a      	ldr	r2, [pc, #360]	; (8000fbc <HAL_DMA_Init+0x660>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d063      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a59      	ldr	r2, [pc, #356]	; (8000fc0 <HAL_DMA_Init+0x664>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d05e      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <HAL_DMA_Init+0x668>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d059      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a56      	ldr	r2, [pc, #344]	; (8000fc8 <HAL_DMA_Init+0x66c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d054      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a54      	ldr	r2, [pc, #336]	; (8000fcc <HAL_DMA_Init+0x670>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d04f      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a53      	ldr	r2, [pc, #332]	; (8000fd0 <HAL_DMA_Init+0x674>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d04a      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a51      	ldr	r2, [pc, #324]	; (8000fd4 <HAL_DMA_Init+0x678>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d045      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a50      	ldr	r2, [pc, #320]	; (8000fd8 <HAL_DMA_Init+0x67c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d040      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a4e      	ldr	r2, [pc, #312]	; (8000fdc <HAL_DMA_Init+0x680>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d03b      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a4d      	ldr	r2, [pc, #308]	; (8000fe0 <HAL_DMA_Init+0x684>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d036      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <HAL_DMA_Init+0x688>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d031      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a4a      	ldr	r2, [pc, #296]	; (8000fe8 <HAL_DMA_Init+0x68c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d02c      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a48      	ldr	r2, [pc, #288]	; (8000fec <HAL_DMA_Init+0x690>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d027      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <HAL_DMA_Init+0x694>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d022      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a45      	ldr	r2, [pc, #276]	; (8000ff4 <HAL_DMA_Init+0x698>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01d      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a44      	ldr	r2, [pc, #272]	; (8000ff8 <HAL_DMA_Init+0x69c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d018      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a42      	ldr	r2, [pc, #264]	; (8000ffc <HAL_DMA_Init+0x6a0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a41      	ldr	r2, [pc, #260]	; (8001000 <HAL_DMA_Init+0x6a4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00e      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a3f      	ldr	r2, [pc, #252]	; (8001004 <HAL_DMA_Init+0x6a8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d009      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <HAL_DMA_Init+0x6ac>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d004      	beq.n	8000f1e <HAL_DMA_Init+0x5c2>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a3c      	ldr	r2, [pc, #240]	; (800100c <HAL_DMA_Init+0x6b0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_DMA_Init+0x5c6>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <HAL_DMA_Init+0x5c8>
 8000f22:	2300      	movs	r3, #0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d032      	beq.n	8000f8e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f001 fb1b 	bl	8002564 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b80      	cmp	r3, #128	; 0x80
 8000f34:	d102      	bne.n	8000f3c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000f50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d010      	beq.n	8000f7c <HAL_DMA_Init+0x620>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d80c      	bhi.n	8000f7c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f001 fb98 	bl	8002698 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	e008      	b.n	8000f8e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	a7fdabf8 	.word	0xa7fdabf8
 8000fac:	cccccccd 	.word	0xcccccccd
 8000fb0:	40020010 	.word	0x40020010
 8000fb4:	40020028 	.word	0x40020028
 8000fb8:	40020040 	.word	0x40020040
 8000fbc:	40020058 	.word	0x40020058
 8000fc0:	40020070 	.word	0x40020070
 8000fc4:	40020088 	.word	0x40020088
 8000fc8:	400200a0 	.word	0x400200a0
 8000fcc:	400200b8 	.word	0x400200b8
 8000fd0:	40020410 	.word	0x40020410
 8000fd4:	40020428 	.word	0x40020428
 8000fd8:	40020440 	.word	0x40020440
 8000fdc:	40020458 	.word	0x40020458
 8000fe0:	40020470 	.word	0x40020470
 8000fe4:	40020488 	.word	0x40020488
 8000fe8:	400204a0 	.word	0x400204a0
 8000fec:	400204b8 	.word	0x400204b8
 8000ff0:	58025408 	.word	0x58025408
 8000ff4:	5802541c 	.word	0x5802541c
 8000ff8:	58025430 	.word	0x58025430
 8000ffc:	58025444 	.word	0x58025444
 8001000:	58025458 	.word	0x58025458
 8001004:	5802546c 	.word	0x5802546c
 8001008:	58025480 	.word	0x58025480
 800100c:	58025494 	.word	0x58025494

08001010 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e205      	b.n	800142e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d004      	beq.n	8001038 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e1fa      	b.n	800142e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a8c      	ldr	r2, [pc, #560]	; (8001270 <HAL_DMA_Abort_IT+0x260>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d04a      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a8b      	ldr	r2, [pc, #556]	; (8001274 <HAL_DMA_Abort_IT+0x264>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d045      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a89      	ldr	r2, [pc, #548]	; (8001278 <HAL_DMA_Abort_IT+0x268>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d040      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a88      	ldr	r2, [pc, #544]	; (800127c <HAL_DMA_Abort_IT+0x26c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d03b      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a86      	ldr	r2, [pc, #536]	; (8001280 <HAL_DMA_Abort_IT+0x270>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d036      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a85      	ldr	r2, [pc, #532]	; (8001284 <HAL_DMA_Abort_IT+0x274>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d031      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a83      	ldr	r2, [pc, #524]	; (8001288 <HAL_DMA_Abort_IT+0x278>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d02c      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a82      	ldr	r2, [pc, #520]	; (800128c <HAL_DMA_Abort_IT+0x27c>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d027      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a80      	ldr	r2, [pc, #512]	; (8001290 <HAL_DMA_Abort_IT+0x280>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d022      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7f      	ldr	r2, [pc, #508]	; (8001294 <HAL_DMA_Abort_IT+0x284>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d01d      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a7d      	ldr	r2, [pc, #500]	; (8001298 <HAL_DMA_Abort_IT+0x288>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d018      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a7c      	ldr	r2, [pc, #496]	; (800129c <HAL_DMA_Abort_IT+0x28c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d013      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a7a      	ldr	r2, [pc, #488]	; (80012a0 <HAL_DMA_Abort_IT+0x290>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00e      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a79      	ldr	r2, [pc, #484]	; (80012a4 <HAL_DMA_Abort_IT+0x294>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d009      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a77      	ldr	r2, [pc, #476]	; (80012a8 <HAL_DMA_Abort_IT+0x298>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d004      	beq.n	80010d8 <HAL_DMA_Abort_IT+0xc8>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a76      	ldr	r2, [pc, #472]	; (80012ac <HAL_DMA_Abort_IT+0x29c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d101      	bne.n	80010dc <HAL_DMA_Abort_IT+0xcc>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_DMA_Abort_IT+0xce>
 80010dc:	2300      	movs	r3, #0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d065      	beq.n	80011ae <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2204      	movs	r2, #4
 80010e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a60      	ldr	r2, [pc, #384]	; (8001270 <HAL_DMA_Abort_IT+0x260>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d04a      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a5e      	ldr	r2, [pc, #376]	; (8001274 <HAL_DMA_Abort_IT+0x264>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d045      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a5d      	ldr	r2, [pc, #372]	; (8001278 <HAL_DMA_Abort_IT+0x268>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d040      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a5b      	ldr	r2, [pc, #364]	; (800127c <HAL_DMA_Abort_IT+0x26c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d03b      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a5a      	ldr	r2, [pc, #360]	; (8001280 <HAL_DMA_Abort_IT+0x270>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d036      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a58      	ldr	r2, [pc, #352]	; (8001284 <HAL_DMA_Abort_IT+0x274>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d031      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a57      	ldr	r2, [pc, #348]	; (8001288 <HAL_DMA_Abort_IT+0x278>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d02c      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a55      	ldr	r2, [pc, #340]	; (800128c <HAL_DMA_Abort_IT+0x27c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d027      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a54      	ldr	r2, [pc, #336]	; (8001290 <HAL_DMA_Abort_IT+0x280>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d022      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_DMA_Abort_IT+0x284>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01d      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a51      	ldr	r2, [pc, #324]	; (8001298 <HAL_DMA_Abort_IT+0x288>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d018      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a4f      	ldr	r2, [pc, #316]	; (800129c <HAL_DMA_Abort_IT+0x28c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <HAL_DMA_Abort_IT+0x290>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00e      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a4c      	ldr	r2, [pc, #304]	; (80012a4 <HAL_DMA_Abort_IT+0x294>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d009      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a4b      	ldr	r2, [pc, #300]	; (80012a8 <HAL_DMA_Abort_IT+0x298>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d004      	beq.n	800118a <HAL_DMA_Abort_IT+0x17a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a49      	ldr	r2, [pc, #292]	; (80012ac <HAL_DMA_Abort_IT+0x29c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d108      	bne.n	800119c <HAL_DMA_Abort_IT+0x18c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0201 	bic.w	r2, r2, #1
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e147      	b.n	800142c <HAL_DMA_Abort_IT+0x41c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e13e      	b.n	800142c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 020e 	bic.w	r2, r2, #14
 80011bc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a2b      	ldr	r2, [pc, #172]	; (8001270 <HAL_DMA_Abort_IT+0x260>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d04a      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <HAL_DMA_Abort_IT+0x264>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d045      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a28      	ldr	r2, [pc, #160]	; (8001278 <HAL_DMA_Abort_IT+0x268>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d040      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a26      	ldr	r2, [pc, #152]	; (800127c <HAL_DMA_Abort_IT+0x26c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d03b      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a25      	ldr	r2, [pc, #148]	; (8001280 <HAL_DMA_Abort_IT+0x270>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d036      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a23      	ldr	r2, [pc, #140]	; (8001284 <HAL_DMA_Abort_IT+0x274>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d031      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a22      	ldr	r2, [pc, #136]	; (8001288 <HAL_DMA_Abort_IT+0x278>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d02c      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a20      	ldr	r2, [pc, #128]	; (800128c <HAL_DMA_Abort_IT+0x27c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d027      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <HAL_DMA_Abort_IT+0x280>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d022      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_DMA_Abort_IT+0x284>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01d      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <HAL_DMA_Abort_IT+0x288>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d018      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1a      	ldr	r2, [pc, #104]	; (800129c <HAL_DMA_Abort_IT+0x28c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <HAL_DMA_Abort_IT+0x290>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00e      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <HAL_DMA_Abort_IT+0x294>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d009      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <HAL_DMA_Abort_IT+0x298>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d004      	beq.n	800125e <HAL_DMA_Abort_IT+0x24e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a14      	ldr	r2, [pc, #80]	; (80012ac <HAL_DMA_Abort_IT+0x29c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d128      	bne.n	80012b0 <HAL_DMA_Abort_IT+0x2a0>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e027      	b.n	80012c0 <HAL_DMA_Abort_IT+0x2b0>
 8001270:	40020010 	.word	0x40020010
 8001274:	40020028 	.word	0x40020028
 8001278:	40020040 	.word	0x40020040
 800127c:	40020058 	.word	0x40020058
 8001280:	40020070 	.word	0x40020070
 8001284:	40020088 	.word	0x40020088
 8001288:	400200a0 	.word	0x400200a0
 800128c:	400200b8 	.word	0x400200b8
 8001290:	40020410 	.word	0x40020410
 8001294:	40020428 	.word	0x40020428
 8001298:	40020440 	.word	0x40020440
 800129c:	40020458 	.word	0x40020458
 80012a0:	40020470 	.word	0x40020470
 80012a4:	40020488 	.word	0x40020488
 80012a8:	400204a0 	.word	0x400204a0
 80012ac:	400204b8 	.word	0x400204b8
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a5c      	ldr	r2, [pc, #368]	; (8001438 <HAL_DMA_Abort_IT+0x428>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d072      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a5b      	ldr	r2, [pc, #364]	; (800143c <HAL_DMA_Abort_IT+0x42c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d06d      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a59      	ldr	r2, [pc, #356]	; (8001440 <HAL_DMA_Abort_IT+0x430>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d068      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a58      	ldr	r2, [pc, #352]	; (8001444 <HAL_DMA_Abort_IT+0x434>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d063      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_DMA_Abort_IT+0x438>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d05e      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a55      	ldr	r2, [pc, #340]	; (800144c <HAL_DMA_Abort_IT+0x43c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d059      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a53      	ldr	r2, [pc, #332]	; (8001450 <HAL_DMA_Abort_IT+0x440>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d054      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a52      	ldr	r2, [pc, #328]	; (8001454 <HAL_DMA_Abort_IT+0x444>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d04f      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_DMA_Abort_IT+0x448>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d04a      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_DMA_Abort_IT+0x44c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d045      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <HAL_DMA_Abort_IT+0x450>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d040      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_DMA_Abort_IT+0x454>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d03b      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <HAL_DMA_Abort_IT+0x458>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d036      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_DMA_Abort_IT+0x45c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d031      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a47      	ldr	r2, [pc, #284]	; (8001470 <HAL_DMA_Abort_IT+0x460>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d02c      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a46      	ldr	r2, [pc, #280]	; (8001474 <HAL_DMA_Abort_IT+0x464>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d027      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a44      	ldr	r2, [pc, #272]	; (8001478 <HAL_DMA_Abort_IT+0x468>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d022      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a43      	ldr	r2, [pc, #268]	; (800147c <HAL_DMA_Abort_IT+0x46c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d01d      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a41      	ldr	r2, [pc, #260]	; (8001480 <HAL_DMA_Abort_IT+0x470>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d018      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a40      	ldr	r2, [pc, #256]	; (8001484 <HAL_DMA_Abort_IT+0x474>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d013      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <HAL_DMA_Abort_IT+0x478>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00e      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a3d      	ldr	r2, [pc, #244]	; (800148c <HAL_DMA_Abort_IT+0x47c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d009      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a3b      	ldr	r2, [pc, #236]	; (8001490 <HAL_DMA_Abort_IT+0x480>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d004      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x3a0>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a3a      	ldr	r2, [pc, #232]	; (8001494 <HAL_DMA_Abort_IT+0x484>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_DMA_Abort_IT+0x3a4>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <HAL_DMA_Abort_IT+0x3a6>
 80013b4:	2300      	movs	r3, #0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d028      	beq.n	800140c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	2201      	movs	r2, #1
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80013e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00c      	beq.n	800140c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001400:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800140a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40020010 	.word	0x40020010
 800143c:	40020028 	.word	0x40020028
 8001440:	40020040 	.word	0x40020040
 8001444:	40020058 	.word	0x40020058
 8001448:	40020070 	.word	0x40020070
 800144c:	40020088 	.word	0x40020088
 8001450:	400200a0 	.word	0x400200a0
 8001454:	400200b8 	.word	0x400200b8
 8001458:	40020410 	.word	0x40020410
 800145c:	40020428 	.word	0x40020428
 8001460:	40020440 	.word	0x40020440
 8001464:	40020458 	.word	0x40020458
 8001468:	40020470 	.word	0x40020470
 800146c:	40020488 	.word	0x40020488
 8001470:	400204a0 	.word	0x400204a0
 8001474:	400204b8 	.word	0x400204b8
 8001478:	58025408 	.word	0x58025408
 800147c:	5802541c 	.word	0x5802541c
 8001480:	58025430 	.word	0x58025430
 8001484:	58025444 	.word	0x58025444
 8001488:	58025458 	.word	0x58025458
 800148c:	5802546c 	.word	0x5802546c
 8001490:	58025480 	.word	0x58025480
 8001494:	58025494 	.word	0x58025494

08001498 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014a4:	4b67      	ldr	r3, [pc, #412]	; (8001644 <HAL_DMA_IRQHandler+0x1ac>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a67      	ldr	r2, [pc, #412]	; (8001648 <HAL_DMA_IRQHandler+0x1b0>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0a9b      	lsrs	r3, r3, #10
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5f      	ldr	r2, [pc, #380]	; (800164c <HAL_DMA_IRQHandler+0x1b4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d04a      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a5d      	ldr	r2, [pc, #372]	; (8001650 <HAL_DMA_IRQHandler+0x1b8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d045      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a5c      	ldr	r2, [pc, #368]	; (8001654 <HAL_DMA_IRQHandler+0x1bc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d040      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a5a      	ldr	r2, [pc, #360]	; (8001658 <HAL_DMA_IRQHandler+0x1c0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d03b      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a59      	ldr	r2, [pc, #356]	; (800165c <HAL_DMA_IRQHandler+0x1c4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d036      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a57      	ldr	r2, [pc, #348]	; (8001660 <HAL_DMA_IRQHandler+0x1c8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d031      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a56      	ldr	r2, [pc, #344]	; (8001664 <HAL_DMA_IRQHandler+0x1cc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d02c      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a54      	ldr	r2, [pc, #336]	; (8001668 <HAL_DMA_IRQHandler+0x1d0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d027      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a53      	ldr	r2, [pc, #332]	; (800166c <HAL_DMA_IRQHandler+0x1d4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d022      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a51      	ldr	r2, [pc, #324]	; (8001670 <HAL_DMA_IRQHandler+0x1d8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01d      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a50      	ldr	r2, [pc, #320]	; (8001674 <HAL_DMA_IRQHandler+0x1dc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d018      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a4e      	ldr	r2, [pc, #312]	; (8001678 <HAL_DMA_IRQHandler+0x1e0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a4d      	ldr	r2, [pc, #308]	; (800167c <HAL_DMA_IRQHandler+0x1e4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d00e      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a4b      	ldr	r2, [pc, #300]	; (8001680 <HAL_DMA_IRQHandler+0x1e8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d009      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a4a      	ldr	r2, [pc, #296]	; (8001684 <HAL_DMA_IRQHandler+0x1ec>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d004      	beq.n	800156a <HAL_DMA_IRQHandler+0xd2>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a48      	ldr	r2, [pc, #288]	; (8001688 <HAL_DMA_IRQHandler+0x1f0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_DMA_IRQHandler+0xd6>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_DMA_IRQHandler+0xd8>
 800156e:	2300      	movs	r3, #0
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 842b 	beq.w	8001dcc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	2208      	movs	r2, #8
 8001580:	409a      	lsls	r2, r3
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80a2 	beq.w	80016d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2e      	ldr	r2, [pc, #184]	; (800164c <HAL_DMA_IRQHandler+0x1b4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d04a      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a2d      	ldr	r2, [pc, #180]	; (8001650 <HAL_DMA_IRQHandler+0x1b8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d045      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2b      	ldr	r2, [pc, #172]	; (8001654 <HAL_DMA_IRQHandler+0x1bc>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d040      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2a      	ldr	r2, [pc, #168]	; (8001658 <HAL_DMA_IRQHandler+0x1c0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d03b      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a28      	ldr	r2, [pc, #160]	; (800165c <HAL_DMA_IRQHandler+0x1c4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d036      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a27      	ldr	r2, [pc, #156]	; (8001660 <HAL_DMA_IRQHandler+0x1c8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d031      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a25      	ldr	r2, [pc, #148]	; (8001664 <HAL_DMA_IRQHandler+0x1cc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d02c      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a24      	ldr	r2, [pc, #144]	; (8001668 <HAL_DMA_IRQHandler+0x1d0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d027      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a22      	ldr	r2, [pc, #136]	; (800166c <HAL_DMA_IRQHandler+0x1d4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d022      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a21      	ldr	r2, [pc, #132]	; (8001670 <HAL_DMA_IRQHandler+0x1d8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d01d      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_DMA_IRQHandler+0x1dc>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d018      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_DMA_IRQHandler+0x1e0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d013      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1c      	ldr	r2, [pc, #112]	; (800167c <HAL_DMA_IRQHandler+0x1e4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00e      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <HAL_DMA_IRQHandler+0x1e8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d009      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_DMA_IRQHandler+0x1ec>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d004      	beq.n	800162c <HAL_DMA_IRQHandler+0x194>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_DMA_IRQHandler+0x1f0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d12f      	bne.n	800168c <HAL_DMA_IRQHandler+0x1f4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf14      	ite	ne
 800163a:	2301      	movne	r3, #1
 800163c:	2300      	moveq	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	e02e      	b.n	80016a0 <HAL_DMA_IRQHandler+0x208>
 8001642:	bf00      	nop
 8001644:	24000410 	.word	0x24000410
 8001648:	1b4e81b5 	.word	0x1b4e81b5
 800164c:	40020010 	.word	0x40020010
 8001650:	40020028 	.word	0x40020028
 8001654:	40020040 	.word	0x40020040
 8001658:	40020058 	.word	0x40020058
 800165c:	40020070 	.word	0x40020070
 8001660:	40020088 	.word	0x40020088
 8001664:	400200a0 	.word	0x400200a0
 8001668:	400200b8 	.word	0x400200b8
 800166c:	40020410 	.word	0x40020410
 8001670:	40020428 	.word	0x40020428
 8001674:	40020440 	.word	0x40020440
 8001678:	40020458 	.word	0x40020458
 800167c:	40020470 	.word	0x40020470
 8001680:	40020488 	.word	0x40020488
 8001684:	400204a0 	.word	0x400204a0
 8001688:	400204b8 	.word	0x400204b8
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf14      	ite	ne
 800169a:	2301      	movne	r3, #1
 800169c:	2300      	moveq	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d015      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0204 	bic.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	2208      	movs	r2, #8
 80016be:	409a      	lsls	r2, r3
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d06e      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a69      	ldr	r2, [pc, #420]	; (8001890 <HAL_DMA_IRQHandler+0x3f8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d04a      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a67      	ldr	r2, [pc, #412]	; (8001894 <HAL_DMA_IRQHandler+0x3fc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d045      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a66      	ldr	r2, [pc, #408]	; (8001898 <HAL_DMA_IRQHandler+0x400>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d040      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a64      	ldr	r2, [pc, #400]	; (800189c <HAL_DMA_IRQHandler+0x404>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d03b      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a63      	ldr	r2, [pc, #396]	; (80018a0 <HAL_DMA_IRQHandler+0x408>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d036      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a61      	ldr	r2, [pc, #388]	; (80018a4 <HAL_DMA_IRQHandler+0x40c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d031      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a60      	ldr	r2, [pc, #384]	; (80018a8 <HAL_DMA_IRQHandler+0x410>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d02c      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_DMA_IRQHandler+0x414>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d027      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5d      	ldr	r2, [pc, #372]	; (80018b0 <HAL_DMA_IRQHandler+0x418>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d022      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <HAL_DMA_IRQHandler+0x41c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01d      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a5a      	ldr	r2, [pc, #360]	; (80018b8 <HAL_DMA_IRQHandler+0x420>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d018      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_DMA_IRQHandler+0x424>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a57      	ldr	r2, [pc, #348]	; (80018c0 <HAL_DMA_IRQHandler+0x428>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00e      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a55      	ldr	r2, [pc, #340]	; (80018c4 <HAL_DMA_IRQHandler+0x42c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d009      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a54      	ldr	r2, [pc, #336]	; (80018c8 <HAL_DMA_IRQHandler+0x430>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d004      	beq.n	8001786 <HAL_DMA_IRQHandler+0x2ee>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_DMA_IRQHandler+0x434>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10a      	bne.n	800179c <HAL_DMA_IRQHandler+0x304>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e003      	b.n	80017a4 <HAL_DMA_IRQHandler+0x30c>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00d      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	2201      	movs	r2, #1
 80017b2:	409a      	lsls	r2, r3
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	f043 0202 	orr.w	r2, r3, #2
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2204      	movs	r2, #4
 80017ce:	409a      	lsls	r2, r3
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 808f 	beq.w	80018f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2c      	ldr	r2, [pc, #176]	; (8001890 <HAL_DMA_IRQHandler+0x3f8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d04a      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <HAL_DMA_IRQHandler+0x3fc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d045      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a29      	ldr	r2, [pc, #164]	; (8001898 <HAL_DMA_IRQHandler+0x400>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d040      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <HAL_DMA_IRQHandler+0x404>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d03b      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <HAL_DMA_IRQHandler+0x408>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d036      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a24      	ldr	r2, [pc, #144]	; (80018a4 <HAL_DMA_IRQHandler+0x40c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d031      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <HAL_DMA_IRQHandler+0x410>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d02c      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a21      	ldr	r2, [pc, #132]	; (80018ac <HAL_DMA_IRQHandler+0x414>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d027      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <HAL_DMA_IRQHandler+0x418>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d022      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_DMA_IRQHandler+0x41c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01d      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_DMA_IRQHandler+0x420>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d018      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <HAL_DMA_IRQHandler+0x424>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <HAL_DMA_IRQHandler+0x428>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00e      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <HAL_DMA_IRQHandler+0x42c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d009      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_DMA_IRQHandler+0x430>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d004      	beq.n	800187a <HAL_DMA_IRQHandler+0x3e2>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a15      	ldr	r2, [pc, #84]	; (80018cc <HAL_DMA_IRQHandler+0x434>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d12a      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x438>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	bf14      	ite	ne
 8001888:	2301      	movne	r3, #1
 800188a:	2300      	moveq	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	e023      	b.n	80018d8 <HAL_DMA_IRQHandler+0x440>
 8001890:	40020010 	.word	0x40020010
 8001894:	40020028 	.word	0x40020028
 8001898:	40020040 	.word	0x40020040
 800189c:	40020058 	.word	0x40020058
 80018a0:	40020070 	.word	0x40020070
 80018a4:	40020088 	.word	0x40020088
 80018a8:	400200a0 	.word	0x400200a0
 80018ac:	400200b8 	.word	0x400200b8
 80018b0:	40020410 	.word	0x40020410
 80018b4:	40020428 	.word	0x40020428
 80018b8:	40020440 	.word	0x40020440
 80018bc:	40020458 	.word	0x40020458
 80018c0:	40020470 	.word	0x40020470
 80018c4:	40020488 	.word	0x40020488
 80018c8:	400204a0 	.word	0x400204a0
 80018cc:	400204b8 	.word	0x400204b8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00d      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	2204      	movs	r2, #4
 80018e6:	409a      	lsls	r2, r3
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	f043 0204 	orr.w	r2, r3, #4
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2210      	movs	r2, #16
 8001902:	409a      	lsls	r2, r3
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a6 	beq.w	8001a5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a85      	ldr	r2, [pc, #532]	; (8001b28 <HAL_DMA_IRQHandler+0x690>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d04a      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a83      	ldr	r2, [pc, #524]	; (8001b2c <HAL_DMA_IRQHandler+0x694>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d045      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a82      	ldr	r2, [pc, #520]	; (8001b30 <HAL_DMA_IRQHandler+0x698>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d040      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a80      	ldr	r2, [pc, #512]	; (8001b34 <HAL_DMA_IRQHandler+0x69c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d03b      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7f      	ldr	r2, [pc, #508]	; (8001b38 <HAL_DMA_IRQHandler+0x6a0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d036      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a7d      	ldr	r2, [pc, #500]	; (8001b3c <HAL_DMA_IRQHandler+0x6a4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d031      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7c      	ldr	r2, [pc, #496]	; (8001b40 <HAL_DMA_IRQHandler+0x6a8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d02c      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7a      	ldr	r2, [pc, #488]	; (8001b44 <HAL_DMA_IRQHandler+0x6ac>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d027      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a79      	ldr	r2, [pc, #484]	; (8001b48 <HAL_DMA_IRQHandler+0x6b0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d022      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a77      	ldr	r2, [pc, #476]	; (8001b4c <HAL_DMA_IRQHandler+0x6b4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01d      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a76      	ldr	r2, [pc, #472]	; (8001b50 <HAL_DMA_IRQHandler+0x6b8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d018      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a74      	ldr	r2, [pc, #464]	; (8001b54 <HAL_DMA_IRQHandler+0x6bc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a73      	ldr	r2, [pc, #460]	; (8001b58 <HAL_DMA_IRQHandler+0x6c0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00e      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a71      	ldr	r2, [pc, #452]	; (8001b5c <HAL_DMA_IRQHandler+0x6c4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d009      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a70      	ldr	r2, [pc, #448]	; (8001b60 <HAL_DMA_IRQHandler+0x6c8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d004      	beq.n	80019ae <HAL_DMA_IRQHandler+0x516>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a6e      	ldr	r2, [pc, #440]	; (8001b64 <HAL_DMA_IRQHandler+0x6cc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10a      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x52c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e009      	b.n	80019d8 <HAL_DMA_IRQHandler+0x540>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bf14      	ite	ne
 80019d2:	2301      	movne	r3, #1
 80019d4:	2300      	moveq	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d03e      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2210      	movs	r2, #16
 80019e6:	409a      	lsls	r2, r3
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d018      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d108      	bne.n	8001a1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d024      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
 8001a18:	e01f      	b.n	8001a5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01b      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
 8001a2a:	e016      	b.n	8001a5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d107      	bne.n	8001a4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0208 	bic.w	r2, r2, #8
 8001a48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	2220      	movs	r2, #32
 8001a64:	409a      	lsls	r2, r3
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8110 	beq.w	8001c90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2c      	ldr	r2, [pc, #176]	; (8001b28 <HAL_DMA_IRQHandler+0x690>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d04a      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <HAL_DMA_IRQHandler+0x694>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d045      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a29      	ldr	r2, [pc, #164]	; (8001b30 <HAL_DMA_IRQHandler+0x698>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d040      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <HAL_DMA_IRQHandler+0x69c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d03b      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_DMA_IRQHandler+0x6a0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d036      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a25      	ldr	r2, [pc, #148]	; (8001b3c <HAL_DMA_IRQHandler+0x6a4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d031      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <HAL_DMA_IRQHandler+0x6a8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02c      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <HAL_DMA_IRQHandler+0x6ac>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d027      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a20      	ldr	r2, [pc, #128]	; (8001b48 <HAL_DMA_IRQHandler+0x6b0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d022      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <HAL_DMA_IRQHandler+0x6b4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d01d      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_DMA_IRQHandler+0x6b8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d018      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_DMA_IRQHandler+0x6bc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d013      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1a      	ldr	r2, [pc, #104]	; (8001b58 <HAL_DMA_IRQHandler+0x6c0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00e      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_DMA_IRQHandler+0x6c4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d009      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_DMA_IRQHandler+0x6c8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d004      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x678>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_DMA_IRQHandler+0x6cc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d12b      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x6d0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bf14      	ite	ne
 8001b1e:	2301      	movne	r3, #1
 8001b20:	2300      	moveq	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	e02a      	b.n	8001b7c <HAL_DMA_IRQHandler+0x6e4>
 8001b26:	bf00      	nop
 8001b28:	40020010 	.word	0x40020010
 8001b2c:	40020028 	.word	0x40020028
 8001b30:	40020040 	.word	0x40020040
 8001b34:	40020058 	.word	0x40020058
 8001b38:	40020070 	.word	0x40020070
 8001b3c:	40020088 	.word	0x40020088
 8001b40:	400200a0 	.word	0x400200a0
 8001b44:	400200b8 	.word	0x400200b8
 8001b48:	40020410 	.word	0x40020410
 8001b4c:	40020428 	.word	0x40020428
 8001b50:	40020440 	.word	0x40020440
 8001b54:	40020458 	.word	0x40020458
 8001b58:	40020470 	.word	0x40020470
 8001b5c:	40020488 	.word	0x40020488
 8001b60:	400204a0 	.word	0x400204a0
 8001b64:	400204b8 	.word	0x400204b8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 8087 	beq.w	8001c90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d139      	bne.n	8001c12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0216 	bic.w	r2, r2, #22
 8001bac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <HAL_DMA_IRQHandler+0x736>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0208 	bic.w	r2, r2, #8
 8001bdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	223f      	movs	r2, #63	; 0x3f
 8001be8:	409a      	lsls	r2, r3
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 834a 	beq.w	800229c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
          }
          return;
 8001c10:	e344      	b.n	800229c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d018      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d02c      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
 8001c3e:	e027      	b.n	8001c90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d023      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	4798      	blx	r3
 8001c50:	e01e      	b.n	8001c90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0210 	bic.w	r2, r2, #16
 8001c6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 8306 	beq.w	80022a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8088 	beq.w	8001db8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2204      	movs	r2, #4
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a7a      	ldr	r2, [pc, #488]	; (8001ea0 <HAL_DMA_IRQHandler+0xa08>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d04a      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a79      	ldr	r2, [pc, #484]	; (8001ea4 <HAL_DMA_IRQHandler+0xa0c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d045      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a77      	ldr	r2, [pc, #476]	; (8001ea8 <HAL_DMA_IRQHandler+0xa10>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d040      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a76      	ldr	r2, [pc, #472]	; (8001eac <HAL_DMA_IRQHandler+0xa14>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d03b      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a74      	ldr	r2, [pc, #464]	; (8001eb0 <HAL_DMA_IRQHandler+0xa18>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d036      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a73      	ldr	r2, [pc, #460]	; (8001eb4 <HAL_DMA_IRQHandler+0xa1c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d031      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a71      	ldr	r2, [pc, #452]	; (8001eb8 <HAL_DMA_IRQHandler+0xa20>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02c      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a70      	ldr	r2, [pc, #448]	; (8001ebc <HAL_DMA_IRQHandler+0xa24>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d027      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <HAL_DMA_IRQHandler+0xa28>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d022      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6d      	ldr	r2, [pc, #436]	; (8001ec4 <HAL_DMA_IRQHandler+0xa2c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d01d      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6b      	ldr	r2, [pc, #428]	; (8001ec8 <HAL_DMA_IRQHandler+0xa30>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d018      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6a      	ldr	r2, [pc, #424]	; (8001ecc <HAL_DMA_IRQHandler+0xa34>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a68      	ldr	r2, [pc, #416]	; (8001ed0 <HAL_DMA_IRQHandler+0xa38>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a67      	ldr	r2, [pc, #412]	; (8001ed4 <HAL_DMA_IRQHandler+0xa3c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d009      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <HAL_DMA_IRQHandler+0xa40>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x8b8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a64      	ldr	r2, [pc, #400]	; (8001edc <HAL_DMA_IRQHandler+0xa44>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d108      	bne.n	8001d62 <HAL_DMA_IRQHandler+0x8ca>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e007      	b.n	8001d72 <HAL_DMA_IRQHandler+0x8da>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d307      	bcc.n	8001d8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f2      	bne.n	8001d72 <HAL_DMA_IRQHandler+0x8da>
 8001d8c:	e000      	b.n	8001d90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001d8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001da6:	e003      	b.n	8001db0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8272 	beq.w	80022a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
 8001dca:	e26c      	b.n	80022a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a43      	ldr	r2, [pc, #268]	; (8001ee0 <HAL_DMA_IRQHandler+0xa48>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d022      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x984>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a42      	ldr	r2, [pc, #264]	; (8001ee4 <HAL_DMA_IRQHandler+0xa4c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d01d      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x984>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a40      	ldr	r2, [pc, #256]	; (8001ee8 <HAL_DMA_IRQHandler+0xa50>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d018      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x984>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a3f      	ldr	r2, [pc, #252]	; (8001eec <HAL_DMA_IRQHandler+0xa54>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x984>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a3d      	ldr	r2, [pc, #244]	; (8001ef0 <HAL_DMA_IRQHandler+0xa58>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00e      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x984>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a3c      	ldr	r2, [pc, #240]	; (8001ef4 <HAL_DMA_IRQHandler+0xa5c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x984>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3a      	ldr	r2, [pc, #232]	; (8001ef8 <HAL_DMA_IRQHandler+0xa60>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x984>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a39      	ldr	r2, [pc, #228]	; (8001efc <HAL_DMA_IRQHandler+0xa64>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x988>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_DMA_IRQHandler+0x98a>
 8001e20:	2300      	movs	r3, #0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 823f 	beq.w	80022a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2204      	movs	r2, #4
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80cd 	beq.w	8001fe0 <HAL_DMA_IRQHandler+0xb48>
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80c7 	beq.w	8001fe0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d049      	beq.n	8001f00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8210 	beq.w	80022a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e88:	e20a      	b.n	80022a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8206 	beq.w	80022a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e9c:	e200      	b.n	80022a0 <HAL_DMA_IRQHandler+0xe08>
 8001e9e:	bf00      	nop
 8001ea0:	40020010 	.word	0x40020010
 8001ea4:	40020028 	.word	0x40020028
 8001ea8:	40020040 	.word	0x40020040
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	40020070 	.word	0x40020070
 8001eb4:	40020088 	.word	0x40020088
 8001eb8:	400200a0 	.word	0x400200a0
 8001ebc:	400200b8 	.word	0x400200b8
 8001ec0:	40020410 	.word	0x40020410
 8001ec4:	40020428 	.word	0x40020428
 8001ec8:	40020440 	.word	0x40020440
 8001ecc:	40020458 	.word	0x40020458
 8001ed0:	40020470 	.word	0x40020470
 8001ed4:	40020488 	.word	0x40020488
 8001ed8:	400204a0 	.word	0x400204a0
 8001edc:	400204b8 	.word	0x400204b8
 8001ee0:	58025408 	.word	0x58025408
 8001ee4:	5802541c 	.word	0x5802541c
 8001ee8:	58025430 	.word	0x58025430
 8001eec:	58025444 	.word	0x58025444
 8001ef0:	58025458 	.word	0x58025458
 8001ef4:	5802546c 	.word	0x5802546c
 8001ef8:	58025480 	.word	0x58025480
 8001efc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d160      	bne.n	8001fcc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a8c      	ldr	r2, [pc, #560]	; (8002140 <HAL_DMA_IRQHandler+0xca8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d04a      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a8a      	ldr	r2, [pc, #552]	; (8002144 <HAL_DMA_IRQHandler+0xcac>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d045      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a89      	ldr	r2, [pc, #548]	; (8002148 <HAL_DMA_IRQHandler+0xcb0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d040      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a87      	ldr	r2, [pc, #540]	; (800214c <HAL_DMA_IRQHandler+0xcb4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d03b      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a86      	ldr	r2, [pc, #536]	; (8002150 <HAL_DMA_IRQHandler+0xcb8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d036      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a84      	ldr	r2, [pc, #528]	; (8002154 <HAL_DMA_IRQHandler+0xcbc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d031      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a83      	ldr	r2, [pc, #524]	; (8002158 <HAL_DMA_IRQHandler+0xcc0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d02c      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a81      	ldr	r2, [pc, #516]	; (800215c <HAL_DMA_IRQHandler+0xcc4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d027      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a80      	ldr	r2, [pc, #512]	; (8002160 <HAL_DMA_IRQHandler+0xcc8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d022      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a7e      	ldr	r2, [pc, #504]	; (8002164 <HAL_DMA_IRQHandler+0xccc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01d      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7d      	ldr	r2, [pc, #500]	; (8002168 <HAL_DMA_IRQHandler+0xcd0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d018      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a7b      	ldr	r2, [pc, #492]	; (800216c <HAL_DMA_IRQHandler+0xcd4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7a      	ldr	r2, [pc, #488]	; (8002170 <HAL_DMA_IRQHandler+0xcd8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a78      	ldr	r2, [pc, #480]	; (8002174 <HAL_DMA_IRQHandler+0xcdc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a77      	ldr	r2, [pc, #476]	; (8002178 <HAL_DMA_IRQHandler+0xce0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_DMA_IRQHandler+0xb12>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a75      	ldr	r2, [pc, #468]	; (800217c <HAL_DMA_IRQHandler+0xce4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d108      	bne.n	8001fbc <HAL_DMA_IRQHandler+0xb24>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0208 	bic.w	r2, r2, #8
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e007      	b.n	8001fcc <HAL_DMA_IRQHandler+0xb34>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0204 	bic.w	r2, r2, #4
 8001fca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 8165 	beq.w	80022a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001fde:	e15f      	b.n	80022a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	2202      	movs	r2, #2
 8001fea:	409a      	lsls	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80c5 	beq.w	8002180 <HAL_DMA_IRQHandler+0xce8>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80bf 	beq.w	8002180 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2202      	movs	r2, #2
 800200c:	409a      	lsls	r2, r3
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d018      	beq.n	800204e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 813a 	beq.w	80022a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002038:	e134      	b.n	80022a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8130 	beq.w	80022a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800204c:	e12a      	b.n	80022a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d168      	bne.n	800212a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a38      	ldr	r2, [pc, #224]	; (8002140 <HAL_DMA_IRQHandler+0xca8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d04a      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a37      	ldr	r2, [pc, #220]	; (8002144 <HAL_DMA_IRQHandler+0xcac>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d045      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a35      	ldr	r2, [pc, #212]	; (8002148 <HAL_DMA_IRQHandler+0xcb0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d040      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a34      	ldr	r2, [pc, #208]	; (800214c <HAL_DMA_IRQHandler+0xcb4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d03b      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a32      	ldr	r2, [pc, #200]	; (8002150 <HAL_DMA_IRQHandler+0xcb8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d036      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a31      	ldr	r2, [pc, #196]	; (8002154 <HAL_DMA_IRQHandler+0xcbc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d031      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <HAL_DMA_IRQHandler+0xcc0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d02c      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_DMA_IRQHandler+0xcc4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d027      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2c      	ldr	r2, [pc, #176]	; (8002160 <HAL_DMA_IRQHandler+0xcc8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d022      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <HAL_DMA_IRQHandler+0xccc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d01d      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a29      	ldr	r2, [pc, #164]	; (8002168 <HAL_DMA_IRQHandler+0xcd0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d018      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_DMA_IRQHandler+0xcd4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d013      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_DMA_IRQHandler+0xcd8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00e      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_DMA_IRQHandler+0xcdc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d009      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a23      	ldr	r2, [pc, #140]	; (8002178 <HAL_DMA_IRQHandler+0xce0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d004      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xc60>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a22      	ldr	r2, [pc, #136]	; (800217c <HAL_DMA_IRQHandler+0xce4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d108      	bne.n	800210a <HAL_DMA_IRQHandler+0xc72>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0214 	bic.w	r2, r2, #20
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e007      	b.n	800211a <HAL_DMA_IRQHandler+0xc82>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 020a 	bic.w	r2, r2, #10
 8002118:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80b8 	beq.w	80022a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800213c:	e0b2      	b.n	80022a4 <HAL_DMA_IRQHandler+0xe0c>
 800213e:	bf00      	nop
 8002140:	40020010 	.word	0x40020010
 8002144:	40020028 	.word	0x40020028
 8002148:	40020040 	.word	0x40020040
 800214c:	40020058 	.word	0x40020058
 8002150:	40020070 	.word	0x40020070
 8002154:	40020088 	.word	0x40020088
 8002158:	400200a0 	.word	0x400200a0
 800215c:	400200b8 	.word	0x400200b8
 8002160:	40020410 	.word	0x40020410
 8002164:	40020428 	.word	0x40020428
 8002168:	40020440 	.word	0x40020440
 800216c:	40020458 	.word	0x40020458
 8002170:	40020470 	.word	0x40020470
 8002174:	40020488 	.word	0x40020488
 8002178:	400204a0 	.word	0x400204a0
 800217c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2208      	movs	r2, #8
 800218a:	409a      	lsls	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8088 	beq.w	80022a6 <HAL_DMA_IRQHandler+0xe0e>
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8082 	beq.w	80022a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a41      	ldr	r2, [pc, #260]	; (80022ac <HAL_DMA_IRQHandler+0xe14>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d04a      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3f      	ldr	r2, [pc, #252]	; (80022b0 <HAL_DMA_IRQHandler+0xe18>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d045      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3e      	ldr	r2, [pc, #248]	; (80022b4 <HAL_DMA_IRQHandler+0xe1c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d040      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a3c      	ldr	r2, [pc, #240]	; (80022b8 <HAL_DMA_IRQHandler+0xe20>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d03b      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_DMA_IRQHandler+0xe24>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d036      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a39      	ldr	r2, [pc, #228]	; (80022c0 <HAL_DMA_IRQHandler+0xe28>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d031      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a38      	ldr	r2, [pc, #224]	; (80022c4 <HAL_DMA_IRQHandler+0xe2c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d02c      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <HAL_DMA_IRQHandler+0xe30>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d027      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a35      	ldr	r2, [pc, #212]	; (80022cc <HAL_DMA_IRQHandler+0xe34>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d022      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a33      	ldr	r2, [pc, #204]	; (80022d0 <HAL_DMA_IRQHandler+0xe38>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01d      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <HAL_DMA_IRQHandler+0xe3c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d018      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <HAL_DMA_IRQHandler+0xe40>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <HAL_DMA_IRQHandler+0xe44>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00e      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <HAL_DMA_IRQHandler+0xe48>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2c      	ldr	r2, [pc, #176]	; (80022e4 <HAL_DMA_IRQHandler+0xe4c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d004      	beq.n	8002242 <HAL_DMA_IRQHandler+0xdaa>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_DMA_IRQHandler+0xe50>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d108      	bne.n	8002254 <HAL_DMA_IRQHandler+0xdbc>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 021c 	bic.w	r2, r2, #28
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e007      	b.n	8002264 <HAL_DMA_IRQHandler+0xdcc>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 020e 	bic.w	r2, r2, #14
 8002262:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2201      	movs	r2, #1
 800226e:	409a      	lsls	r2, r3
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
 800229a:	e004      	b.n	80022a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800229c:	bf00      	nop
 800229e:	e002      	b.n	80022a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022a0:	bf00      	nop
 80022a2:	e000      	b.n	80022a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80022a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80022a6:	3728      	adds	r7, #40	; 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40020010 	.word	0x40020010
 80022b0:	40020028 	.word	0x40020028
 80022b4:	40020040 	.word	0x40020040
 80022b8:	40020058 	.word	0x40020058
 80022bc:	40020070 	.word	0x40020070
 80022c0:	40020088 	.word	0x40020088
 80022c4:	400200a0 	.word	0x400200a0
 80022c8:	400200b8 	.word	0x400200b8
 80022cc:	40020410 	.word	0x40020410
 80022d0:	40020428 	.word	0x40020428
 80022d4:	40020440 	.word	0x40020440
 80022d8:	40020458 	.word	0x40020458
 80022dc:	40020470 	.word	0x40020470
 80022e0:	40020488 	.word	0x40020488
 80022e4:	400204a0 	.word	0x400204a0
 80022e8:	400204b8 	.word	0x400204b8

080022ec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fa:	b2db      	uxtb	r3, r3
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a42      	ldr	r2, [pc, #264]	; (8002420 <DMA_CalcBaseAndBitshift+0x118>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d04a      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a41      	ldr	r2, [pc, #260]	; (8002424 <DMA_CalcBaseAndBitshift+0x11c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d045      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a3f      	ldr	r2, [pc, #252]	; (8002428 <DMA_CalcBaseAndBitshift+0x120>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d040      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a3e      	ldr	r2, [pc, #248]	; (800242c <DMA_CalcBaseAndBitshift+0x124>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d03b      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a3c      	ldr	r2, [pc, #240]	; (8002430 <DMA_CalcBaseAndBitshift+0x128>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d036      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a3b      	ldr	r2, [pc, #236]	; (8002434 <DMA_CalcBaseAndBitshift+0x12c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d031      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a39      	ldr	r2, [pc, #228]	; (8002438 <DMA_CalcBaseAndBitshift+0x130>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d02c      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a38      	ldr	r2, [pc, #224]	; (800243c <DMA_CalcBaseAndBitshift+0x134>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d027      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a36      	ldr	r2, [pc, #216]	; (8002440 <DMA_CalcBaseAndBitshift+0x138>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d022      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a35      	ldr	r2, [pc, #212]	; (8002444 <DMA_CalcBaseAndBitshift+0x13c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d01d      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a33      	ldr	r2, [pc, #204]	; (8002448 <DMA_CalcBaseAndBitshift+0x140>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d018      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a32      	ldr	r2, [pc, #200]	; (800244c <DMA_CalcBaseAndBitshift+0x144>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d013      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a30      	ldr	r2, [pc, #192]	; (8002450 <DMA_CalcBaseAndBitshift+0x148>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00e      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <DMA_CalcBaseAndBitshift+0x14c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d009      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2d      	ldr	r2, [pc, #180]	; (8002458 <DMA_CalcBaseAndBitshift+0x150>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d004      	beq.n	80023b0 <DMA_CalcBaseAndBitshift+0xa8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2c      	ldr	r2, [pc, #176]	; (800245c <DMA_CalcBaseAndBitshift+0x154>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <DMA_CalcBaseAndBitshift+0xac>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <DMA_CalcBaseAndBitshift+0xae>
 80023b4:	2300      	movs	r3, #0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d024      	beq.n	8002404 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3b10      	subs	r3, #16
 80023c2:	4a27      	ldr	r2, [pc, #156]	; (8002460 <DMA_CalcBaseAndBitshift+0x158>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	4a24      	ldr	r2, [pc, #144]	; (8002464 <DMA_CalcBaseAndBitshift+0x15c>)
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	461a      	mov	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d908      	bls.n	80023f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <DMA_CalcBaseAndBitshift+0x160>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	1d1a      	adds	r2, r3, #4
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	; 0x58
 80023f2:	e00d      	b.n	8002410 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <DMA_CalcBaseAndBitshift+0x160>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6593      	str	r3, [r2, #88]	; 0x58
 8002402:	e005      	b.n	8002410 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40020010 	.word	0x40020010
 8002424:	40020028 	.word	0x40020028
 8002428:	40020040 	.word	0x40020040
 800242c:	40020058 	.word	0x40020058
 8002430:	40020070 	.word	0x40020070
 8002434:	40020088 	.word	0x40020088
 8002438:	400200a0 	.word	0x400200a0
 800243c:	400200b8 	.word	0x400200b8
 8002440:	40020410 	.word	0x40020410
 8002444:	40020428 	.word	0x40020428
 8002448:	40020440 	.word	0x40020440
 800244c:	40020458 	.word	0x40020458
 8002450:	40020470 	.word	0x40020470
 8002454:	40020488 	.word	0x40020488
 8002458:	400204a0 	.word	0x400204a0
 800245c:	400204b8 	.word	0x400204b8
 8002460:	aaaaaaab 	.word	0xaaaaaaab
 8002464:	0800a4c0 	.word	0x0800a4c0
 8002468:	fffffc00 	.word	0xfffffc00

0800246c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d120      	bne.n	80024c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	2b03      	cmp	r3, #3
 8002486:	d858      	bhi.n	800253a <DMA_CheckFifoParam+0xce>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <DMA_CheckFifoParam+0x24>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024b3 	.word	0x080024b3
 8002498:	080024a1 	.word	0x080024a1
 800249c:	0800253b 	.word	0x0800253b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d048      	beq.n	800253e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80024b0:	e045      	b.n	800253e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ba:	d142      	bne.n	8002542 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80024c0:	e03f      	b.n	8002542 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ca:	d123      	bne.n	8002514 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d838      	bhi.n	8002546 <DMA_CheckFifoParam+0xda>
 80024d4:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <DMA_CheckFifoParam+0x70>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	080024ed 	.word	0x080024ed
 80024e0:	080024f3 	.word	0x080024f3
 80024e4:	080024ed 	.word	0x080024ed
 80024e8:	08002505 	.word	0x08002505
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
        break;
 80024f0:	e030      	b.n	8002554 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d025      	beq.n	800254a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002502:	e022      	b.n	800254a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250c:	d11f      	bne.n	800254e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002512:	e01c      	b.n	800254e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	2b02      	cmp	r3, #2
 800251a:	d902      	bls.n	8002522 <DMA_CheckFifoParam+0xb6>
 800251c:	2b03      	cmp	r3, #3
 800251e:	d003      	beq.n	8002528 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002520:	e018      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
        break;
 8002526:	e015      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00e      	beq.n	8002552 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
    break;
 8002538:	e00b      	b.n	8002552 <DMA_CheckFifoParam+0xe6>
        break;
 800253a:	bf00      	nop
 800253c:	e00a      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
        break;
 800253e:	bf00      	nop
 8002540:	e008      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
        break;
 8002542:	bf00      	nop
 8002544:	e006      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
        break;
 8002546:	bf00      	nop
 8002548:	e004      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
        break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
        break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
    break;
 8002552:	bf00      	nop
    }
  }

  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop

08002564 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a38      	ldr	r2, [pc, #224]	; (8002658 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a36      	ldr	r2, [pc, #216]	; (800265c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d01d      	beq.n	80025c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a35      	ldr	r2, [pc, #212]	; (8002660 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d018      	beq.n	80025c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a33      	ldr	r2, [pc, #204]	; (8002664 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a32      	ldr	r2, [pc, #200]	; (8002668 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00e      	beq.n	80025c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a30      	ldr	r2, [pc, #192]	; (800266c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d009      	beq.n	80025c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a2f      	ldr	r2, [pc, #188]	; (8002670 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d004      	beq.n	80025c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80025c6:	2300      	movs	r3, #0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01a      	beq.n	8002602 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3b08      	subs	r3, #8
 80025d4:	4a28      	ldr	r2, [pc, #160]	; (8002678 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	461a      	mov	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a24      	ldr	r2, [pc, #144]	; (8002680 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80025f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2201      	movs	r2, #1
 80025fa:	409a      	lsls	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002600:	e024      	b.n	800264c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3b10      	subs	r3, #16
 800260a:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d806      	bhi.n	800262a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4a1b      	ldr	r2, [pc, #108]	; (800268c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d902      	bls.n	800262a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3308      	adds	r3, #8
 8002628:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	461a      	mov	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800263c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2201      	movs	r2, #1
 8002646:	409a      	lsls	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	58025408 	.word	0x58025408
 800265c:	5802541c 	.word	0x5802541c
 8002660:	58025430 	.word	0x58025430
 8002664:	58025444 	.word	0x58025444
 8002668:	58025458 	.word	0x58025458
 800266c:	5802546c 	.word	0x5802546c
 8002670:	58025480 	.word	0x58025480
 8002674:	58025494 	.word	0x58025494
 8002678:	cccccccd 	.word	0xcccccccd
 800267c:	16009600 	.word	0x16009600
 8002680:	58025880 	.word	0x58025880
 8002684:	aaaaaaab 	.word	0xaaaaaaab
 8002688:	400204b8 	.word	0x400204b8
 800268c:	4002040f 	.word	0x4002040f
 8002690:	10008200 	.word	0x10008200
 8002694:	40020880 	.word	0x40020880

08002698 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d04a      	beq.n	8002744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d847      	bhi.n	8002744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a25      	ldr	r2, [pc, #148]	; (8002750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d022      	beq.n	8002704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a24      	ldr	r2, [pc, #144]	; (8002754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d01d      	beq.n	8002704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a22      	ldr	r2, [pc, #136]	; (8002758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d018      	beq.n	8002704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a21      	ldr	r2, [pc, #132]	; (800275c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00e      	beq.n	8002704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d009      	beq.n	8002704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1b      	ldr	r2, [pc, #108]	; (800276c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a15      	ldr	r2, [pc, #84]	; (8002774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002720:	671a      	str	r2, [r3, #112]	; 0x70
 8002722:	e009      	b.n	8002738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	461a      	mov	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002736:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3b01      	subs	r3, #1
 800273c:	2201      	movs	r2, #1
 800273e:	409a      	lsls	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	58025408 	.word	0x58025408
 8002754:	5802541c 	.word	0x5802541c
 8002758:	58025430 	.word	0x58025430
 800275c:	58025444 	.word	0x58025444
 8002760:	58025458 	.word	0x58025458
 8002764:	5802546c 	.word	0x5802546c
 8002768:	58025480 	.word	0x58025480
 800276c:	58025494 	.word	0x58025494
 8002770:	1600963f 	.word	0x1600963f
 8002774:	58025940 	.word	0x58025940
 8002778:	1000823f 	.word	0x1000823f
 800277c:	40020940 	.word	0x40020940

08002780 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7a1b      	ldrb	r3, [r3, #8]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d155      	bne.n	8002846 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a4b      	ldr	r2, [pc, #300]	; (80028cc <HAL_DMAEx_ConfigMuxSync+0x14c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d049      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a49      	ldr	r2, [pc, #292]	; (80028d0 <HAL_DMAEx_ConfigMuxSync+0x150>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d044      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a48      	ldr	r2, [pc, #288]	; (80028d4 <HAL_DMAEx_ConfigMuxSync+0x154>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d03f      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a46      	ldr	r2, [pc, #280]	; (80028d8 <HAL_DMAEx_ConfigMuxSync+0x158>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d03a      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a45      	ldr	r2, [pc, #276]	; (80028dc <HAL_DMAEx_ConfigMuxSync+0x15c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d035      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a43      	ldr	r2, [pc, #268]	; (80028e0 <HAL_DMAEx_ConfigMuxSync+0x160>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d030      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a42      	ldr	r2, [pc, #264]	; (80028e4 <HAL_DMAEx_ConfigMuxSync+0x164>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d02b      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <HAL_DMAEx_ConfigMuxSync+0x168>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d026      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3f      	ldr	r2, [pc, #252]	; (80028ec <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d021      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3d      	ldr	r2, [pc, #244]	; (80028f0 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01c      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a3c      	ldr	r2, [pc, #240]	; (80028f4 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d017      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a3a      	ldr	r2, [pc, #232]	; (80028f8 <HAL_DMAEx_ConfigMuxSync+0x178>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d012      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a39      	ldr	r2, [pc, #228]	; (80028fc <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00d      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a37      	ldr	r2, [pc, #220]	; (8002900 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d008      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a36      	ldr	r2, [pc, #216]	; (8002904 <HAL_DMAEx_ConfigMuxSync+0x184>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a34      	ldr	r2, [pc, #208]	; (8002908 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002836:	4293      	cmp	r3, r2
 8002838:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d131      	bne.n	80028b6 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_DMAEx_ConfigMuxSync+0xe0>
 800285c:	2302      	movs	r3, #2
 800285e:	e02f      	b.n	80028c0 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002876:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	b2d9      	uxtb	r1, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	061a      	lsls	r2, r3, #24
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	3b01      	subs	r3, #1
 800288a:	04db      	lsls	r3, r3, #19
 800288c:	431a      	orrs	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	431a      	orrs	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	7a1b      	ldrb	r3, [r3, #8]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	431a      	orrs	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	7a5b      	ldrb	r3, [r3, #9]
 800289e:	025b      	lsls	r3, r3, #9
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e004      	b.n	80028c0 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40020010 	.word	0x40020010
 80028d0:	40020028 	.word	0x40020028
 80028d4:	40020040 	.word	0x40020040
 80028d8:	40020058 	.word	0x40020058
 80028dc:	40020070 	.word	0x40020070
 80028e0:	40020088 	.word	0x40020088
 80028e4:	400200a0 	.word	0x400200a0
 80028e8:	400200b8 	.word	0x400200b8
 80028ec:	40020410 	.word	0x40020410
 80028f0:	40020428 	.word	0x40020428
 80028f4:	40020440 	.word	0x40020440
 80028f8:	40020458 	.word	0x40020458
 80028fc:	40020470 	.word	0x40020470
 8002900:	40020488 	.word	0x40020488
 8002904:	400204a0 	.word	0x400204a0
 8002908:	400204b8 	.word	0x400204b8

0800290c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01a      	beq.n	800295a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002932:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800293c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d022      	beq.n	80029a8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002980:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800298a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
      }
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029be:	4b86      	ldr	r3, [pc, #536]	; (8002bd8 <HAL_GPIO_Init+0x228>)
 80029c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029c2:	e18c      	b.n	8002cde <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2101      	movs	r1, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 817e 	beq.w	8002cd8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d005      	beq.n	80029f4 <HAL_GPIO_Init+0x44>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d130      	bne.n	8002a56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 0201 	and.w	r2, r3, #1
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d017      	beq.n	8002a92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d123      	bne.n	8002ae6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	08da      	lsrs	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3208      	adds	r2, #8
 8002ae0:	69b9      	ldr	r1, [r7, #24]
 8002ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2203      	movs	r2, #3
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0203 	and.w	r2, r3, #3
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80d8 	beq.w	8002cd8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <HAL_GPIO_Init+0x22c>)
 8002b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b2e:	4a2b      	ldr	r2, [pc, #172]	; (8002bdc <HAL_GPIO_Init+0x22c>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b38:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <HAL_GPIO_Init+0x22c>)
 8002b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b46:	4a26      	ldr	r2, [pc, #152]	; (8002be0 <HAL_GPIO_Init+0x230>)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <HAL_GPIO_Init+0x234>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d04a      	beq.n	8002c08 <HAL_GPIO_Init+0x258>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_GPIO_Init+0x238>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d02b      	beq.n	8002bd2 <HAL_GPIO_Init+0x222>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <HAL_GPIO_Init+0x23c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d025      	beq.n	8002bce <HAL_GPIO_Init+0x21e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <HAL_GPIO_Init+0x240>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01f      	beq.n	8002bca <HAL_GPIO_Init+0x21a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <HAL_GPIO_Init+0x244>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d019      	beq.n	8002bc6 <HAL_GPIO_Init+0x216>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <HAL_GPIO_Init+0x248>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_GPIO_Init+0x212>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_GPIO_Init+0x24c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00d      	beq.n	8002bbe <HAL_GPIO_Init+0x20e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <HAL_GPIO_Init+0x250>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <HAL_GPIO_Init+0x20a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <HAL_GPIO_Init+0x254>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d101      	bne.n	8002bb6 <HAL_GPIO_Init+0x206>
 8002bb2:	2309      	movs	r3, #9
 8002bb4:	e029      	b.n	8002c0a <HAL_GPIO_Init+0x25a>
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	e027      	b.n	8002c0a <HAL_GPIO_Init+0x25a>
 8002bba:	2307      	movs	r3, #7
 8002bbc:	e025      	b.n	8002c0a <HAL_GPIO_Init+0x25a>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	e023      	b.n	8002c0a <HAL_GPIO_Init+0x25a>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e021      	b.n	8002c0a <HAL_GPIO_Init+0x25a>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e01f      	b.n	8002c0a <HAL_GPIO_Init+0x25a>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e01d      	b.n	8002c0a <HAL_GPIO_Init+0x25a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e01b      	b.n	8002c0a <HAL_GPIO_Init+0x25a>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e019      	b.n	8002c0a <HAL_GPIO_Init+0x25a>
 8002bd6:	bf00      	nop
 8002bd8:	58000080 	.word	0x58000080
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	58000400 	.word	0x58000400
 8002be4:	58020000 	.word	0x58020000
 8002be8:	58020400 	.word	0x58020400
 8002bec:	58020800 	.word	0x58020800
 8002bf0:	58020c00 	.word	0x58020c00
 8002bf4:	58021000 	.word	0x58021000
 8002bf8:	58021400 	.word	0x58021400
 8002bfc:	58021800 	.word	0x58021800
 8002c00:	58021c00 	.word	0x58021c00
 8002c04:	58022400 	.word	0x58022400
 8002c08:	2300      	movs	r3, #0
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	f002 0203 	and.w	r2, r2, #3
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	4093      	lsls	r3, r2
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c1a:	4938      	ldr	r1, [pc, #224]	; (8002cfc <HAL_GPIO_Init+0x34c>)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f47f ae6b 	bne.w	80029c4 <HAL_GPIO_Init+0x14>
  }
}
 8002cee:	bf00      	nop
 8002cf0:	bf00      	nop
 8002cf2:	3724      	adds	r7, #36	; 0x24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	58000400 	.word	0x58000400

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d1c:	e003      	b.n	8002d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	041a      	lsls	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f804 	bl	8002d66 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f004 ffb6 	bl	8007d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ddc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	e006      	b.n	8002e04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d104      	bne.n	8002e16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HAL_I2C_Init+0x11c>)
 8002e22:	430b      	orrs	r3, r1
 8002e24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69d9      	ldr	r1, [r3, #28]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	02008000 	.word	0x02008000

08002e9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	09db      	lsrs	r3, r3, #7
 8002ec4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	0a9b      	lsrs	r3, r3, #10
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	09db      	lsrs	r3, r3, #7
 8002ef2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f043 0208 	orr.w	r2, r3, #8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	0a5b      	lsrs	r3, r3, #9
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	09db      	lsrs	r3, r3, #7
 8002f20:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	f043 0202 	orr.w	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 030b 	and.w	r3, r3, #11
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fc77 	bl	8003844 <I2C_ITError>
  }
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	70fb      	strb	r3, [r7, #3]
 8002f92:	4613      	mov	r3, r2
 8002f94:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <I2C_Slave_ISR_IT+0x24>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e0ec      	b.n	80031dc <I2C_Slave_ISR_IT+0x1fe>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003022:	6939      	ldr	r1, [r7, #16]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f9bf 	bl	80033a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d04d      	beq.n	80030d2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800303e:	2b00      	cmp	r3, #0
 8003040:	d047      	beq.n	80030d2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d128      	bne.n	800309e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b28      	cmp	r3, #40	; 0x28
 8003056:	d108      	bne.n	800306a <I2C_Slave_ISR_IT+0x8c>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800305e:	d104      	bne.n	800306a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003060:	6939      	ldr	r1, [r7, #16]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fb98 	bl	8003798 <I2C_ITListenCplt>
 8003068:	e032      	b.n	80030d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b29      	cmp	r3, #41	; 0x29
 8003074:	d10e      	bne.n	8003094 <I2C_Slave_ISR_IT+0xb6>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800307c:	d00a      	beq.n	8003094 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2210      	movs	r2, #16
 8003084:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fcd3 	bl	8003a32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f92d 	bl	80032ec <I2C_ITSlaveSeqCplt>
 8003092:	e01d      	b.n	80030d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2210      	movs	r2, #16
 800309a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800309c:	e096      	b.n	80031cc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2210      	movs	r2, #16
 80030a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0204 	orr.w	r2, r3, #4
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <I2C_Slave_ISR_IT+0xe4>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030be:	f040 8085 	bne.w	80031cc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4619      	mov	r1, r3
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fbbb 	bl	8003844 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80030ce:	e07d      	b.n	80031cc <I2C_Slave_ISR_IT+0x1ee>
 80030d0:	e07c      	b.n	80031cc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d030      	beq.n	8003140 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d02a      	beq.n	8003140 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d018      	beq.n	8003126 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d14f      	bne.n	80031d0 <I2C_Slave_ISR_IT+0x1f2>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003136:	d04b      	beq.n	80031d0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f8d7 	bl	80032ec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800313e:	e047      	b.n	80031d0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	08db      	lsrs	r3, r3, #3
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	08db      	lsrs	r3, r3, #3
 8003150:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003158:	6939      	ldr	r1, [r7, #16]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f842 	bl	80031e4 <I2C_ITAddrCplt>
 8003160:	e037      	b.n	80031d2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d031      	beq.n	80031d2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02b      	beq.n	80031d2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d018      	beq.n	80031b6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
 80031b4:	e00d      	b.n	80031d2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031bc:	d002      	beq.n	80031c4 <I2C_Slave_ISR_IT+0x1e6>
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d106      	bne.n	80031d2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f891 	bl	80032ec <I2C_ITSlaveSeqCplt>
 80031ca:	e002      	b.n	80031d2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80031cc:	bf00      	nop
 80031ce:	e000      	b.n	80031d2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80031d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031fa:	2b28      	cmp	r3, #40	; 0x28
 80031fc:	d16a      	bne.n	80032d4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	b29b      	uxth	r3, r3
 8003218:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800321c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800322a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	b29b      	uxth	r3, r3
 8003234:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003238:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d138      	bne.n	80032b4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003242:	897b      	ldrh	r3, [r7, #10]
 8003244:	09db      	lsrs	r3, r3, #7
 8003246:	b29a      	uxth	r2, r3
 8003248:	89bb      	ldrh	r3, [r7, #12]
 800324a:	4053      	eors	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	f003 0306 	and.w	r3, r3, #6
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11c      	bne.n	8003290 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003268:	2b02      	cmp	r3, #2
 800326a:	d13b      	bne.n	80032e4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2208      	movs	r2, #8
 8003278:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003282:	89ba      	ldrh	r2, [r7, #12]
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff fe7c 	bl	8002f86 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800328e:	e029      	b.n	80032e4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003290:	893b      	ldrh	r3, [r7, #8]
 8003292:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fc0c 	bl	8003ab6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032a6:	89ba      	ldrh	r2, [r7, #12]
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fe6a 	bl	8002f86 <HAL_I2C_AddrCallback>
}
 80032b2:	e017      	b.n	80032e4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80032b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fbfc 	bl	8003ab6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032c6:	89ba      	ldrh	r2, [r7, #12]
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff fe5a 	bl	8002f86 <HAL_I2C_AddrCallback>
}
 80032d2:	e007      	b.n	80032e4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2208      	movs	r2, #8
 80032da:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	0b9b      	lsrs	r3, r3, #14
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e00d      	b.n	800333e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	0bdb      	lsrs	r3, r3, #15
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800333c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b29      	cmp	r3, #41	; 0x29
 8003348:	d112      	bne.n	8003370 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2228      	movs	r2, #40	; 0x28
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2221      	movs	r2, #33	; 0x21
 8003356:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003358:	2101      	movs	r1, #1
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fbab 	bl	8003ab6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fdf8 	bl	8002f5e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800336e:	e017      	b.n	80033a0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b2a      	cmp	r3, #42	; 0x2a
 800337a:	d111      	bne.n	80033a0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2228      	movs	r2, #40	; 0x28
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2222      	movs	r2, #34	; 0x22
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800338a:	2102      	movs	r1, #2
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fb92 	bl	8003ab6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fde9 	bl	8002f72 <HAL_I2C_SlaveRxCpltCallback>
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2220      	movs	r2, #32
 80033cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	2b21      	cmp	r3, #33	; 0x21
 80033d2:	d002      	beq.n	80033da <I2C_ITSlaveCplt+0x32>
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b29      	cmp	r3, #41	; 0x29
 80033d8:	d108      	bne.n	80033ec <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80033da:	f248 0101 	movw	r1, #32769	; 0x8001
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fb69 	bl	8003ab6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2221      	movs	r2, #33	; 0x21
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
 80033ea:	e00d      	b.n	8003408 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b22      	cmp	r3, #34	; 0x22
 80033f0:	d002      	beq.n	80033f8 <I2C_ITSlaveCplt+0x50>
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b2a      	cmp	r3, #42	; 0x2a
 80033f6:	d107      	bne.n	8003408 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80033f8:	f248 0102 	movw	r1, #32770	; 0x8002
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fb5a 	bl	8003ab6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2222      	movs	r2, #34	; 0x22
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003416:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4b80      	ldr	r3, [pc, #512]	; (8003624 <I2C_ITSlaveCplt+0x27c>)
 8003424:	400b      	ands	r3, r1
 8003426:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fb02 	bl	8003a32 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	0b9b      	lsrs	r3, r3, #14
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d07a      	beq.n	8003530 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003448:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8111 	beq.w	8003676 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a73      	ldr	r2, [pc, #460]	; (8003628 <I2C_ITSlaveCplt+0x280>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d059      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a71      	ldr	r2, [pc, #452]	; (800362c <I2C_ITSlaveCplt+0x284>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d053      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6f      	ldr	r2, [pc, #444]	; (8003630 <I2C_ITSlaveCplt+0x288>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d04d      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a6d      	ldr	r2, [pc, #436]	; (8003634 <I2C_ITSlaveCplt+0x28c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d047      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6b      	ldr	r2, [pc, #428]	; (8003638 <I2C_ITSlaveCplt+0x290>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d041      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a69      	ldr	r2, [pc, #420]	; (800363c <I2C_ITSlaveCplt+0x294>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d03b      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a67      	ldr	r2, [pc, #412]	; (8003640 <I2C_ITSlaveCplt+0x298>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d035      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a65      	ldr	r2, [pc, #404]	; (8003644 <I2C_ITSlaveCplt+0x29c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d02f      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a63      	ldr	r2, [pc, #396]	; (8003648 <I2C_ITSlaveCplt+0x2a0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d029      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a61      	ldr	r2, [pc, #388]	; (800364c <I2C_ITSlaveCplt+0x2a4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d023      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5f      	ldr	r2, [pc, #380]	; (8003650 <I2C_ITSlaveCplt+0x2a8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d01d      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5d      	ldr	r2, [pc, #372]	; (8003654 <I2C_ITSlaveCplt+0x2ac>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d017      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5b      	ldr	r2, [pc, #364]	; (8003658 <I2C_ITSlaveCplt+0x2b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d011      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a59      	ldr	r2, [pc, #356]	; (800365c <I2C_ITSlaveCplt+0x2b4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00b      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a57      	ldr	r2, [pc, #348]	; (8003660 <I2C_ITSlaveCplt+0x2b8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d005      	beq.n	8003514 <I2C_ITSlaveCplt+0x16c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a55      	ldr	r2, [pc, #340]	; (8003664 <I2C_ITSlaveCplt+0x2bc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d105      	bne.n	8003520 <I2C_ITSlaveCplt+0x178>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	b29b      	uxth	r3, r3
 800351e:	e004      	b.n	800352a <I2C_ITSlaveCplt+0x182>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	b29b      	uxth	r3, r3
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	8553      	strh	r3, [r2, #42]	; 0x2a
 800352e:	e0a2      	b.n	8003676 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	0bdb      	lsrs	r3, r3, #15
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 809c 	beq.w	8003676 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800354c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 808f 	beq.w	8003676 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a32      	ldr	r2, [pc, #200]	; (8003628 <I2C_ITSlaveCplt+0x280>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d059      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a30      	ldr	r2, [pc, #192]	; (800362c <I2C_ITSlaveCplt+0x284>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d053      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2e      	ldr	r2, [pc, #184]	; (8003630 <I2C_ITSlaveCplt+0x288>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d04d      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2c      	ldr	r2, [pc, #176]	; (8003634 <I2C_ITSlaveCplt+0x28c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d047      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2a      	ldr	r2, [pc, #168]	; (8003638 <I2C_ITSlaveCplt+0x290>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d041      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a28      	ldr	r2, [pc, #160]	; (800363c <I2C_ITSlaveCplt+0x294>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d03b      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a26      	ldr	r2, [pc, #152]	; (8003640 <I2C_ITSlaveCplt+0x298>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d035      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a24      	ldr	r2, [pc, #144]	; (8003644 <I2C_ITSlaveCplt+0x29c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d02f      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a22      	ldr	r2, [pc, #136]	; (8003648 <I2C_ITSlaveCplt+0x2a0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d029      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a20      	ldr	r2, [pc, #128]	; (800364c <I2C_ITSlaveCplt+0x2a4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d023      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <I2C_ITSlaveCplt+0x2a8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01d      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <I2C_ITSlaveCplt+0x2ac>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d017      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <I2C_ITSlaveCplt+0x2b0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d011      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a18      	ldr	r2, [pc, #96]	; (800365c <I2C_ITSlaveCplt+0x2b4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00b      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a16      	ldr	r2, [pc, #88]	; (8003660 <I2C_ITSlaveCplt+0x2b8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d005      	beq.n	8003618 <I2C_ITSlaveCplt+0x270>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a14      	ldr	r2, [pc, #80]	; (8003664 <I2C_ITSlaveCplt+0x2bc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d127      	bne.n	8003668 <I2C_ITSlaveCplt+0x2c0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	b29b      	uxth	r3, r3
 8003622:	e026      	b.n	8003672 <I2C_ITSlaveCplt+0x2ca>
 8003624:	fe00e800 	.word	0xfe00e800
 8003628:	40020010 	.word	0x40020010
 800362c:	40020028 	.word	0x40020028
 8003630:	40020040 	.word	0x40020040
 8003634:	40020058 	.word	0x40020058
 8003638:	40020070 	.word	0x40020070
 800363c:	40020088 	.word	0x40020088
 8003640:	400200a0 	.word	0x400200a0
 8003644:	400200b8 	.word	0x400200b8
 8003648:	40020410 	.word	0x40020410
 800364c:	40020428 	.word	0x40020428
 8003650:	40020440 	.word	0x40020440
 8003654:	40020458 	.word	0x40020458
 8003658:	40020470 	.word	0x40020470
 800365c:	40020488 	.word	0x40020488
 8003660:	400204a0 	.word	0x400204a0
 8003664:	400204b8 	.word	0x400204b8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	b29b      	uxth	r3, r3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d020      	beq.n	80036c4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d010      	beq.n	8003712 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	4619      	mov	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8a4 	bl	8003844 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b28      	cmp	r3, #40	; 0x28
 8003706:	d141      	bne.n	800378c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003708:	6979      	ldr	r1, [r7, #20]
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f844 	bl	8003798 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003710:	e03c      	b.n	800378c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800371a:	d014      	beq.n	8003746 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fde5 	bl	80032ec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <I2C_ITSlaveCplt+0x3ec>)
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fc2f 	bl	8002fa2 <HAL_I2C_ListenCpltCallback>
}
 8003744:	e022      	b.n	800378c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b22      	cmp	r3, #34	; 0x22
 8003750:	d10e      	bne.n	8003770 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff fc02 	bl	8002f72 <HAL_I2C_SlaveRxCpltCallback>
}
 800376e:	e00d      	b.n	800378c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fbe9 	bl	8002f5e <HAL_I2C_SlaveTxCpltCallback>
}
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	ffff0000 	.word	0xffff0000

08003798 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <I2C_ITListenCplt+0xa8>)
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d022      	beq.n	8003816 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d012      	beq.n	8003816 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0204 	orr.w	r2, r3, #4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003816:	f248 0103 	movw	r1, #32771	; 0x8003
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f94b 	bl	8003ab6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2210      	movs	r2, #16
 8003826:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff fbb6 	bl	8002fa2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	ffff0000 	.word	0xffff0000

08003844 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a5d      	ldr	r2, [pc, #372]	; (80039d8 <I2C_ITError+0x194>)
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b28      	cmp	r3, #40	; 0x28
 800387a:	d005      	beq.n	8003888 <I2C_ITError+0x44>
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b29      	cmp	r3, #41	; 0x29
 8003880:	d002      	beq.n	8003888 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b2a      	cmp	r3, #42	; 0x2a
 8003886:	d10b      	bne.n	80038a0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003888:	2103      	movs	r1, #3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f913 	bl	8003ab6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2228      	movs	r2, #40	; 0x28
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a50      	ldr	r2, [pc, #320]	; (80039dc <I2C_ITError+0x198>)
 800389c:	635a      	str	r2, [r3, #52]	; 0x34
 800389e:	e011      	b.n	80038c4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038a0:	f248 0103 	movw	r1, #32771	; 0x8003
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f906 	bl	8003ab6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b60      	cmp	r3, #96	; 0x60
 80038b4:	d003      	beq.n	80038be <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d039      	beq.n	8003946 <I2C_ITError+0x102>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b11      	cmp	r3, #17
 80038d6:	d002      	beq.n	80038de <I2C_ITError+0x9a>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b21      	cmp	r3, #33	; 0x21
 80038dc:	d133      	bne.n	8003946 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ec:	d107      	bne.n	80038fe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038fc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fcf2 	bl	80022ec <HAL_DMA_GetState>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d017      	beq.n	800393e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	4a33      	ldr	r2, [pc, #204]	; (80039e0 <I2C_ITError+0x19c>)
 8003914:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fb74 	bl	8001010 <HAL_DMA_Abort_IT>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d04d      	beq.n	80039ca <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003938:	4610      	mov	r0, r2
 800393a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800393c:	e045      	b.n	80039ca <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f850 	bl	80039e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003944:	e041      	b.n	80039ca <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d039      	beq.n	80039c2 <I2C_ITError+0x17e>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b12      	cmp	r3, #18
 8003952:	d002      	beq.n	800395a <I2C_ITError+0x116>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b22      	cmp	r3, #34	; 0x22
 8003958:	d133      	bne.n	80039c2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003968:	d107      	bne.n	800397a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003978:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fcb4 	bl	80022ec <HAL_DMA_GetState>
 8003984:	4603      	mov	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d017      	beq.n	80039ba <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <I2C_ITError+0x19c>)
 8003990:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fb36 	bl	8001010 <HAL_DMA_Abort_IT>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d011      	beq.n	80039ce <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039b4:	4610      	mov	r0, r2
 80039b6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039b8:	e009      	b.n	80039ce <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f812 	bl	80039e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039c0:	e005      	b.n	80039ce <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f80e 	bl	80039e4 <I2C_TreatErrorCallback>
  }
}
 80039c8:	e002      	b.n	80039d0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039ca:	bf00      	nop
 80039cc:	e000      	b.n	80039d0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039ce:	bf00      	nop
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	ffff0000 	.word	0xffff0000
 80039dc:	08002fdf 	.word	0x08002fdf
 80039e0:	08003a7b 	.word	0x08003a7b

080039e4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b60      	cmp	r3, #96	; 0x60
 80039f6:	d10e      	bne.n	8003a16 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff fadb 	bl	8002fca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a14:	e009      	b.n	8003a2a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fac6 	bl	8002fb6 <HAL_I2C_ErrorCallback>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d103      	bne.n	8003a50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d007      	beq.n	8003a6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	619a      	str	r2, [r3, #24]
  }
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	2200      	movs	r2, #0
 8003a96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7ff ff9b 	bl	80039e4 <I2C_TreatErrorCallback>
}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00f      	beq.n	8003af0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ad6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ae4:	2b28      	cmp	r3, #40	; 0x28
 8003ae6:	d003      	beq.n	8003af0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003aee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00f      	beq.n	8003b1a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003b00:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b0e:	2b28      	cmp	r3, #40	; 0x28
 8003b10:	d003      	beq.n	8003b1a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b18:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	da03      	bge.n	8003b2a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d103      	bne.n	8003b38 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b38:	887b      	ldrh	r3, [r7, #2]
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d103      	bne.n	8003b46 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f043 0320 	orr.w	r3, r3, #32
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d103      	bne.n	8003b54 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	400a      	ands	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d138      	bne.n	8003bfa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e032      	b.n	8003bfc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2224      	movs	r2, #36	; 0x24
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bc4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d139      	bne.n	8003c92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e033      	b.n	8003c94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e000      	b.n	8003c94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	2b06      	cmp	r3, #6
 8003cb2:	d00a      	beq.n	8003cca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d001      	beq.n	8003cc6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e03f      	b.n	8003d46 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e03d      	b.n	8003d46 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cca:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003cd2:	491f      	ldr	r1, [pc, #124]	; (8003d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003cda:	f7fc fc39 	bl	8000550 <HAL_GetTick>
 8003cde:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ce0:	e009      	b.n	8003cf6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ce2:	f7fc fc35 	bl	8000550 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cf0:	d901      	bls.n	8003cf6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e027      	b.n	8003d46 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cf6:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d02:	d1ee      	bne.n	8003ce2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b1e      	cmp	r3, #30
 8003d08:	d008      	beq.n	8003d1c <HAL_PWREx_ConfigSupply+0x7c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d0e:	d005      	beq.n	8003d1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b1d      	cmp	r3, #29
 8003d14:	d002      	beq.n	8003d1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b2d      	cmp	r3, #45	; 0x2d
 8003d1a:	d113      	bne.n	8003d44 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d1c:	f7fc fc18 	bl	8000550 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d22:	e009      	b.n	8003d38 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d24:	f7fc fc14 	bl	8000550 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d32:	d901      	bls.n	8003d38 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e006      	b.n	8003d46 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0311 	and.w	r3, r3, #17
 8003d40:	2b11      	cmp	r3, #17
 8003d42:	d1ef      	bne.n	8003d24 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	58024800 	.word	0x58024800

08003d54 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init (RAMECC_HandleTypeDef *hramecc)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e02d      	b.n	8003dc2 <HAL_RAMECC_Init+0x6e>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0220 	bic.w	r2, r2, #32
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d8e:	f023 030f 	bic.w	r3, r3, #15
 8003d92:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 021c 	bic.w	r2, r2, #28
 8003da2:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0207 	bic.w	r2, r2, #7
 8003db2:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	; 0x30
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e397      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8087 	beq.w	8003efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df0:	4b9e      	ldr	r3, [pc, #632]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dfa:	4b9c      	ldr	r3, [pc, #624]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d007      	beq.n	8003e16 <HAL_RCC_OscConfig+0x46>
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	2b18      	cmp	r3, #24
 8003e0a:	d110      	bne.n	8003e2e <HAL_RCC_OscConfig+0x5e>
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d10b      	bne.n	8003e2e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e16:	4b95      	ldr	r3, [pc, #596]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d06c      	beq.n	8003efc <HAL_RCC_OscConfig+0x12c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d168      	bne.n	8003efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e371      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x76>
 8003e38:	4b8c      	ldr	r3, [pc, #560]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a8b      	ldr	r2, [pc, #556]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	e02e      	b.n	8003ea4 <HAL_RCC_OscConfig+0xd4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x98>
 8003e4e:	4b87      	ldr	r3, [pc, #540]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a86      	ldr	r2, [pc, #536]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b84      	ldr	r3, [pc, #528]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a83      	ldr	r2, [pc, #524]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e01d      	b.n	8003ea4 <HAL_RCC_OscConfig+0xd4>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0xbc>
 8003e72:	4b7e      	ldr	r3, [pc, #504]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a7d      	ldr	r2, [pc, #500]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b7b      	ldr	r3, [pc, #492]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7a      	ldr	r2, [pc, #488]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e00b      	b.n	8003ea4 <HAL_RCC_OscConfig+0xd4>
 8003e8c:	4b77      	ldr	r3, [pc, #476]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a76      	ldr	r2, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4b74      	ldr	r3, [pc, #464]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a73      	ldr	r2, [pc, #460]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d013      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fc fb50 	bl	8000550 <HAL_GetTick>
 8003eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb4:	f7fc fb4c 	bl	8000550 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e325      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ec6:	4b69      	ldr	r3, [pc, #420]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xe4>
 8003ed2:	e014      	b.n	8003efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fc fb3c 	bl	8000550 <HAL_GetTick>
 8003ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fc fb38 	bl	8000550 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e311      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eee:	4b5f      	ldr	r3, [pc, #380]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x10c>
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 808a 	beq.w	8004020 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f0c:	4b57      	ldr	r3, [pc, #348]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f16:	4b55      	ldr	r3, [pc, #340]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <HAL_RCC_OscConfig+0x162>
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2b18      	cmp	r3, #24
 8003f26:	d137      	bne.n	8003f98 <HAL_RCC_OscConfig+0x1c8>
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d132      	bne.n	8003f98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f32:	4b4e      	ldr	r3, [pc, #312]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_RCC_OscConfig+0x17a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e2e3      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f4a:	4b48      	ldr	r3, [pc, #288]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 0219 	bic.w	r2, r3, #25
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4945      	ldr	r1, [pc, #276]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f5c:	f7fc faf8 	bl	8000550 <HAL_GetTick>
 8003f60:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f64:	f7fc faf4 	bl	8000550 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e2cd      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f76:	4b3d      	ldr	r3, [pc, #244]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f82:	4b3a      	ldr	r3, [pc, #232]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	061b      	lsls	r3, r3, #24
 8003f90:	4936      	ldr	r1, [pc, #216]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f96:	e043      	b.n	8004020 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d026      	beq.n	8003fee <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fa0:	4b32      	ldr	r3, [pc, #200]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 0219 	bic.w	r2, r3, #25
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	492f      	ldr	r1, [pc, #188]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fc facd 	bl	8000550 <HAL_GetTick>
 8003fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fba:	f7fc fac9 	bl	8000550 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e2a2      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fcc:	4b27      	ldr	r3, [pc, #156]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd8:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	4921      	ldr	r1, [pc, #132]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
 8003fec:	e018      	b.n	8004020 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fee:	4b1f      	ldr	r3, [pc, #124]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fc faa9 	bl	8000550 <HAL_GetTick>
 8003ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004002:	f7fc faa5 	bl	8000550 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e27e      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004014:	4b15      	ldr	r3, [pc, #84]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d06d      	beq.n	8004108 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004034:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004036:	4b0d      	ldr	r3, [pc, #52]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b08      	cmp	r3, #8
 8004040:	d007      	beq.n	8004052 <HAL_RCC_OscConfig+0x282>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b18      	cmp	r3, #24
 8004046:	d11e      	bne.n	8004086 <HAL_RCC_OscConfig+0x2b6>
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d119      	bne.n	8004086 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <HAL_RCC_OscConfig+0x29c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <HAL_RCC_OscConfig+0x2a0>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	2b80      	cmp	r3, #128	; 0x80
 8004064:	d004      	beq.n	8004070 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e253      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
 800406a:	bf00      	nop
 800406c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004070:	4ba3      	ldr	r3, [pc, #652]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	49a0      	ldr	r1, [pc, #640]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004080:	4313      	orrs	r3, r2
 8004082:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004084:	e040      	b.n	8004108 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d023      	beq.n	80040d6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800408e:	4b9c      	ldr	r3, [pc, #624]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a9b      	ldr	r2, [pc, #620]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fc fa59 	bl	8000550 <HAL_GetTick>
 800409e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040a2:	f7fc fa55 	bl	8000550 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e22e      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040b4:	4b92      	ldr	r3, [pc, #584]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040c0:	4b8f      	ldr	r3, [pc, #572]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	498c      	ldr	r1, [pc, #560]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60cb      	str	r3, [r1, #12]
 80040d4:	e018      	b.n	8004108 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040d6:	4b8a      	ldr	r3, [pc, #552]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a89      	ldr	r2, [pc, #548]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80040dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7fc fa35 	bl	8000550 <HAL_GetTick>
 80040e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040ea:	f7fc fa31 	bl	8000550 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e20a      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040fc:	4b80      	ldr	r3, [pc, #512]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d036      	beq.n	8004182 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d019      	beq.n	8004150 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411c:	4b78      	ldr	r3, [pc, #480]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 800411e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004120:	4a77      	ldr	r2, [pc, #476]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fc fa12 	bl	8000550 <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004130:	f7fc fa0e 	bl	8000550 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1e7      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004142:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x360>
 800414e:	e018      	b.n	8004182 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004150:	4b6b      	ldr	r3, [pc, #428]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	4a6a      	ldr	r2, [pc, #424]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fc f9f8 	bl	8000550 <HAL_GetTick>
 8004160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004164:	f7fc f9f4 	bl	8000550 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1cd      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004176:	4b62      	ldr	r3, [pc, #392]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d036      	beq.n	80041fc <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d019      	beq.n	80041ca <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004196:	4b5a      	ldr	r3, [pc, #360]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a59      	ldr	r2, [pc, #356]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 800419c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041a2:	f7fc f9d5 	bl	8000550 <HAL_GetTick>
 80041a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041aa:	f7fc f9d1 	bl	8000550 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e1aa      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041bc:	4b50      	ldr	r3, [pc, #320]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x3da>
 80041c8:	e018      	b.n	80041fc <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041ca:	4b4d      	ldr	r3, [pc, #308]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4c      	ldr	r2, [pc, #304]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80041d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041d6:	f7fc f9bb 	bl	8000550 <HAL_GetTick>
 80041da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041de:	f7fc f9b7 	bl	8000550 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e190      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041f0:	4b43      	ldr	r3, [pc, #268]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8085 	beq.w	8004314 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <HAL_RCC_OscConfig+0x534>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <HAL_RCC_OscConfig+0x534>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004216:	f7fc f99b 	bl	8000550 <HAL_GetTick>
 800421a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fc f997 	bl	8000550 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	; 0x64
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e170      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004230:	4b34      	ldr	r3, [pc, #208]	; (8004304 <HAL_RCC_OscConfig+0x534>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x482>
 8004244:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a2d      	ldr	r2, [pc, #180]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	e02d      	b.n	80042ae <HAL_RCC_OscConfig+0x4de>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x4a4>
 800425a:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a28      	ldr	r2, [pc, #160]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
 8004266:	4b26      	ldr	r3, [pc, #152]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a25      	ldr	r2, [pc, #148]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 800426c:	f023 0304 	bic.w	r3, r3, #4
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	e01c      	b.n	80042ae <HAL_RCC_OscConfig+0x4de>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b05      	cmp	r3, #5
 800427a:	d10c      	bne.n	8004296 <HAL_RCC_OscConfig+0x4c6>
 800427c:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	e00b      	b.n	80042ae <HAL_RCC_OscConfig+0x4de>
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
 80042a2:	4b17      	ldr	r3, [pc, #92]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a16      	ldr	r2, [pc, #88]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d015      	beq.n	80042e2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fc f94b 	bl	8000550 <HAL_GetTick>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fc f947 	bl	8000550 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e11e      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <HAL_RCC_OscConfig+0x530>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ee      	beq.n	80042be <HAL_RCC_OscConfig+0x4ee>
 80042e0:	e018      	b.n	8004314 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fc f935 	bl	8000550 <HAL_GetTick>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042e8:	e00e      	b.n	8004308 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fc f931 	bl	8000550 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d905      	bls.n	8004308 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e108      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
 8004300:	58024400 	.word	0x58024400
 8004304:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004308:	4b84      	ldr	r3, [pc, #528]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ea      	bne.n	80042ea <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80f9 	beq.w	8004510 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800431e:	4b7f      	ldr	r3, [pc, #508]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004326:	2b18      	cmp	r3, #24
 8004328:	f000 80b4 	beq.w	8004494 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	2b02      	cmp	r3, #2
 8004332:	f040 8095 	bne.w	8004460 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b79      	ldr	r3, [pc, #484]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a78      	ldr	r2, [pc, #480]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800433c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fc f905 	bl	8000550 <HAL_GetTick>
 8004346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434a:	f7fc f901 	bl	8000550 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e0da      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800435c:	4b6f      	ldr	r3, [pc, #444]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004368:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800436a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800436c:	4b6c      	ldr	r3, [pc, #432]	; (8004520 <HAL_RCC_OscConfig+0x750>)
 800436e:	4013      	ands	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004378:	0112      	lsls	r2, r2, #4
 800437a:	430a      	orrs	r2, r1
 800437c:	4967      	ldr	r1, [pc, #412]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	628b      	str	r3, [r1, #40]	; 0x28
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	3b01      	subs	r3, #1
 8004388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004390:	3b01      	subs	r3, #1
 8004392:	025b      	lsls	r3, r3, #9
 8004394:	b29b      	uxth	r3, r3
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	3b01      	subs	r3, #1
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	3b01      	subs	r3, #1
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043b2:	495a      	ldr	r1, [pc, #360]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80043b8:	4b58      	ldr	r3, [pc, #352]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	4a57      	ldr	r2, [pc, #348]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043c4:	4b55      	ldr	r3, [pc, #340]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c8:	4b56      	ldr	r3, [pc, #344]	; (8004524 <HAL_RCC_OscConfig+0x754>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043d0:	00d2      	lsls	r2, r2, #3
 80043d2:	4952      	ldr	r1, [pc, #328]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	f023 020c 	bic.w	r2, r3, #12
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	494d      	ldr	r1, [pc, #308]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043ea:	4b4c      	ldr	r3, [pc, #304]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	f023 0202 	bic.w	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	4949      	ldr	r1, [pc, #292]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043fc:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4a46      	ldr	r2, [pc, #280]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004408:	4b44      	ldr	r3, [pc, #272]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4a43      	ldr	r2, [pc, #268]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800440e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004414:	4b41      	ldr	r3, [pc, #260]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	4a40      	ldr	r2, [pc, #256]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800441a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004420:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a3d      	ldr	r2, [pc, #244]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442c:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3a      	ldr	r2, [pc, #232]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fc f88a 	bl	8000550 <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004440:	f7fc f886 	bl	8000550 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e05f      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x670>
 800445e:	e057      	b.n	8004510 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004460:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2d      	ldr	r2, [pc, #180]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fc f870 	bl	8000550 <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004474:	f7fc f86c 	bl	8000550 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e045      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004486:	4b25      	ldr	r3, [pc, #148]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x6a4>
 8004492:	e03d      	b.n	8004510 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004494:	4b21      	ldr	r3, [pc, #132]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800449a:	4b20      	ldr	r3, [pc, #128]	; (800451c <HAL_RCC_OscConfig+0x74c>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d031      	beq.n	800450c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f003 0203 	and.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d12a      	bne.n	800450c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d122      	bne.n	800450c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d11a      	bne.n	800450c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	0a5b      	lsrs	r3, r3, #9
 80044da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d111      	bne.n	800450c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d108      	bne.n	800450c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	0e1b      	lsrs	r3, r3, #24
 80044fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3730      	adds	r7, #48	; 0x30
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
 8004520:	fffffc0c 	.word	0xfffffc0c
 8004524:	ffff0007 	.word	0xffff0007

08004528 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e19c      	b.n	8004876 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b8a      	ldr	r3, [pc, #552]	; (8004768 <HAL_RCC_ClockConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d910      	bls.n	800456c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b87      	ldr	r3, [pc, #540]	; (8004768 <HAL_RCC_ClockConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 020f 	bic.w	r2, r3, #15
 8004552:	4985      	ldr	r1, [pc, #532]	; (8004768 <HAL_RCC_ClockConfig+0x240>)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b83      	ldr	r3, [pc, #524]	; (8004768 <HAL_RCC_ClockConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e184      	b.n	8004876 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d010      	beq.n	800459a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	4b7b      	ldr	r3, [pc, #492]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004584:	429a      	cmp	r2, r3
 8004586:	d908      	bls.n	800459a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004588:	4b78      	ldr	r3, [pc, #480]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	4975      	ldr	r1, [pc, #468]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004596:	4313      	orrs	r3, r2
 8004598:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d010      	beq.n	80045c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	4b70      	ldr	r3, [pc, #448]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d908      	bls.n	80045c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045b6:	4b6d      	ldr	r3, [pc, #436]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	496a      	ldr	r1, [pc, #424]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d010      	beq.n	80045f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	4b64      	ldr	r3, [pc, #400]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d908      	bls.n	80045f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045e4:	4b61      	ldr	r3, [pc, #388]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	495e      	ldr	r1, [pc, #376]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d010      	beq.n	8004624 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800460e:	429a      	cmp	r2, r3
 8004610:	d908      	bls.n	8004624 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004612:	4b56      	ldr	r3, [pc, #344]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	4953      	ldr	r1, [pc, #332]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004620:	4313      	orrs	r3, r2
 8004622:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d010      	beq.n	8004652 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	4b4d      	ldr	r3, [pc, #308]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	429a      	cmp	r2, r3
 800463e:	d908      	bls.n	8004652 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004640:	4b4a      	ldr	r3, [pc, #296]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f023 020f 	bic.w	r2, r3, #15
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4947      	ldr	r1, [pc, #284]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 800464e:	4313      	orrs	r3, r2
 8004650:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d055      	beq.n	800470a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800465e:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4940      	ldr	r1, [pc, #256]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 800466c:	4313      	orrs	r3, r2
 800466e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d107      	bne.n	8004688 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004678:	4b3c      	ldr	r3, [pc, #240]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d121      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0f6      	b.n	8004876 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004690:	4b36      	ldr	r3, [pc, #216]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d115      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0ea      	b.n	8004876 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d107      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046a8:	4b30      	ldr	r3, [pc, #192]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0de      	b.n	8004876 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046b8:	4b2c      	ldr	r3, [pc, #176]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0d6      	b.n	8004876 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046c8:	4b28      	ldr	r3, [pc, #160]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f023 0207 	bic.w	r2, r3, #7
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4925      	ldr	r1, [pc, #148]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fb ff39 	bl	8000550 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e2:	f7fb ff35 	bl	8000550 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0be      	b.n	8004876 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f8:	4b1c      	ldr	r3, [pc, #112]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	429a      	cmp	r2, r3
 8004708:	d1eb      	bne.n	80046e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d010      	beq.n	8004738 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	4b14      	ldr	r3, [pc, #80]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	429a      	cmp	r2, r3
 8004724:	d208      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004726:	4b11      	ldr	r3, [pc, #68]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f023 020f 	bic.w	r2, r3, #15
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	490e      	ldr	r1, [pc, #56]	; (800476c <HAL_RCC_ClockConfig+0x244>)
 8004734:	4313      	orrs	r3, r2
 8004736:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_ClockConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d214      	bcs.n	8004770 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <HAL_RCC_ClockConfig+0x240>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 020f 	bic.w	r2, r3, #15
 800474e:	4906      	ldr	r1, [pc, #24]	; (8004768 <HAL_RCC_ClockConfig+0x240>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_RCC_ClockConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e086      	b.n	8004876 <HAL_RCC_ClockConfig+0x34e>
 8004768:	52002000 	.word	0x52002000
 800476c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	4b3f      	ldr	r3, [pc, #252]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004788:	429a      	cmp	r2, r3
 800478a:	d208      	bcs.n	800479e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800478c:	4b3c      	ldr	r3, [pc, #240]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	4939      	ldr	r1, [pc, #228]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 800479a:	4313      	orrs	r3, r2
 800479c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d010      	beq.n	80047cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	4b34      	ldr	r3, [pc, #208]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d208      	bcs.n	80047cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047ba:	4b31      	ldr	r3, [pc, #196]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	492e      	ldr	r1, [pc, #184]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d208      	bcs.n	80047fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	4922      	ldr	r1, [pc, #136]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d010      	beq.n	8004828 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004812:	429a      	cmp	r2, r3
 8004814:	d208      	bcs.n	8004828 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4917      	ldr	r1, [pc, #92]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 8004824:	4313      	orrs	r3, r2
 8004826:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004828:	f000 f834 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	4912      	ldr	r1, [pc, #72]	; (8004884 <HAL_RCC_ClockConfig+0x35c>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
 8004844:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HAL_RCC_ClockConfig+0x358>)
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <HAL_RCC_ClockConfig+0x35c>)
 8004850:	5cd3      	ldrb	r3, [r2, r3]
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <HAL_RCC_ClockConfig+0x360>)
 800485e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004860:	4a0a      	ldr	r2, [pc, #40]	; (800488c <HAL_RCC_ClockConfig+0x364>)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <HAL_RCC_ClockConfig+0x368>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fb fe26 	bl	80004bc <HAL_InitTick>
 8004870:	4603      	mov	r3, r0
 8004872:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	58024400 	.word	0x58024400
 8004884:	0800a4c8 	.word	0x0800a4c8
 8004888:	24000414 	.word	0x24000414
 800488c:	24000410 	.word	0x24000410
 8004890:	24000408 	.word	0x24000408

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800489a:	4bb3      	ldr	r3, [pc, #716]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048a2:	2b18      	cmp	r3, #24
 80048a4:	f200 8155 	bhi.w	8004b52 <HAL_RCC_GetSysClockFreq+0x2be>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	08004915 	.word	0x08004915
 80048b4:	08004b53 	.word	0x08004b53
 80048b8:	08004b53 	.word	0x08004b53
 80048bc:	08004b53 	.word	0x08004b53
 80048c0:	08004b53 	.word	0x08004b53
 80048c4:	08004b53 	.word	0x08004b53
 80048c8:	08004b53 	.word	0x08004b53
 80048cc:	08004b53 	.word	0x08004b53
 80048d0:	0800493b 	.word	0x0800493b
 80048d4:	08004b53 	.word	0x08004b53
 80048d8:	08004b53 	.word	0x08004b53
 80048dc:	08004b53 	.word	0x08004b53
 80048e0:	08004b53 	.word	0x08004b53
 80048e4:	08004b53 	.word	0x08004b53
 80048e8:	08004b53 	.word	0x08004b53
 80048ec:	08004b53 	.word	0x08004b53
 80048f0:	08004941 	.word	0x08004941
 80048f4:	08004b53 	.word	0x08004b53
 80048f8:	08004b53 	.word	0x08004b53
 80048fc:	08004b53 	.word	0x08004b53
 8004900:	08004b53 	.word	0x08004b53
 8004904:	08004b53 	.word	0x08004b53
 8004908:	08004b53 	.word	0x08004b53
 800490c:	08004b53 	.word	0x08004b53
 8004910:	08004947 	.word	0x08004947
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004914:	4b94      	ldr	r3, [pc, #592]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004920:	4b91      	ldr	r3, [pc, #580]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	4a90      	ldr	r2, [pc, #576]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004932:	e111      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004934:	4b8d      	ldr	r3, [pc, #564]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004936:	61bb      	str	r3, [r7, #24]
    break;
 8004938:	e10e      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800493a:	4b8d      	ldr	r3, [pc, #564]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800493c:	61bb      	str	r3, [r7, #24]
    break;
 800493e:	e10b      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004940:	4b8c      	ldr	r3, [pc, #560]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004942:	61bb      	str	r3, [r7, #24]
    break;
 8004944:	e108      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004946:	4b88      	ldr	r3, [pc, #544]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004950:	4b85      	ldr	r3, [pc, #532]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800495a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800495c:	4b82      	ldr	r3, [pc, #520]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004966:	4b80      	ldr	r3, [pc, #512]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	08db      	lsrs	r3, r3, #3
 800496c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80e1 	beq.w	8004b4c <HAL_RCC_GetSysClockFreq+0x2b8>
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b02      	cmp	r3, #2
 800498e:	f000 8083 	beq.w	8004a98 <HAL_RCC_GetSysClockFreq+0x204>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b02      	cmp	r3, #2
 8004996:	f200 80a1 	bhi.w	8004adc <HAL_RCC_GetSysClockFreq+0x248>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x114>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d056      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x1c0>
 80049a6:	e099      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a8:	4b6f      	ldr	r3, [pc, #444]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d02d      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049b4:	4b6c      	ldr	r3, [pc, #432]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	08db      	lsrs	r3, r3, #3
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	4a6b      	ldr	r2, [pc, #428]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
 80049c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049de:	4b62      	ldr	r3, [pc, #392]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80049f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a0e:	e087      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004b7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a22:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a52:	e065      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004b80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a96:	e043      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004b84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aaa:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004abe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ada:	e021      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004b80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004b78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b20:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	0a5b      	lsrs	r3, r3, #9
 8004b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b44:	ee17 3a90 	vmov	r3, s15
 8004b48:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004b4a:	e005      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]
    break;
 8004b50:	e002      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b54:	61bb      	str	r3, [r7, #24]
    break;
 8004b56:	bf00      	nop
  }

  return sysclockfreq;
 8004b58:	69bb      	ldr	r3, [r7, #24]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3724      	adds	r7, #36	; 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	03d09000 	.word	0x03d09000
 8004b70:	003d0900 	.word	0x003d0900
 8004b74:	017d7840 	.word	0x017d7840
 8004b78:	46000000 	.word	0x46000000
 8004b7c:	4c742400 	.word	0x4c742400
 8004b80:	4a742400 	.word	0x4a742400
 8004b84:	4bbebc20 	.word	0x4bbebc20

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b8e:	f7ff fe81 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004b92:	4602      	mov	r2, r0
 8004b94:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	490f      	ldr	r1, [pc, #60]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x54>)
 8004ba0:	5ccb      	ldrb	r3, [r1, r3]
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x54>)
 8004bb6:	5cd3      	ldrb	r3, [r2, r3]
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc2:	4a07      	ldr	r2, [pc, #28]	; (8004be0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bc6:	4a07      	ldr	r2, [pc, #28]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bce:	681b      	ldr	r3, [r3, #0]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	0800a4c8 	.word	0x0800a4c8
 8004be0:	24000414 	.word	0x24000414
 8004be4:	24000410 	.word	0x24000410

08004be8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d03f      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c0c:	d02a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c12:	d824      	bhi.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c18:	d018      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c1e:	d81e      	bhi.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c28:	d007      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c2a:	e018      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c2c:	4bab      	ldr	r3, [pc, #684]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	4aaa      	ldr	r2, [pc, #680]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c38:	e015      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	2102      	movs	r1, #2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 feff 	bl	8006a44 <RCCEx_PLL2_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c4a:	e00c      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3324      	adds	r3, #36	; 0x24
 8004c50:	2102      	movs	r1, #2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 ffa8 	bl	8006ba8 <RCCEx_PLL3_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c5c:	e003      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	75fb      	strb	r3, [r7, #23]
      break;
 8004c62:	e000      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c6c:	4b9b      	ldr	r3, [pc, #620]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c78:	4998      	ldr	r1, [pc, #608]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c7e:	e001      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
 8004c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d03d      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d826      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cb5 	.word	0x08004cb5
 8004ca4:	08004cc3 	.word	0x08004cc3
 8004ca8:	08004cd5 	.word	0x08004cd5
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004ced 	.word	0x08004ced
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b89      	ldr	r3, [pc, #548]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a88      	ldr	r2, [pc, #544]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cc0:	e015      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 febb 	bl	8006a44 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cd2:	e00c      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3324      	adds	r3, #36	; 0x24
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 ff64 	bl	8006ba8 <RCCEx_PLL3_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ce4:	e003      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cea:	e000      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cf4:	4b79      	ldr	r3, [pc, #484]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	f023 0207 	bic.w	r2, r3, #7
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	4976      	ldr	r1, [pc, #472]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	650b      	str	r3, [r1, #80]	; 0x50
 8004d06:	e001      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
 8004d0a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d051      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d1e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004d22:	d036      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d24:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004d28:	d830      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004d2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d2e:	d032      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004d30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d34:	d82a      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004d36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d3a:	d02e      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004d3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d40:	d824      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d46:	d018      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4c:	d81e      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d56:	d007      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004d58:	e018      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5a:	4b60      	ldr	r3, [pc, #384]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	4a5f      	ldr	r2, [pc, #380]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d66:	e019      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 fe68 	bl	8006a44 <RCCEx_PLL2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d78:	e010      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3324      	adds	r3, #36	; 0x24
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 ff11 	bl	8006ba8 <RCCEx_PLL3_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d8a:	e007      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	e004      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004d92:	bf00      	nop
 8004d94:	e002      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004d96:	bf00      	nop
 8004d98:	e000      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004da2:	4b4e      	ldr	r3, [pc, #312]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004db0:	494a      	ldr	r1, [pc, #296]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	658b      	str	r3, [r1, #88]	; 0x58
 8004db6:	e001      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d051      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004dce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004dd2:	d036      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004dd4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004dd8:	d830      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004dda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dde:	d032      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de4:	d82a      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004de6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dea:	d02e      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004dec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004df0:	d824      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004df2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004df6:	d018      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004df8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dfc:	d81e      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004e02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e06:	d007      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004e08:	e018      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0a:	4b34      	ldr	r3, [pc, #208]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	4a33      	ldr	r2, [pc, #204]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e16:	e019      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 fe10 	bl	8006a44 <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e28:	e010      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3324      	adds	r3, #36	; 0x24
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 feb9 	bl	8006ba8 <RCCEx_PLL3_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e3a:	e007      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e40:	e004      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e60:	491e      	ldr	r1, [pc, #120]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	658b      	str	r3, [r1, #88]	; 0x58
 8004e66:	e001      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d035      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	2b30      	cmp	r3, #48	; 0x30
 8004e7e:	d01c      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004e80:	2b30      	cmp	r3, #48	; 0x30
 8004e82:	d817      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d00c      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d813      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d016      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d10f      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e94:	4b11      	ldr	r3, [pc, #68]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	4a10      	ldr	r2, [pc, #64]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004ea0:	e00e      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f001 fdcb 	bl	8006a44 <RCCEx_PLL2_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004eb2:	e005      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed2:	4902      	ldr	r1, [pc, #8]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ed8:	e004      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004eda:	bf00      	nop
 8004edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
 8004ee2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d047      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef8:	d030      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efe:	d82a      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f04:	d02c      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004f06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f0a:	d824      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f10:	d018      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f16:	d81e      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f20:	d007      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004f22:	e018      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f24:	4bac      	ldr	r3, [pc, #688]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	4aab      	ldr	r2, [pc, #684]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f30:	e017      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 fd83 	bl	8006a44 <RCCEx_PLL2_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f42:	e00e      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3324      	adds	r3, #36	; 0x24
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 fe2c 	bl	8006ba8 <RCCEx_PLL3_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f54:	e005      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	75fb      	strb	r3, [r7, #23]
      break;
 8004f5a:	e002      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f68:	4b9b      	ldr	r3, [pc, #620]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f74:	4998      	ldr	r1, [pc, #608]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	650b      	str	r3, [r1, #80]	; 0x50
 8004f7a:	e001      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d049      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f94:	d02e      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f9a:	d828      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004f9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fa0:	d02a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004fa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fa6:	d822      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004fa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fac:	d026      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004fae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fb2:	d81c      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb8:	d010      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fbe:	d816      	bhi.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01d      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc8:	d111      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2101      	movs	r1, #1
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 fd37 	bl	8006a44 <RCCEx_PLL2_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004fda:	e012      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3324      	adds	r3, #36	; 0x24
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 fde0 	bl	8006ba8 <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004fec:	e009      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff2:	e006      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004ff4:	bf00      	nop
 8004ff6:	e004      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004ff8:	bf00      	nop
 8004ffa:	e002      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004ffc:	bf00      	nop
 8004ffe:	e000      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005008:	4b73      	ldr	r3, [pc, #460]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005014:	4970      	ldr	r1, [pc, #448]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005016:	4313      	orrs	r3, r2
 8005018:	650b      	str	r3, [r1, #80]	; 0x50
 800501a:	e001      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	7dfb      	ldrb	r3, [r7, #23]
 800501e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d04b      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005036:	d02e      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800503c:	d828      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d02a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005048:	d822      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800504a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800504e:	d026      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005050:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005054:	d81c      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505a:	d010      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800505c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005060:	d816      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01d      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506a:	d111      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	2101      	movs	r1, #1
 8005072:	4618      	mov	r0, r3
 8005074:	f001 fce6 	bl	8006a44 <RCCEx_PLL2_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800507c:	e012      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3324      	adds	r3, #36	; 0x24
 8005082:	2101      	movs	r1, #1
 8005084:	4618      	mov	r0, r3
 8005086:	f001 fd8f 	bl	8006ba8 <RCCEx_PLL3_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800508e:	e009      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	75fb      	strb	r3, [r7, #23]
      break;
 8005094:	e006      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005096:	bf00      	nop
 8005098:	e004      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800509a:	bf00      	nop
 800509c:	e002      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80050a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050aa:	4b4b      	ldr	r3, [pc, #300]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050b8:	4947      	ldr	r1, [pc, #284]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	658b      	str	r3, [r1, #88]	; 0x58
 80050be:	e001      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d02f      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d8:	d00e      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80050da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050de:	d814      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d015      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80050e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050e8:	d10f      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ea:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	4a3a      	ldr	r2, [pc, #232]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80050f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80050f6:	e00c      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fca0 	bl	8006a44 <RCCEx_PLL2_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005108:	e003      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	75fb      	strb	r3, [r7, #23]
      break;
 800510e:	e000      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d109      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005118:	4b2f      	ldr	r3, [pc, #188]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005124:	492c      	ldr	r1, [pc, #176]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005126:	4313      	orrs	r3, r2
 8005128:	650b      	str	r3, [r1, #80]	; 0x50
 800512a:	e001      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d032      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005140:	2b03      	cmp	r3, #3
 8005142:	d81b      	bhi.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005183 	.word	0x08005183
 8005150:	0800515d 	.word	0x0800515d
 8005154:	0800516b 	.word	0x0800516b
 8005158:	08005183 	.word	0x08005183
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800515c:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005168:	e00c      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3304      	adds	r3, #4
 800516e:	2102      	movs	r1, #2
 8005170:	4618      	mov	r0, r3
 8005172:	f001 fc67 	bl	8006a44 <RCCEx_PLL2_Config>
 8005176:	4603      	mov	r3, r0
 8005178:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800517a:	e003      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	75fb      	strb	r3, [r7, #23]
      break;
 8005180:	e000      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800518a:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800518c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518e:	f023 0203 	bic.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	4910      	ldr	r1, [pc, #64]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005198:	4313      	orrs	r3, r2
 800519a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800519c:	e001      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 808a 	beq.w	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051b0:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a09      	ldr	r2, [pc, #36]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80051b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051bc:	f7fb f9c8 	bl	8000550 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051c2:	e00d      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c4:	f7fb f9c4 	bl	8000550 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b64      	cmp	r3, #100	; 0x64
 80051d0:	d906      	bls.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	75fb      	strb	r3, [r7, #23]
        break;
 80051d6:	e009      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80051d8:	58024400 	.word	0x58024400
 80051dc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e0:	4bb9      	ldr	r3, [pc, #740]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0eb      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d166      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80051f2:	4bb6      	ldr	r3, [pc, #728]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80051f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051fc:	4053      	eors	r3, r2
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	2b00      	cmp	r3, #0
 8005204:	d013      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005206:	4bb1      	ldr	r3, [pc, #708]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005210:	4bae      	ldr	r3, [pc, #696]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	4aad      	ldr	r2, [pc, #692]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800521c:	4bab      	ldr	r3, [pc, #684]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	4aaa      	ldr	r2, [pc, #680]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005226:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005228:	4aa8      	ldr	r2, [pc, #672]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005238:	d115      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523a:	f7fb f989 	bl	8000550 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005240:	e00b      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005242:	f7fb f985 	bl	8000550 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005250:	4293      	cmp	r3, r2
 8005252:	d902      	bls.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	75fb      	strb	r3, [r7, #23]
            break;
 8005258:	e005      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800525a:	4b9c      	ldr	r3, [pc, #624]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ed      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8005266:	7dfb      	ldrb	r3, [r7, #23]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d126      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527a:	d10d      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800527c:	4b93      	ldr	r3, [pc, #588]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800528a:	0919      	lsrs	r1, r3, #4
 800528c:	4b90      	ldr	r3, [pc, #576]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800528e:	400b      	ands	r3, r1
 8005290:	498e      	ldr	r1, [pc, #568]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005292:	4313      	orrs	r3, r2
 8005294:	610b      	str	r3, [r1, #16]
 8005296:	e005      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005298:	4b8c      	ldr	r3, [pc, #560]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	4a8b      	ldr	r2, [pc, #556]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800529e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052a2:	6113      	str	r3, [r2, #16]
 80052a4:	4b89      	ldr	r3, [pc, #548]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b2:	4986      	ldr	r1, [pc, #536]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	670b      	str	r3, [r1, #112]	; 0x70
 80052b8:	e004      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	75bb      	strb	r3, [r7, #22]
 80052be:	e001      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d07e      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d4:	2b28      	cmp	r3, #40	; 0x28
 80052d6:	d867      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	080053af 	.word	0x080053af
 80052e4:	080053a9 	.word	0x080053a9
 80052e8:	080053a9 	.word	0x080053a9
 80052ec:	080053a9 	.word	0x080053a9
 80052f0:	080053a9 	.word	0x080053a9
 80052f4:	080053a9 	.word	0x080053a9
 80052f8:	080053a9 	.word	0x080053a9
 80052fc:	080053a9 	.word	0x080053a9
 8005300:	08005385 	.word	0x08005385
 8005304:	080053a9 	.word	0x080053a9
 8005308:	080053a9 	.word	0x080053a9
 800530c:	080053a9 	.word	0x080053a9
 8005310:	080053a9 	.word	0x080053a9
 8005314:	080053a9 	.word	0x080053a9
 8005318:	080053a9 	.word	0x080053a9
 800531c:	080053a9 	.word	0x080053a9
 8005320:	08005397 	.word	0x08005397
 8005324:	080053a9 	.word	0x080053a9
 8005328:	080053a9 	.word	0x080053a9
 800532c:	080053a9 	.word	0x080053a9
 8005330:	080053a9 	.word	0x080053a9
 8005334:	080053a9 	.word	0x080053a9
 8005338:	080053a9 	.word	0x080053a9
 800533c:	080053a9 	.word	0x080053a9
 8005340:	080053af 	.word	0x080053af
 8005344:	080053a9 	.word	0x080053a9
 8005348:	080053a9 	.word	0x080053a9
 800534c:	080053a9 	.word	0x080053a9
 8005350:	080053a9 	.word	0x080053a9
 8005354:	080053a9 	.word	0x080053a9
 8005358:	080053a9 	.word	0x080053a9
 800535c:	080053a9 	.word	0x080053a9
 8005360:	080053af 	.word	0x080053af
 8005364:	080053a9 	.word	0x080053a9
 8005368:	080053a9 	.word	0x080053a9
 800536c:	080053a9 	.word	0x080053a9
 8005370:	080053a9 	.word	0x080053a9
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080053a9 	.word	0x080053a9
 800537c:	080053a9 	.word	0x080053a9
 8005380:	080053af 	.word	0x080053af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	2101      	movs	r1, #1
 800538a:	4618      	mov	r0, r3
 800538c:	f001 fb5a 	bl	8006a44 <RCCEx_PLL2_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005394:	e00c      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3324      	adds	r3, #36	; 0x24
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f001 fc03 	bl	8006ba8 <RCCEx_PLL3_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053a6:	e003      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75fb      	strb	r3, [r7, #23]
      break;
 80053ac:	e000      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80053ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053b6:	4b45      	ldr	r3, [pc, #276]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80053b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c2:	4942      	ldr	r1, [pc, #264]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	654b      	str	r3, [r1, #84]	; 0x54
 80053c8:	e001      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
 80053cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d037      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d820      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	0800542b 	.word	0x0800542b
 80053ec:	08005401 	.word	0x08005401
 80053f0:	08005413 	.word	0x08005413
 80053f4:	0800542b 	.word	0x0800542b
 80053f8:	0800542b 	.word	0x0800542b
 80053fc:	0800542b 	.word	0x0800542b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	2101      	movs	r1, #1
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fb1c 	bl	8006a44 <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005410:	e00c      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3324      	adds	r3, #36	; 0x24
 8005416:	2101      	movs	r1, #1
 8005418:	4618      	mov	r0, r3
 800541a:	f001 fbc5 	bl	8006ba8 <RCCEx_PLL3_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	75fb      	strb	r3, [r7, #23]
      break;
 8005428:	e000      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800542a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005432:	4b26      	ldr	r3, [pc, #152]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f023 0207 	bic.w	r2, r3, #7
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543e:	4923      	ldr	r1, [pc, #140]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005440:	4313      	orrs	r3, r2
 8005442:	654b      	str	r3, [r1, #84]	; 0x54
 8005444:	e001      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	d040      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800545c:	2b05      	cmp	r3, #5
 800545e:	d821      	bhi.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	080054ab 	.word	0x080054ab
 800546c:	08005481 	.word	0x08005481
 8005470:	08005493 	.word	0x08005493
 8005474:	080054ab 	.word	0x080054ab
 8005478:	080054ab 	.word	0x080054ab
 800547c:	080054ab 	.word	0x080054ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	2101      	movs	r1, #1
 8005486:	4618      	mov	r0, r3
 8005488:	f001 fadc 	bl	8006a44 <RCCEx_PLL2_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005490:	e00c      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3324      	adds	r3, #36	; 0x24
 8005496:	2101      	movs	r1, #1
 8005498:	4618      	mov	r0, r3
 800549a:	f001 fb85 	bl	8006ba8 <RCCEx_PLL3_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054a2:	e003      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	75fb      	strb	r3, [r7, #23]
      break;
 80054a8:	e000      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80054aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d110      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b6:	f023 0207 	bic.w	r2, r3, #7
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c0:	4902      	ldr	r1, [pc, #8]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	658b      	str	r3, [r1, #88]	; 0x58
 80054c6:	e007      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80054c8:	58024800 	.word	0x58024800
 80054cc:	58024400 	.word	0x58024400
 80054d0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d04b      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054ee:	d02e      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80054f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054f4:	d828      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d02a      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80054fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005500:	d822      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005502:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005506:	d026      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005508:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800550c:	d81c      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800550e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005512:	d010      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8005514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005518:	d816      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01d      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800551e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005522:	d111      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	2100      	movs	r1, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f001 fa8a 	bl	8006a44 <RCCEx_PLL2_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005534:	e012      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3324      	adds	r3, #36	; 0x24
 800553a:	2102      	movs	r1, #2
 800553c:	4618      	mov	r0, r3
 800553e:	f001 fb33 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005546:	e009      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
      break;
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800554e:	bf00      	nop
 8005550:	e004      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005552:	bf00      	nop
 8005554:	e002      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800555a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005562:	4bb2      	ldr	r3, [pc, #712]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	49ae      	ldr	r1, [pc, #696]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005572:	4313      	orrs	r3, r2
 8005574:	654b      	str	r3, [r1, #84]	; 0x54
 8005576:	e001      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d04b      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005592:	d02e      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005594:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005598:	d828      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d02a      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a4:	d822      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80055a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055aa:	d026      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80055ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055b0:	d81c      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80055b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b6:	d010      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80055b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055bc:	d816      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d01d      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80055c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c6:	d111      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 fa38 	bl	8006a44 <RCCEx_PLL2_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80055d8:	e012      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3324      	adds	r3, #36	; 0x24
 80055de:	2102      	movs	r1, #2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f001 fae1 	bl	8006ba8 <RCCEx_PLL3_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80055ea:	e009      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	75fb      	strb	r3, [r7, #23]
      break;
 80055f0:	e006      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80055f2:	bf00      	nop
 80055f4:	e004      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80055f6:	bf00      	nop
 80055f8:	e002      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80055fa:	bf00      	nop
 80055fc:	e000      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80055fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005606:	4b89      	ldr	r3, [pc, #548]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005614:	4985      	ldr	r1, [pc, #532]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005616:	4313      	orrs	r3, r2
 8005618:	658b      	str	r3, [r1, #88]	; 0x58
 800561a:	e001      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005628:	2b00      	cmp	r3, #0
 800562a:	d04b      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005632:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005636:	d02e      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005638:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800563c:	d828      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800563e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005642:	d02a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005648:	d822      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800564a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800564e:	d026      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005650:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005654:	d81c      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800565a:	d010      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800565c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005660:	d816      	bhi.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01d      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8005666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566a:	d111      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	2100      	movs	r1, #0
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f9e6 	bl	8006a44 <RCCEx_PLL2_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800567c:	e012      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3324      	adds	r3, #36	; 0x24
 8005682:	2102      	movs	r1, #2
 8005684:	4618      	mov	r0, r3
 8005686:	f001 fa8f 	bl	8006ba8 <RCCEx_PLL3_Config>
 800568a:	4603      	mov	r3, r0
 800568c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800568e:	e009      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	75fb      	strb	r3, [r7, #23]
      break;
 8005694:	e006      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005696:	bf00      	nop
 8005698:	e004      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800569a:	bf00      	nop
 800569c:	e002      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80056a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056aa:	4b60      	ldr	r3, [pc, #384]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056b8:	495c      	ldr	r1, [pc, #368]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	658b      	str	r3, [r1, #88]	; 0x58
 80056be:	e001      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
 80056c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d018      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d8:	d10a      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3324      	adds	r3, #36	; 0x24
 80056de:	2102      	movs	r1, #2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fa61 	bl	8006ba8 <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80056f0:	4b4e      	ldr	r3, [pc, #312]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056fc:	494b      	ldr	r1, [pc, #300]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005718:	d10a      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3324      	adds	r3, #36	; 0x24
 800571e:	2102      	movs	r1, #2
 8005720:	4618      	mov	r0, r3
 8005722:	f001 fa41 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005730:	4b3e      	ldr	r3, [pc, #248]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	493b      	ldr	r1, [pc, #236]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005740:	4313      	orrs	r3, r2
 8005742:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d034      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800575a:	d01d      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800575c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005760:	d817      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576a:	d009      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800576c:	e011      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3304      	adds	r3, #4
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f001 f965 	bl	8006a44 <RCCEx_PLL2_Config>
 800577a:	4603      	mov	r3, r0
 800577c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800577e:	e00c      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3324      	adds	r3, #36	; 0x24
 8005784:	2102      	movs	r1, #2
 8005786:	4618      	mov	r0, r3
 8005788:	f001 fa0e 	bl	8006ba8 <RCCEx_PLL3_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005790:	e003      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
      break;
 8005796:	e000      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057a0:	4b22      	ldr	r3, [pc, #136]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ae:	491f      	ldr	r1, [pc, #124]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	658b      	str	r3, [r1, #88]	; 0x58
 80057b4:	e001      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
 80057b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d036      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057d0:	d01c      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80057d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057d6:	d816      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80057d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057dc:	d003      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80057de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057e2:	d007      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80057e4:	e00f      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e6:	4b11      	ldr	r3, [pc, #68]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	4a10      	ldr	r2, [pc, #64]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80057ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80057f2:	e00c      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3324      	adds	r3, #36	; 0x24
 80057f8:	2101      	movs	r1, #1
 80057fa:	4618      	mov	r0, r3
 80057fc:	f001 f9d4 	bl	8006ba8 <RCCEx_PLL3_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005804:	e003      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	75fb      	strb	r3, [r7, #23]
      break;
 800580a:	e000      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800580c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10d      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005822:	4902      	ldr	r1, [pc, #8]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005824:	4313      	orrs	r3, r2
 8005826:	654b      	str	r3, [r1, #84]	; 0x54
 8005828:	e004      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800582a:	bf00      	nop
 800582c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d029      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584c:	d007      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800584e:	e00f      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005850:	4b61      	ldr	r3, [pc, #388]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	4a60      	ldr	r2, [pc, #384]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800585a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800585c:	e00b      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	2102      	movs	r1, #2
 8005864:	4618      	mov	r0, r3
 8005866:	f001 f8ed 	bl	8006a44 <RCCEx_PLL2_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	75fb      	strb	r3, [r7, #23]
      break;
 8005874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d109      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800587c:	4b56      	ldr	r3, [pc, #344]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800587e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005888:	4953      	ldr	r1, [pc, #332]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800588a:	4313      	orrs	r3, r2
 800588c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800588e:	e001      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	2102      	movs	r1, #2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 f97e 	bl	8006ba8 <RCCEx_PLL3_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d030      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ca:	d017      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80058cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d0:	d811      	bhi.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80058d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058d6:	d013      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058dc:	d80b      	bhi.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d010      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80058e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e6:	d106      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e8:	4b3b      	ldr	r3, [pc, #236]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4a3a      	ldr	r2, [pc, #232]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80058ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80058f4:	e007      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75fb      	strb	r3, [r7, #23]
      break;
 80058fa:	e004      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80058fc:	bf00      	nop
 80058fe:	e002      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800590c:	4b32      	ldr	r3, [pc, #200]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800590e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005918:	492f      	ldr	r1, [pc, #188]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	654b      	str	r3, [r1, #84]	; 0x54
 800591e:	e001      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005930:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005934:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800593c:	4926      	ldr	r1, [pc, #152]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800593e:	4313      	orrs	r3, r2
 8005940:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d008      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800594e:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595a:	491f      	ldr	r1, [pc, #124]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800595c:	4313      	orrs	r3, r2
 800595e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00d      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800596c:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	4a19      	ldr	r2, [pc, #100]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005972:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005976:	6113      	str	r3, [r2, #16]
 8005978:	4b17      	ldr	r3, [pc, #92]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005982:	4915      	ldr	r1, [pc, #84]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005984:	4313      	orrs	r3, r2
 8005986:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	da08      	bge.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005994:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599c:	490e      	ldr	r1, [pc, #56]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059bc:	4906      	ldr	r1, [pc, #24]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80059c2:	7dbb      	ldrb	r3, [r7, #22]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e000      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	58024400 	.word	0x58024400

080059dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b090      	sub	sp, #64	; 0x40
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ea:	f040 8089 	bne.w	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80059ee:	4b95      	ldr	r3, [pc, #596]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80059f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d87d      	bhi.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a19 	.word	0x08005a19
 8005a08:	08005a3d 	.word	0x08005a3d
 8005a0c:	08005a61 	.word	0x08005a61
 8005a10:	08005af5 	.word	0x08005af5
 8005a14:	08005a85 	.word	0x08005a85

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a18:	4b8a      	ldr	r3, [pc, #552]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a24:	d107      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 feb8 	bl	80067a0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a34:	e3ed      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a3a:	e3ea      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a3c:	4b81      	ldr	r3, [pc, #516]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a48:	d107      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a4a:	f107 0318 	add.w	r3, r7, #24
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fbfe 	bl	8006250 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a58:	e3db      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a5e:	e3d8      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a60:	4b78      	ldr	r3, [pc, #480]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a6e:	f107 030c 	add.w	r3, r7, #12
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fd40 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a7c:	e3c9      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a82:	e3c6      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a84:	4b6f      	ldr	r3, [pc, #444]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a8e:	4b6d      	ldr	r3, [pc, #436]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d10c      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005aa0:	4b68      	ldr	r3, [pc, #416]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	08db      	lsrs	r3, r3, #3
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	4a67      	ldr	r2, [pc, #412]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab2:	e01e      	b.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ab4:	4b63      	ldr	r3, [pc, #396]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac0:	d106      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ac8:	d102      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005aca:	4b60      	ldr	r3, [pc, #384]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ace:	e010      	b.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ad0:	4b5c      	ldr	r3, [pc, #368]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005adc:	d106      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae4:	d102      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005ae6:	4b5a      	ldr	r3, [pc, #360]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aea:	e002      	b.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005af0:	e38f      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005af2:	e38e      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005af4:	4b57      	ldr	r3, [pc, #348]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af8:	e38b      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005afe:	e388      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b06:	f040 80a7 	bne.w	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005b0a:	4b4e      	ldr	r3, [pc, #312]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005b12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b1a:	d054      	beq.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b22:	f200 808b 	bhi.w	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b2c:	f000 8083 	beq.w	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b36:	f200 8081 	bhi.w	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b40:	d02f      	beq.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b48:	d878      	bhi.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b56:	d012      	beq.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8005b58:	e070      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b5a:	4b3a      	ldr	r3, [pc, #232]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b66:	d107      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fe17 	bl	80067a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b76:	e34c      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b7c:	e349      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b7e:	4b31      	ldr	r3, [pc, #196]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b8a:	d107      	bne.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b8c:	f107 0318 	add.w	r3, r7, #24
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fb5d 	bl	8006250 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b9a:	e33a      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba0:	e337      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ba2:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bb0:	f107 030c 	add.w	r3, r7, #12
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fc9f 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bbe:	e328      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc4:	e325      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005bc6:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bd0:	4b1c      	ldr	r3, [pc, #112]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	d10c      	bne.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005be2:	4b18      	ldr	r3, [pc, #96]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	08db      	lsrs	r3, r3, #3
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005bee:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf4:	e01e      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bf6:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c02:	d106      	bne.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c0a:	d102      	bne.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c10:	e010      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c12:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c1e:	d106      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c26:	d102      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c2c:	e002      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005c32:	e2ee      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005c34:	e2ed      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c3a:	e2ea      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c40:	e2e7      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005c42:	bf00      	nop
 8005c44:	58024400 	.word	0x58024400
 8005c48:	03d09000 	.word	0x03d09000
 8005c4c:	003d0900 	.word	0x003d0900
 8005c50:	017d7840 	.word	0x017d7840
 8005c54:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5e:	f040 809c 	bne.w	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005c62:	4b9e      	ldr	r3, [pc, #632]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c66:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c72:	d054      	beq.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c7a:	f200 808b 	bhi.w	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c84:	f000 8083 	beq.w	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c8e:	f200 8081 	bhi.w	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c98:	d02f      	beq.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ca0:	d878      	bhi.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cae:	d012      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005cb0:	e070      	b.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cb2:	4b8a      	ldr	r3, [pc, #552]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fd6b 	bl	80067a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cce:	e2a0      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cd4:	e29d      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cd6:	4b81      	ldr	r3, [pc, #516]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce2:	d107      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce4:	f107 0318 	add.w	r3, r7, #24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fab1 	bl	8006250 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005cf2:	e28e      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cf8:	e28b      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cfa:	4b78      	ldr	r3, [pc, #480]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d06:	d107      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d08:	f107 030c 	add.w	r3, r7, #12
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fbf3 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d16:	e27c      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d1c:	e279      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d1e:	4b6f      	ldr	r3, [pc, #444]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d28:	4b6c      	ldr	r3, [pc, #432]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d10c      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d3a:	4b68      	ldr	r3, [pc, #416]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	08db      	lsrs	r3, r3, #3
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	4a66      	ldr	r2, [pc, #408]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d4c:	e01e      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d4e:	4b63      	ldr	r3, [pc, #396]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5a:	d106      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d62:	d102      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d64:	4b5f      	ldr	r3, [pc, #380]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d68:	e010      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d6a:	4b5c      	ldr	r3, [pc, #368]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d76:	d106      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d7e:	d102      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d80:	4b59      	ldr	r3, [pc, #356]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d84:	e002      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d8a:	e242      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005d8c:	e241      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d8e:	4b57      	ldr	r3, [pc, #348]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d92:	e23e      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d98:	e23b      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da0:	f040 80a6 	bne.w	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005da4:	4b4d      	ldr	r3, [pc, #308]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005dac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005db4:	d054      	beq.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dbc:	f200 808b 	bhi.w	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005dc6:	f000 8083 	beq.w	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005dd0:	f200 8081 	bhi.w	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dda:	d02f      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de2:	d878      	bhi.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df0:	d012      	beq.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8005df2:	e070      	b.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005df4:	4b39      	ldr	r3, [pc, #228]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e00:	d107      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fcca 	bl	80067a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e10:	e1ff      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e16:	e1fc      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e18:	4b30      	ldr	r3, [pc, #192]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e24:	d107      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e26:	f107 0318 	add.w	r3, r7, #24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fa10 	bl	8006250 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e34:	e1ed      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e3a:	e1ea      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e3c:	4b27      	ldr	r3, [pc, #156]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e48:	d107      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e4a:	f107 030c 	add.w	r3, r7, #12
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fb52 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e58:	e1db      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e5e:	e1d8      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e60:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d10c      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e7c:	4b17      	ldr	r3, [pc, #92]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	08db      	lsrs	r3, r3, #3
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8e:	e01e      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e90:	4b12      	ldr	r3, [pc, #72]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9c:	d106      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ea4:	d102      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eaa:	e010      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eb8:	d106      	bne.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec0:	d102      	bne.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005ec2:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec6:	e002      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005ecc:	e1a1      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005ece:	e1a0      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ed4:	e19d      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eda:	e19a      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	03d09000 	.word	0x03d09000
 8005ee4:	003d0900 	.word	0x003d0900
 8005ee8:	017d7840 	.word	0x017d7840
 8005eec:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ef6:	d173      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005ef8:	4b9a      	ldr	r3, [pc, #616]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f08:	d02f      	beq.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f10:	d863      	bhi.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1e:	d012      	beq.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8005f20:	e05b      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f22:	4b90      	ldr	r3, [pc, #576]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f2e:	d107      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f30:	f107 0318 	add.w	r3, r7, #24
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 f98b 	bl	8006250 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f3e:	e168      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f44:	e165      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f46:	4b87      	ldr	r3, [pc, #540]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f52:	d107      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f54:	f107 030c 	add.w	r3, r7, #12
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 facd 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f62:	e156      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f68:	e153      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f6a:	4b7e      	ldr	r3, [pc, #504]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f74:	4b7b      	ldr	r3, [pc, #492]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d10c      	bne.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f86:	4b77      	ldr	r3, [pc, #476]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	08db      	lsrs	r3, r3, #3
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	4a75      	ldr	r2, [pc, #468]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005f92:	fa22 f303 	lsr.w	r3, r2, r3
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f98:	e01e      	b.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f9a:	4b72      	ldr	r3, [pc, #456]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa6:	d106      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fae:	d102      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005fb0:	4b6e      	ldr	r3, [pc, #440]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb4:	e010      	b.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fb6:	4b6b      	ldr	r3, [pc, #428]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fc2:	d106      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fca:	d102      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005fcc:	4b68      	ldr	r3, [pc, #416]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd0:	e002      	b.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005fd6:	e11c      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005fd8:	e11b      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fde:	e118      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe6:	d133      	bne.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005fe8:	4b5e      	ldr	r3, [pc, #376]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffe:	d012      	beq.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006000:	e023      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006002:	4b58      	ldr	r3, [pc, #352]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800600e:	d107      	bne.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fbc3 	bl	80067a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800601e:	e0f8      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006024:	e0f5      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006026:	4b4f      	ldr	r3, [pc, #316]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800602e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006032:	d107      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006034:	f107 0318 	add.w	r3, r7, #24
 8006038:	4618      	mov	r0, r3
 800603a:	f000 f909 	bl	8006250 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006042:	e0e6      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006048:	e0e3      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800604e:	e0e0      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006056:	f040 808d 	bne.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800605a:	4b42      	ldr	r3, [pc, #264]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800605c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800606a:	d06b      	beq.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006072:	d874      	bhi.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d056      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006082:	d86c      	bhi.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800608a:	d03b      	beq.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006092:	d864      	bhi.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800609a:	d021      	beq.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060a2:	d85c      	bhi.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060b0:	d004      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80060b2:	e054      	b.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80060b4:	f000 f8b6 	bl	8006224 <HAL_RCCEx_GetD3PCLK1Freq>
 80060b8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80060ba:	e0aa      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060bc:	4b29      	ldr	r3, [pc, #164]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c8:	d107      	bne.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ca:	f107 0318 	add.w	r3, r7, #24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 f8be 	bl	8006250 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80060d8:	e09b      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060de:	e098      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060e0:	4b20      	ldr	r3, [pc, #128]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ec:	d107      	bne.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ee:	f107 030c 	add.w	r3, r7, #12
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fa00 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80060fc:	e089      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006102:	e086      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006104:	4b17      	ldr	r3, [pc, #92]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b04      	cmp	r3, #4
 800610e:	d109      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006110:	4b14      	ldr	r3, [pc, #80]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	08db      	lsrs	r3, r3, #3
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	4a13      	ldr	r2, [pc, #76]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800611c:	fa22 f303 	lsr.w	r3, r2, r3
 8006120:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006122:	e076      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006128:	e073      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800612a:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006136:	d102      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006138:	4b0c      	ldr	r3, [pc, #48]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800613a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800613c:	e069      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006142:	e066      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006144:	4b07      	ldr	r3, [pc, #28]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006150:	d102      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8006152:	4b07      	ldr	r3, [pc, #28]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006156:	e05c      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800615c:	e059      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006162:	e056      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006164:	58024400 	.word	0x58024400
 8006168:	03d09000 	.word	0x03d09000
 800616c:	003d0900 	.word	0x003d0900
 8006170:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617a:	d148      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800617c:	4b27      	ldr	r3, [pc, #156]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800617e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006184:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800618c:	d02a      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006194:	d838      	bhi.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061a2:	d00d      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80061a4:	e030      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061a6:	4b1d      	ldr	r3, [pc, #116]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061b2:	d102      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80061b4:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80061b8:	e02b      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061be:	e028      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061c0:	4b16      	ldr	r3, [pc, #88]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061cc:	d107      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fae4 	bl	80067a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80061dc:	e019      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061e2:	e016      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061e4:	4b0d      	ldr	r3, [pc, #52]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f0:	d107      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061f2:	f107 0318 	add.w	r3, r7, #24
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 f82a 	bl	8006250 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006200:	e007      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006206:	e004      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800620c:	e001      	b.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006214:	4618      	mov	r0, r3
 8006216:	3740      	adds	r7, #64	; 0x40
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	58024400 	.word	0x58024400
 8006220:	017d7840 	.word	0x017d7840

08006224 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006228:	f7fe fcae 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 800622c:	4602      	mov	r2, r0
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	091b      	lsrs	r3, r3, #4
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	4904      	ldr	r1, [pc, #16]	; (800624c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800623a:	5ccb      	ldrb	r3, [r1, r3]
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006244:	4618      	mov	r0, r3
 8006246:	bd80      	pop	{r7, pc}
 8006248:	58024400 	.word	0x58024400
 800624c:	0800a4c8 	.word	0x0800a4c8

08006250 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006250:	b480      	push	{r7}
 8006252:	b089      	sub	sp, #36	; 0x24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006258:	4ba1      	ldr	r3, [pc, #644]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006262:	4b9f      	ldr	r3, [pc, #636]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	0b1b      	lsrs	r3, r3, #12
 8006268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800626c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800626e:	4b9c      	ldr	r3, [pc, #624]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800627a:	4b99      	ldr	r3, [pc, #612]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627e:	08db      	lsrs	r3, r3, #3
 8006280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006292:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8111 	beq.w	80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	f000 8083 	beq.w	80063ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	f200 80a1 	bhi.w	80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d056      	beq.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80062ba:	e099      	b.n	80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062bc:	4b88      	ldr	r3, [pc, #544]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d02d      	beq.n	8006324 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062c8:	4b85      	ldr	r3, [pc, #532]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	08db      	lsrs	r3, r3, #3
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	4a84      	ldr	r2, [pc, #528]	; (80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
 80062d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f2:	4b7b      	ldr	r3, [pc, #492]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006302:	ed97 6a03 	vldr	s12, [r7, #12]
 8006306:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800630a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006322:	e087      	b.n	8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006336:	4b6a      	ldr	r3, [pc, #424]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006346:	ed97 6a03 	vldr	s12, [r7, #12]
 800634a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800634e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800635a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006366:	e065      	b.n	8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006372:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637a:	4b59      	ldr	r3, [pc, #356]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638a:	ed97 6a03 	vldr	s12, [r7, #12]
 800638e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800639e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063aa:	e043      	b.n	8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80063ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063be:	4b48      	ldr	r3, [pc, #288]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063ee:	e021      	b.n	8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006402:	4b37      	ldr	r3, [pc, #220]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006412:	ed97 6a03 	vldr	s12, [r7, #12]
 8006416:	eddf 5a34 	vldr	s11, [pc, #208]	; 80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800641a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800641e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006432:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006434:	4b2a      	ldr	r3, [pc, #168]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	0a5b      	lsrs	r3, r3, #9
 800643a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800644a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800644e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800645a:	ee17 2a90 	vmov	r2, s15
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006462:	4b1f      	ldr	r3, [pc, #124]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	0c1b      	lsrs	r3, r3, #16
 8006468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646c:	ee07 3a90 	vmov	s15, r3
 8006470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006474:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006478:	ee37 7a87 	vadd.f32	s14, s15, s14
 800647c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006488:	ee17 2a90 	vmov	r2, s15
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006490:	4b13      	ldr	r3, [pc, #76]	; (80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	0e1b      	lsrs	r3, r3, #24
 8006496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064b6:	ee17 2a90 	vmov	r2, s15
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064be:	e008      	b.n	80064d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	609a      	str	r2, [r3, #8]
}
 80064d2:	bf00      	nop
 80064d4:	3724      	adds	r7, #36	; 0x24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	58024400 	.word	0x58024400
 80064e4:	03d09000 	.word	0x03d09000
 80064e8:	46000000 	.word	0x46000000
 80064ec:	4c742400 	.word	0x4c742400
 80064f0:	4a742400 	.word	0x4a742400
 80064f4:	4bbebc20 	.word	0x4bbebc20

080064f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b089      	sub	sp, #36	; 0x24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006500:	4ba1      	ldr	r3, [pc, #644]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800650a:	4b9f      	ldr	r3, [pc, #636]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	0d1b      	lsrs	r3, r3, #20
 8006510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006514:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006516:	4b9c      	ldr	r3, [pc, #624]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006522:	4b99      	ldr	r3, [pc, #612]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006526:	08db      	lsrs	r3, r3, #3
 8006528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	fb02 f303 	mul.w	r3, r2, r3
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8111 	beq.w	8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b02      	cmp	r3, #2
 800654a:	f000 8083 	beq.w	8006654 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b02      	cmp	r3, #2
 8006552:	f200 80a1 	bhi.w	8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d056      	beq.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006562:	e099      	b.n	8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006564:	4b88      	ldr	r3, [pc, #544]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d02d      	beq.n	80065cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006570:	4b85      	ldr	r3, [pc, #532]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	08db      	lsrs	r3, r3, #3
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	4a84      	ldr	r2, [pc, #528]	; (800678c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
 8006580:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	ee07 3a90 	vmov	s15, r3
 8006588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	ee07 3a90 	vmov	s15, r3
 8006592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659a:	4b7b      	ldr	r3, [pc, #492]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80065ca:	e087      	b.n	80066dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80065da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065de:	4b6a      	ldr	r3, [pc, #424]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800660e:	e065      	b.n	80066dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800661e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006622:	4b59      	ldr	r3, [pc, #356]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006632:	ed97 6a03 	vldr	s12, [r7, #12]
 8006636:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800663a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006652:	e043      	b.n	80066dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800679c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006666:	4b48      	ldr	r3, [pc, #288]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006676:	ed97 6a03 	vldr	s12, [r7, #12]
 800667a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800667e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800668a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006696:	e021      	b.n	80066dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066aa:	4b37      	ldr	r3, [pc, #220]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80066be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80066dc:	4b2a      	ldr	r3, [pc, #168]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	0a5b      	lsrs	r3, r3, #9
 80066e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80066fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006702:	ee17 2a90 	vmov	r2, s15
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800670a:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	0c1b      	lsrs	r3, r3, #16
 8006710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006714:	ee07 3a90 	vmov	s15, r3
 8006718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006720:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006724:	edd7 6a07 	vldr	s13, [r7, #28]
 8006728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800672c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006730:	ee17 2a90 	vmov	r2, s15
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006738:	4b13      	ldr	r3, [pc, #76]	; (8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	0e1b      	lsrs	r3, r3, #24
 800673e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800674e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006752:	edd7 6a07 	vldr	s13, [r7, #28]
 8006756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800675a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800675e:	ee17 2a90 	vmov	r2, s15
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006766:	e008      	b.n	800677a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	609a      	str	r2, [r3, #8]
}
 800677a:	bf00      	nop
 800677c:	3724      	adds	r7, #36	; 0x24
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
 800678c:	03d09000 	.word	0x03d09000
 8006790:	46000000 	.word	0x46000000
 8006794:	4c742400 	.word	0x4c742400
 8006798:	4a742400 	.word	0x4a742400
 800679c:	4bbebc20 	.word	0x4bbebc20

080067a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b089      	sub	sp, #36	; 0x24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067a8:	4ba0      	ldr	r3, [pc, #640]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80067b2:	4b9e      	ldr	r3, [pc, #632]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b6:	091b      	lsrs	r3, r3, #4
 80067b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80067be:	4b9b      	ldr	r3, [pc, #620]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80067c8:	4b98      	ldr	r3, [pc, #608]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	08db      	lsrs	r3, r3, #3
 80067ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	fb02 f303 	mul.w	r3, r2, r3
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8111 	beq.w	8006a0e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	f000 8083 	beq.w	80068fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	f200 80a1 	bhi.w	800693e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d056      	beq.n	80068b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006808:	e099      	b.n	800693e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800680a:	4b88      	ldr	r3, [pc, #544]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d02d      	beq.n	8006872 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006816:	4b85      	ldr	r3, [pc, #532]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	08db      	lsrs	r3, r3, #3
 800681c:	f003 0303 	and.w	r3, r3, #3
 8006820:	4a83      	ldr	r2, [pc, #524]	; (8006a30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006822:	fa22 f303 	lsr.w	r3, r2, r3
 8006826:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	ee07 3a90 	vmov	s15, r3
 8006838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006840:	4b7a      	ldr	r3, [pc, #488]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006850:	ed97 6a03 	vldr	s12, [r7, #12]
 8006854:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006a34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006870:	e087      	b.n	8006982 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006a38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006884:	4b69      	ldr	r3, [pc, #420]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688c:	ee07 3a90 	vmov	s15, r3
 8006890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006894:	ed97 6a03 	vldr	s12, [r7, #12]
 8006898:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006a34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800689c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068b4:	e065      	b.n	8006982 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006a3c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80068c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068c8:	4b58      	ldr	r3, [pc, #352]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80068dc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006a34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068f8:	e043      	b.n	8006982 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	ee07 3a90 	vmov	s15, r3
 8006900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006904:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800690c:	4b47      	ldr	r3, [pc, #284]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006914:	ee07 3a90 	vmov	s15, r3
 8006918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006920:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006a34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006938:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800693c:	e021      	b.n	8006982 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	ee07 3a90 	vmov	s15, r3
 8006944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006948:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006a38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800694c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006950:	4b36      	ldr	r3, [pc, #216]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006958:	ee07 3a90 	vmov	s15, r3
 800695c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006960:	ed97 6a03 	vldr	s12, [r7, #12]
 8006964:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006a34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006980:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006982:	4b2a      	ldr	r3, [pc, #168]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	0a5b      	lsrs	r3, r3, #9
 8006988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698c:	ee07 3a90 	vmov	s15, r3
 8006990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006998:	ee37 7a87 	vadd.f32	s14, s15, s14
 800699c:	edd7 6a07 	vldr	s13, [r7, #28]
 80069a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a8:	ee17 2a90 	vmov	r2, s15
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80069b0:	4b1e      	ldr	r3, [pc, #120]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	0c1b      	lsrs	r3, r3, #16
 80069b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80069ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d6:	ee17 2a90 	vmov	r2, s15
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80069de:	4b13      	ldr	r3, [pc, #76]	; (8006a2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	0e1b      	lsrs	r3, r3, #24
 80069e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e8:	ee07 3a90 	vmov	s15, r3
 80069ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80069fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a04:	ee17 2a90 	vmov	r2, s15
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006a0c:	e008      	b.n	8006a20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	609a      	str	r2, [r3, #8]
}
 8006a20:	bf00      	nop
 8006a22:	3724      	adds	r7, #36	; 0x24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	03d09000 	.word	0x03d09000
 8006a34:	46000000 	.word	0x46000000
 8006a38:	4c742400 	.word	0x4c742400
 8006a3c:	4a742400 	.word	0x4a742400
 8006a40:	4bbebc20 	.word	0x4bbebc20

08006a44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a52:	4b53      	ldr	r3, [pc, #332]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d101      	bne.n	8006a62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e099      	b.n	8006b96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a62:	4b4f      	ldr	r3, [pc, #316]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a4e      	ldr	r2, [pc, #312]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6e:	f7f9 fd6f 	bl	8000550 <HAL_GetTick>
 8006a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a74:	e008      	b.n	8006a88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a76:	f7f9 fd6b 	bl	8000550 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e086      	b.n	8006b96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a88:	4b45      	ldr	r3, [pc, #276]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f0      	bne.n	8006a76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a94:	4b42      	ldr	r3, [pc, #264]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	031b      	lsls	r3, r3, #12
 8006aa2:	493f      	ldr	r1, [pc, #252]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	628b      	str	r3, [r1, #40]	; 0x28
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	025b      	lsls	r3, r3, #9
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	041b      	lsls	r3, r3, #16
 8006ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	061b      	lsls	r3, r3, #24
 8006ad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ad8:	4931      	ldr	r1, [pc, #196]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ade:	4b30      	ldr	r3, [pc, #192]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	492d      	ldr	r1, [pc, #180]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006af0:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	f023 0220 	bic.w	r2, r3, #32
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	4928      	ldr	r1, [pc, #160]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b02:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	4a26      	ldr	r2, [pc, #152]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b08:	f023 0310 	bic.w	r3, r3, #16
 8006b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b0e:	4b24      	ldr	r3, [pc, #144]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b12:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <RCCEx_PLL2_Config+0x160>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	69d2      	ldr	r2, [r2, #28]
 8006b1a:	00d2      	lsls	r2, r2, #3
 8006b1c:	4920      	ldr	r1, [pc, #128]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b22:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	4a1e      	ldr	r2, [pc, #120]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b28:	f043 0310 	orr.w	r3, r3, #16
 8006b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b34:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	4a19      	ldr	r2, [pc, #100]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b40:	e00f      	b.n	8006b62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d106      	bne.n	8006b56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b48:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	4a14      	ldr	r2, [pc, #80]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b54:	e005      	b.n	8006b62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b56:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b6e:	f7f9 fcef 	bl	8000550 <HAL_GetTick>
 8006b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b74:	e008      	b.n	8006b88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b76:	f7f9 fceb 	bl	8000550 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e006      	b.n	8006b96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <RCCEx_PLL2_Config+0x15c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0f0      	beq.n	8006b76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	ffff0007 	.word	0xffff0007

08006ba8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bb6:	4b53      	ldr	r3, [pc, #332]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d101      	bne.n	8006bc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e099      	b.n	8006cfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006bc6:	4b4f      	ldr	r3, [pc, #316]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a4e      	ldr	r2, [pc, #312]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd2:	f7f9 fcbd 	bl	8000550 <HAL_GetTick>
 8006bd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006bd8:	e008      	b.n	8006bec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006bda:	f7f9 fcb9 	bl	8000550 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e086      	b.n	8006cfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006bec:	4b45      	ldr	r3, [pc, #276]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1f0      	bne.n	8006bda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006bf8:	4b42      	ldr	r3, [pc, #264]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	051b      	lsls	r3, r3, #20
 8006c06:	493f      	ldr	r1, [pc, #252]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	628b      	str	r3, [r1, #40]	; 0x28
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	025b      	lsls	r3, r3, #9
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	061b      	lsls	r3, r3, #24
 8006c38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c3c:	4931      	ldr	r1, [pc, #196]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c42:	4b30      	ldr	r3, [pc, #192]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	492d      	ldr	r1, [pc, #180]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c54:	4b2b      	ldr	r3, [pc, #172]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	4928      	ldr	r1, [pc, #160]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c66:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	4a26      	ldr	r2, [pc, #152]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c72:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c76:	4b24      	ldr	r3, [pc, #144]	; (8006d08 <RCCEx_PLL3_Config+0x160>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	69d2      	ldr	r2, [r2, #28]
 8006c7e:	00d2      	lsls	r2, r2, #3
 8006c80:	4920      	ldr	r1, [pc, #128]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c86:	4b1f      	ldr	r3, [pc, #124]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	4a19      	ldr	r2, [pc, #100]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006c9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ca4:	e00f      	b.n	8006cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d106      	bne.n	8006cba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006cac:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	4a14      	ldr	r2, [pc, #80]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cb8:	e005      	b.n	8006cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006cba:	4b12      	ldr	r3, [pc, #72]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbe:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a0e      	ldr	r2, [pc, #56]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd2:	f7f9 fc3d 	bl	8000550 <HAL_GetTick>
 8006cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006cd8:	e008      	b.n	8006cec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006cda:	f7f9 fc39 	bl	8000550 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e006      	b.n	8006cfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <RCCEx_PLL3_Config+0x15c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	58024400 	.word	0x58024400
 8006d08:	ffff0007 	.word	0xffff0007

08006d0c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d904      	bls.n	8006d2a <HAL_SAI_InitProtocol+0x1e>
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	3b03      	subs	r3, #3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d812      	bhi.n	8006d4e <HAL_SAI_InitProtocol+0x42>
 8006d28:	e008      	b.n	8006d3c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fb33 	bl	800739c <SAI_InitI2S>
 8006d36:	4603      	mov	r3, r0
 8006d38:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3a:	e00b      	b.n	8006d54 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fbdc 	bl	8007500 <SAI_InitPCM>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4c:	e002      	b.n	8006d54 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	75fb      	strb	r3, [r7, #23]
      break;
 8006d52:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f808 	bl	8006d70 <HAL_SAI_Init>
 8006d60:	4603      	mov	r3, r0
 8006d62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	; 0x28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e1fb      	b.n	800717a <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d113      	bne.n	8006db4 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a96      	ldr	r2, [pc, #600]	; (8006fec <HAL_SAI_Init+0x27c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d004      	beq.n	8006da0 <HAL_SAI_Init+0x30>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a95      	ldr	r2, [pc, #596]	; (8006ff0 <HAL_SAI_Init+0x280>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d107      	bne.n	8006db0 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d103      	bne.n	8006db0 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e1e2      	b.n	800717a <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a8c      	ldr	r2, [pc, #560]	; (8006fec <HAL_SAI_Init+0x27c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d004      	beq.n	8006dc8 <HAL_SAI_Init+0x58>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a8c      	ldr	r2, [pc, #560]	; (8006ff4 <HAL_SAI_Init+0x284>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d102      	bne.n	8006dce <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8006dc8:	4b8b      	ldr	r3, [pc, #556]	; (8006ff8 <HAL_SAI_Init+0x288>)
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	e00e      	b.n	8006dec <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a87      	ldr	r2, [pc, #540]	; (8006ff0 <HAL_SAI_Init+0x280>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_SAI_Init+0x72>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a87      	ldr	r2, [pc, #540]	; (8006ffc <HAL_SAI_Init+0x28c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d102      	bne.n	8006de8 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8006de2:	4b87      	ldr	r3, [pc, #540]	; (8007000 <HAL_SAI_Init+0x290>)
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	e001      	b.n	8006dec <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e1c6      	b.n	800717a <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d106      	bne.n	8006e06 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fff5 	bl	8007df0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fbfc 	bl	8007604 <SAI_Disable>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e1b1      	b.n	800717a <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d00c      	beq.n	8006e40 <HAL_SAI_Init+0xd0>
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d80d      	bhi.n	8006e46 <HAL_SAI_Init+0xd6>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <HAL_SAI_Init+0xc4>
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d003      	beq.n	8006e3a <HAL_SAI_Init+0xca>
 8006e32:	e008      	b.n	8006e46 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e38:	e008      	b.n	8006e4c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006e3a:	2310      	movs	r3, #16
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e3e:	e005      	b.n	8006e4c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006e40:	2320      	movs	r3, #32
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e44:	e002      	b.n	8006e4c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e4a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b05      	cmp	r3, #5
 8006e52:	d822      	bhi.n	8006e9a <HAL_SAI_Init+0x12a>
 8006e54:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <HAL_SAI_Init+0xec>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e75 	.word	0x08006e75
 8006e60:	08006e7b 	.word	0x08006e7b
 8006e64:	08006e83 	.word	0x08006e83
 8006e68:	08006e9b 	.word	0x08006e9b
 8006e6c:	08006e9b 	.word	0x08006e9b
 8006e70:	08006e8b 	.word	0x08006e8b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]
      break;
 8006e78:	e012      	b.n	8006ea0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e7e:	61fb      	str	r3, [r7, #28]
      break;
 8006e80:	e00e      	b.n	8006ea0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e86:	61fb      	str	r3, [r7, #28]
      break;
 8006e88:	e00a      	b.n	8006ea0 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006e8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e8e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	f043 0303 	orr.w	r3, r3, #3
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006e98:	e002      	b.n	8006ea0 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61fb      	str	r3, [r7, #28]
      break;
 8006e9e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 8084 	beq.w	8006fb8 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a4c      	ldr	r2, [pc, #304]	; (8006fec <HAL_SAI_Init+0x27c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d004      	beq.n	8006ec8 <HAL_SAI_Init+0x158>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a4c      	ldr	r2, [pc, #304]	; (8006ff4 <HAL_SAI_Init+0x284>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d104      	bne.n	8006ed2 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006ec8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006ecc:	f7fe fd86 	bl	80059dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006ed0:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a46      	ldr	r2, [pc, #280]	; (8006ff0 <HAL_SAI_Init+0x280>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d104      	bne.n	8006ee6 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006edc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006ee0:	f7fe fd7c 	bl	80059dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006ee4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a44      	ldr	r2, [pc, #272]	; (8006ffc <HAL_SAI_Init+0x28c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d104      	bne.n	8006efa <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006ef0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006ef4:	f7fe fd72 	bl	80059dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006ef8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f02:	d120      	bne.n	8006f46 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d102      	bne.n	8006f12 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e00a      	b.n	8006f28 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	d103      	bne.n	8006f22 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e002      	b.n	8006f28 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f26:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	4619      	mov	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
 8006f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	e017      	b.n	8006f76 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f4e:	d101      	bne.n	8006f54 <HAL_SAI_Init+0x1e4>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e000      	b.n	8006f56 <HAL_SAI_Init+0x1e6>
 8006f54:	2301      	movs	r3, #1
 8006f56:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	4619      	mov	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	fb02 f303 	mul.w	r3, r2, r3
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f74:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4a22      	ldr	r2, [pc, #136]	; (8007004 <HAL_SAI_Init+0x294>)
 8006f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7e:	08da      	lsrs	r2, r3, #3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006f84:	6939      	ldr	r1, [r7, #16]
 8006f86:	4b1f      	ldr	r3, [pc, #124]	; (8007004 <HAL_SAI_Init+0x294>)
 8006f88:	fba3 2301 	umull	r2, r3, r3, r1
 8006f8c:	08da      	lsrs	r2, r3, #3
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	1aca      	subs	r2, r1, r3
 8006f98:	2a08      	cmp	r2, #8
 8006f9a:	d904      	bls.n	8006fa6 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d104      	bne.n	8006fb8 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	085a      	lsrs	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <HAL_SAI_Init+0x258>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d109      	bne.n	8006fdc <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_SAI_Init+0x264>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e001      	b.n	8006fd8 <HAL_SAI_Init+0x268>
 8006fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fd8:	623b      	str	r3, [r7, #32]
 8006fda:	e017      	b.n	800700c <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d111      	bne.n	8007008 <HAL_SAI_Init+0x298>
 8006fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe8:	e00f      	b.n	800700a <HAL_SAI_Init+0x29a>
 8006fea:	bf00      	nop
 8006fec:	40015804 	.word	0x40015804
 8006ff0:	58005404 	.word	0x58005404
 8006ff4:	40015824 	.word	0x40015824
 8006ff8:	40015800 	.word	0x40015800
 8006ffc:	58005424 	.word	0x58005424
 8007000:	58005400 	.word	0x58005400
 8007004:	cccccccd 	.word	0xcccccccd
 8007008:	2300      	movs	r3, #0
 800700a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6819      	ldr	r1, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b5b      	ldr	r3, [pc, #364]	; (8007184 <HAL_SAI_Init+0x414>)
 8007018:	400b      	ands	r3, r1
 800701a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6819      	ldr	r1, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007030:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007036:	431a      	orrs	r2, r3
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8007044:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007050:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	051b      	lsls	r3, r3, #20
 8007058:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800705e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6859      	ldr	r1, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	4b43      	ldr	r3, [pc, #268]	; (8007188 <HAL_SAI_Init+0x418>)
 800707a:	400b      	ands	r3, r1
 800707c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6859      	ldr	r1, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708c:	431a      	orrs	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6899      	ldr	r1, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b39      	ldr	r3, [pc, #228]	; (800718c <HAL_SAI_Init+0x41c>)
 80070a8:	400b      	ands	r3, r1
 80070aa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6899      	ldr	r1, [r3, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070bc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80070c2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80070c8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	3b01      	subs	r3, #1
 80070d0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80070d2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68d9      	ldr	r1, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	f24f 0320 	movw	r3, #61472	; 0xf020
 80070ea:	400b      	ands	r3, r1
 80070ec:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68d9      	ldr	r1, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070fc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007102:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007104:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	3b01      	subs	r3, #1
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1c      	ldr	r2, [pc, #112]	; (8007190 <HAL_SAI_Init+0x420>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d004      	beq.n	800712c <HAL_SAI_Init+0x3bc>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1b      	ldr	r2, [pc, #108]	; (8007194 <HAL_SAI_Init+0x424>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d119      	bne.n	8007160 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007130:	f023 0201 	bic.w	r2, r3, #1
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800713e:	2b01      	cmp	r3, #1
 8007140:	d10e      	bne.n	8007160 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714a:	3b01      	subs	r3, #1
 800714c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800714e:	431a      	orrs	r2, r3
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007158:	f043 0201 	orr.w	r2, r3, #1
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	; 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	f005c010 	.word	0xf005c010
 8007188:	ffff1ff0 	.word	0xffff1ff0
 800718c:	fff88000 	.word	0xfff88000
 8007190:	40015804 	.word	0x40015804
 8007194:	58005404 	.word	0x58005404

08007198 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	4613      	mov	r3, r2
 80071a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80071a8:	f7f9 f9d2 	bl	8000550 <HAL_GetTick>
 80071ac:	6178      	str	r0, [r7, #20]
  uint32_t temp;

  if ((pData == NULL) || (Size == 0U))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <HAL_SAI_Receive+0x22>
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e0e9      	b.n	8007392 <HAL_SAI_Receive+0x1fa>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	f040 80e2 	bne.w	8007390 <HAL_SAI_Receive+0x1f8>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_SAI_Receive+0x42>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e0db      	b.n	8007392 <HAL_SAI_Receive+0x1fa>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	88fa      	ldrh	r2, [r7, #6]
 80071ec:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	88fa      	ldrh	r2, [r7, #6]
 80071f4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2222      	movs	r2, #34	; 0x22
 80071fc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007212:	2b00      	cmp	r3, #0
 8007214:	f040 80ac 	bne.w	8007370 <HAL_SAI_Receive+0x1d8>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007226:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while (hsai->XferCount > 0U)
 8007228:	e0a2      	b.n	8007370 <HAL_SAI_Receive+0x1d8>
    {
      if ((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d06a      	beq.n	800730e <HAL_SAI_Receive+0x176>
      {
        if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d110      	bne.n	8007262 <HAL_SAI_Receive+0xca>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10c      	bne.n	8007262 <HAL_SAI_Receive+0xca>
        {
          *hsai->pBuffPtr = (uint8_t)hsai->Instance->DR;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	679a      	str	r2, [r3, #120]	; 0x78
 8007260:	e04c      	b.n	80072fc <HAL_SAI_Receive+0x164>
        }
        else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007266:	2b80      	cmp	r3, #128	; 0x80
 8007268:	d819      	bhi.n	800729e <HAL_SAI_Receive+0x106>
        {
          temp = hsai->Instance->DR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	0a1a      	lsrs	r2, r3, #8
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	679a      	str	r2, [r3, #120]	; 0x78
 800729c:	e02e      	b.n	80072fc <HAL_SAI_Receive+0x164>
        }
        else
        {
          temp = hsai->Instance->DR;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	613b      	str	r3, [r7, #16]
          *hsai->pBuffPtr = (uint8_t)temp;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 8);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	0a1a      	lsrs	r2, r3, #8
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 16);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	0c1a      	lsrs	r2, r3, #16
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	679a      	str	r2, [r3, #120]	; 0x78
          *hsai->pBuffPtr = (uint8_t)(temp >> 24);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	0e1a      	lsrs	r2, r3, #24
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
          hsai->pBuffPtr++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	679a      	str	r2, [r3, #120]	; 0x78
        }
        hsai->XferCount--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800730c:	e030      	b.n	8007370 <HAL_SAI_Receive+0x1d8>
      }
      else
      {
        /* Check for the Timeout */
        if ((((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U)) && (Timeout != HAL_MAX_DELAY))
 800730e:	f7f9 f91f 	bl	8000550 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <HAL_SAI_Receive+0x18c>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d125      	bne.n	8007370 <HAL_SAI_Receive+0x1d8>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732a:	d021      	beq.n	8007370 <HAL_SAI_Receive+0x1d8>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007344:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          /* No need to check return value because state update, unlock and error return will be performed later */
          (void) SAI_Disable(hsai);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f95c 	bl	8007604 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0208 	orr.w	r2, r2, #8
 800735a:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

          return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e010      	b.n	8007392 <HAL_SAI_Receive+0x1fa>
    while (hsai->XferCount > 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8007376:	2b00      	cmp	r3, #0
 8007378:	f47f af57 	bne.w	800722a <HAL_SAI_Receive+0x92>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	e000      	b.n	8007392 <HAL_SAI_Receive+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8007390:	2302      	movs	r3, #2
  }
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <SAI_InitI2S+0x2e>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d103      	bne.n	80073d2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	651a      	str	r2, [r3, #80]	; 0x50
 80073d0:	e002      	b.n	80073d8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80073de:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073e6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e077      	b.n	80074f2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d107      	bne.n	8007418 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007414:	665a      	str	r2, [r3, #100]	; 0x64
 8007416:	e006      	b.n	8007426 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800741e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	665a      	str	r2, [r3, #100]	; 0x64
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b03      	cmp	r3, #3
 800742a:	d84f      	bhi.n	80074cc <SAI_InitI2S+0x130>
 800742c:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <SAI_InitI2S+0x98>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	08007445 	.word	0x08007445
 8007438:	08007467 	.word	0x08007467
 800743c:	08007489 	.word	0x08007489
 8007440:	080074ab 	.word	0x080074ab

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2280      	movs	r2, #128	; 0x80
 8007448:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	085b      	lsrs	r3, r3, #1
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	011a      	lsls	r2, r3, #4
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2240      	movs	r2, #64	; 0x40
 8007462:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007464:	e035      	b.n	80074d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2280      	movs	r2, #128	; 0x80
 800746a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	085b      	lsrs	r3, r3, #1
 8007470:	019a      	lsls	r2, r3, #6
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2280      	movs	r2, #128	; 0x80
 8007484:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007486:	e024      	b.n	80074d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	22c0      	movs	r2, #192	; 0xc0
 800748c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	085b      	lsrs	r3, r3, #1
 8007492:	019a      	lsls	r2, r3, #6
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2280      	movs	r2, #128	; 0x80
 80074a6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80074a8:	e013      	b.n	80074d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	22e0      	movs	r2, #224	; 0xe0
 80074ae:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	019a      	lsls	r2, r3, #6
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2280      	movs	r2, #128	; 0x80
 80074c8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80074ca:	e002      	b.n	80074d2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	75fb      	strb	r3, [r7, #23]
      break;
 80074d0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d10b      	bne.n	80074f0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d102      	bne.n	80074e4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2210      	movs	r2, #16
 80074e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d102      	bne.n	80074f0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2208      	movs	r2, #8
 80074ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop

08007500 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <SAI_InitPCM+0x2e>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d103      	bne.n	8007536 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	651a      	str	r2, [r3, #80]	; 0x50
 8007534:	e002      	b.n	800753c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007548:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007550:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007564:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b04      	cmp	r3, #4
 800756a:	d103      	bne.n	8007574 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	659a      	str	r2, [r3, #88]	; 0x58
 8007572:	e002      	b.n	800757a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	220d      	movs	r2, #13
 8007578:	659a      	str	r2, [r3, #88]	; 0x58
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b03      	cmp	r3, #3
 800757e:	d837      	bhi.n	80075f0 <SAI_InitPCM+0xf0>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <SAI_InitPCM+0x88>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	08007599 	.word	0x08007599
 800758c:	080075af 	.word	0x080075af
 8007590:	080075c5 	.word	0x080075c5
 8007594:	080075db 	.word	0x080075db
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2280      	movs	r2, #128	; 0x80
 800759c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	011a      	lsls	r2, r3, #4
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2240      	movs	r2, #64	; 0x40
 80075aa:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80075ac:	e023      	b.n	80075f6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2280      	movs	r2, #128	; 0x80
 80075b2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2280      	movs	r2, #128	; 0x80
 80075c0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80075c2:	e018      	b.n	80075f6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	22c0      	movs	r2, #192	; 0xc0
 80075c8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2280      	movs	r2, #128	; 0x80
 80075d6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80075d8:	e00d      	b.n	80075f6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	22e0      	movs	r2, #224	; 0xe0
 80075de:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2280      	movs	r2, #128	; 0x80
 80075ec:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80075ee:	e002      	b.n	80075f6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75fb      	strb	r3, [r7, #23]
      break;
 80075f4:	bf00      	nop
  }

  return status;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800760c:	4b18      	ldr	r3, [pc, #96]	; (8007670 <SAI_Disable+0x6c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a18      	ldr	r2, [pc, #96]	; (8007674 <SAI_Disable+0x70>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	0b1b      	lsrs	r3, r3, #12
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800762e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800763c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	72fb      	strb	r3, [r7, #11]
      break;
 800764a:	e009      	b.n	8007660 <SAI_Disable+0x5c>
    }
    count--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3b01      	subs	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e7      	bne.n	8007630 <SAI_Disable+0x2c>

  return status;
 8007660:	7afb      	ldrb	r3, [r7, #11]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	24000410 	.word	0x24000410
 8007674:	95cbec1b 	.word	0x95cbec1b

08007678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800767c:	f7f8 fee2 	bl	8000444 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED1);
 8007680:	2000      	movs	r0, #0
 8007682:	f7f8 fe45 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8007686:	2001      	movs	r0, #1
 8007688:	f7f8 fe42 	bl	8000310 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 800768c:	2000      	movs	r0, #0
 800768e:	f7f8 febb 	bl	8000408 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8007692:	2001      	movs	r0, #1
 8007694:	f7f8 feb8 	bl	8000408 <BSP_LED_Off>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007698:	f000 f822 	bl	80076e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800769c:	f000 fa62 	bl	8007b64 <MX_GPIO_Init>
  MX_BDMA_Init();
 80076a0:	f000 f9d6 	bl	8007a50 <MX_BDMA_Init>
  MX_SAI4_Init();
 80076a4:	f000 f976 	bl	8007994 <MX_SAI4_Init>
  MX_CRC_Init();
 80076a8:	f000 f888 	bl	80077bc <MX_CRC_Init>
  MX_PDM2PCM_Init();
 80076ac:	f000 facc 	bl	8007c48 <MX_PDM2PCM_Init>
  MX_SAI1_Init();
 80076b0:	f000 f938 	bl	8007924 <MX_SAI1_Init>
  MX_DMA_Init();
 80076b4:	f000 f9e6 	bl	8007a84 <MX_DMA_Init>
  MX_RAMECC_Init();
 80076b8:	f000 f902 	bl	80078c0 <MX_RAMECC_Init>
  MX_I2C4_Init();
 80076bc:	f000 f8c0 	bl	8007840 <MX_I2C4_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_SAI_Receive(&hsai_BlockA4, (uint8_t*)sexy_buffer, 2048, 1000);
 80076c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076c8:	4903      	ldr	r1, [pc, #12]	; (80076d8 <main+0x60>)
 80076ca:	4804      	ldr	r0, [pc, #16]	; (80076dc <main+0x64>)
 80076cc:	f7ff fd64 	bl	8007198 <HAL_SAI_Receive>
	  BSP_LED_On(LED1);
 80076d0:	2000      	movs	r0, #0
 80076d2:	f7f8 fe7b 	bl	80003cc <BSP_LED_On>
	  HAL_SAI_Receive(&hsai_BlockA4, (uint8_t*)sexy_buffer, 2048, 1000);
 80076d6:	e7f3      	b.n	80076c0 <main+0x48>
 80076d8:	2400049c 	.word	0x2400049c
 80076dc:	24000e38 	.word	0x24000e38

080076e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b09c      	sub	sp, #112	; 0x70
 80076e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80076e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ea:	224c      	movs	r2, #76	; 0x4c
 80076ec:	2100      	movs	r1, #0
 80076ee:	4618      	mov	r0, r3
 80076f0:	f002 fcec 	bl	800a0cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80076f4:	1d3b      	adds	r3, r7, #4
 80076f6:	2220      	movs	r2, #32
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f002 fce6 	bl	800a0cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8007700:	2004      	movs	r0, #4
 8007702:	f7fc facd 	bl	8003ca0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007706:	2300      	movs	r3, #0
 8007708:	603b      	str	r3, [r7, #0]
 800770a:	4b2b      	ldr	r3, [pc, #172]	; (80077b8 <SystemClock_Config+0xd8>)
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	4a2a      	ldr	r2, [pc, #168]	; (80077b8 <SystemClock_Config+0xd8>)
 8007710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007714:	6193      	str	r3, [r2, #24]
 8007716:	4b28      	ldr	r3, [pc, #160]	; (80077b8 <SystemClock_Config+0xd8>)
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007722:	bf00      	nop
 8007724:	4b24      	ldr	r3, [pc, #144]	; (80077b8 <SystemClock_Config+0xd8>)
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800772c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007730:	d1f8      	bne.n	8007724 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007732:	2302      	movs	r3, #2
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8007736:	2301      	movs	r3, #1
 8007738:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800773e:	2302      	movs	r3, #2
 8007740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007742:	2300      	movs	r3, #0
 8007744:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007746:	2304      	movs	r3, #4
 8007748:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800774a:	2318      	movs	r3, #24
 800774c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800774e:	2301      	movs	r3, #1
 8007750:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8007752:	237d      	movs	r3, #125	; 0x7d
 8007754:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007756:	2302      	movs	r3, #2
 8007758:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800775a:	230c      	movs	r3, #12
 800775c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800775e:	2300      	movs	r3, #0
 8007760:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800776a:	4618      	mov	r0, r3
 800776c:	f7fc fb30 	bl	8003dd0 <HAL_RCC_OscConfig>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007776:	f000 fa61 	bl	8007c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800777a:	233f      	movs	r3, #63	; 0x3f
 800777c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800777e:	2303      	movs	r3, #3
 8007780:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007786:	2308      	movs	r3, #8
 8007788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800778a:	2340      	movs	r3, #64	; 0x40
 800778c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800778e:	2340      	movs	r3, #64	; 0x40
 8007790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007796:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007798:	2340      	movs	r3, #64	; 0x40
 800779a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800779c:	1d3b      	adds	r3, r7, #4
 800779e:	2102      	movs	r1, #2
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fc fec1 	bl	8004528 <HAL_RCC_ClockConfig>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80077ac:	f000 fa46 	bl	8007c3c <Error_Handler>
  }
}
 80077b0:	bf00      	nop
 80077b2:	3770      	adds	r7, #112	; 0x70
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	58024800 	.word	0x58024800

080077bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80077c2:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <MX_CRC_Init+0x78>)
 80077c4:	4a1c      	ldr	r2, [pc, #112]	; (8007838 <MX_CRC_Init+0x7c>)
 80077c6:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80077c8:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <MX_CRC_Init+0x78>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80077ce:	4b19      	ldr	r3, [pc, #100]	; (8007834 <MX_CRC_Init+0x78>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <MX_CRC_Init+0x78>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80077da:	4b16      	ldr	r3, [pc, #88]	; (8007834 <MX_CRC_Init+0x78>)
 80077dc:	2200      	movs	r2, #0
 80077de:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80077e0:	4b14      	ldr	r3, [pc, #80]	; (8007834 <MX_CRC_Init+0x78>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80077e6:	4813      	ldr	r0, [pc, #76]	; (8007834 <MX_CRC_Init+0x78>)
 80077e8:	f7f8 ffce 	bl	8000788 <HAL_CRC_Init>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 80077f2:	f000 fa23 	bl	8007c3c <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80077f6:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <MX_CRC_Init+0x78>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <MX_CRC_Init+0x78>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0201 	orr.w	r2, r2, #1
 8007804:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8007806:	4b0d      	ldr	r3, [pc, #52]	; (800783c <MX_CRC_Init+0x80>)
 8007808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800780c:	4a0b      	ldr	r2, [pc, #44]	; (800783c <MX_CRC_Init+0x80>)
 800780e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007816:	4b09      	ldr	r3, [pc, #36]	; (800783c <MX_CRC_Init+0x80>)
 8007818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800781c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007820:	607b      	str	r3, [r7, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8007824:	4803      	ldr	r0, [pc, #12]	; (8007834 <MX_CRC_Init+0x78>)
 8007826:	f000 fa53 	bl	8007cd0 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	24000d7c 	.word	0x24000d7c
 8007838:	58024c00 	.word	0x58024c00
 800783c:	58024400 	.word	0x58024400

08007840 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8007844:	4b1b      	ldr	r3, [pc, #108]	; (80078b4 <MX_I2C4_Init+0x74>)
 8007846:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <MX_I2C4_Init+0x78>)
 8007848:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10B0DCFB;
 800784a:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <MX_I2C4_Init+0x74>)
 800784c:	4a1b      	ldr	r2, [pc, #108]	; (80078bc <MX_I2C4_Init+0x7c>)
 800784e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 104;
 8007850:	4b18      	ldr	r3, [pc, #96]	; (80078b4 <MX_I2C4_Init+0x74>)
 8007852:	2268      	movs	r2, #104	; 0x68
 8007854:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007856:	4b17      	ldr	r3, [pc, #92]	; (80078b4 <MX_I2C4_Init+0x74>)
 8007858:	2201      	movs	r2, #1
 800785a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800785c:	4b15      	ldr	r3, [pc, #84]	; (80078b4 <MX_I2C4_Init+0x74>)
 800785e:	2200      	movs	r2, #0
 8007860:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8007862:	4b14      	ldr	r3, [pc, #80]	; (80078b4 <MX_I2C4_Init+0x74>)
 8007864:	2200      	movs	r2, #0
 8007866:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007868:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <MX_I2C4_Init+0x74>)
 800786a:	2200      	movs	r2, #0
 800786c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800786e:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <MX_I2C4_Init+0x74>)
 8007870:	2200      	movs	r2, #0
 8007872:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007874:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <MX_I2C4_Init+0x74>)
 8007876:	2200      	movs	r2, #0
 8007878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800787a:	480e      	ldr	r0, [pc, #56]	; (80078b4 <MX_I2C4_Init+0x74>)
 800787c:	f7fb fa7e 	bl	8002d7c <HAL_I2C_Init>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8007886:	f000 f9d9 	bl	8007c3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800788a:	2100      	movs	r1, #0
 800788c:	4809      	ldr	r0, [pc, #36]	; (80078b4 <MX_I2C4_Init+0x74>)
 800788e:	f7fc f970 	bl	8003b72 <HAL_I2CEx_ConfigAnalogFilter>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8007898:	f000 f9d0 	bl	8007c3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800789c:	2100      	movs	r1, #0
 800789e:	4805      	ldr	r0, [pc, #20]	; (80078b4 <MX_I2C4_Init+0x74>)
 80078a0:	f7fc f9b2 	bl	8003c08 <HAL_I2CEx_ConfigDigitalFilter>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80078aa:	f000 f9c7 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80078ae:	bf00      	nop
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	24000ca8 	.word	0x24000ca8
 80078b8:	58001c00 	.word	0x58001c00
 80078bc:	10b0dcfb 	.word	0x10b0dcfb

080078c0 <MX_RAMECC_Init>:
  * @brief RAMECC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RAMECC_Init(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RAMECC_Init 1 */

  /* USER CODE END RAMECC_Init 1 */
  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 80078c4:	4b11      	ldr	r3, [pc, #68]	; (800790c <MX_RAMECC_Init+0x4c>)
 80078c6:	4a12      	ldr	r2, [pc, #72]	; (8007910 <MX_RAMECC_Init+0x50>)
 80078c8:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 80078ca:	4810      	ldr	r0, [pc, #64]	; (800790c <MX_RAMECC_Init+0x4c>)
 80078cc:	f7fc fa42 	bl	8003d54 <HAL_RAMECC_Init>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 80078d6:	f000 f9b1 	bl	8007c3c <Error_Handler>
  }
  /** Initialize RAMECC2 M2 : SRAM2_0
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 80078da:	4b0e      	ldr	r3, [pc, #56]	; (8007914 <MX_RAMECC_Init+0x54>)
 80078dc:	4a0e      	ldr	r2, [pc, #56]	; (8007918 <MX_RAMECC_Init+0x58>)
 80078de:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 80078e0:	480c      	ldr	r0, [pc, #48]	; (8007914 <MX_RAMECC_Init+0x54>)
 80078e2:	f7fc fa37 	bl	8003d54 <HAL_RAMECC_Init>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 80078ec:	f000 f9a6 	bl	8007c3c <Error_Handler>
  }
  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 80078f0:	4b0a      	ldr	r3, [pc, #40]	; (800791c <MX_RAMECC_Init+0x5c>)
 80078f2:	4a0b      	ldr	r2, [pc, #44]	; (8007920 <MX_RAMECC_Init+0x60>)
 80078f4:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 80078f6:	4809      	ldr	r0, [pc, #36]	; (800791c <MX_RAMECC_Init+0x5c>)
 80078f8:	f7fc fa2c 	bl	8003d54 <HAL_RAMECC_Init>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 8007902:	f000 f99b 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 8007906:	bf00      	nop
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	24000f58 	.word	0x24000f58
 8007910:	48023020 	.word	0x48023020
 8007914:	24000ed0 	.word	0x24000ed0
 8007918:	48023040 	.word	0x48023040
 800791c:	24000cf4 	.word	0x24000cf4
 8007920:	58027020 	.word	0x58027020

08007924 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8007928:	4b18      	ldr	r3, [pc, #96]	; (800798c <MX_SAI1_Init+0x68>)
 800792a:	4a19      	ldr	r2, [pc, #100]	; (8007990 <MX_SAI1_Init+0x6c>)
 800792c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800792e:	4b17      	ldr	r3, [pc, #92]	; (800798c <MX_SAI1_Init+0x68>)
 8007930:	2200      	movs	r2, #0
 8007932:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8007934:	4b15      	ldr	r3, [pc, #84]	; (800798c <MX_SAI1_Init+0x68>)
 8007936:	2200      	movs	r2, #0
 8007938:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800793a:	4b14      	ldr	r3, [pc, #80]	; (800798c <MX_SAI1_Init+0x68>)
 800793c:	2200      	movs	r2, #0
 800793e:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 8007940:	4b12      	ldr	r3, [pc, #72]	; (800798c <MX_SAI1_Init+0x68>)
 8007942:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007946:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007948:	4b10      	ldr	r3, [pc, #64]	; (800798c <MX_SAI1_Init+0x68>)
 800794a:	2200      	movs	r2, #0
 800794c:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800794e:	4b0f      	ldr	r3, [pc, #60]	; (800798c <MX_SAI1_Init+0x68>)
 8007950:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8007954:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007956:	4b0d      	ldr	r3, [pc, #52]	; (800798c <MX_SAI1_Init+0x68>)
 8007958:	2200      	movs	r2, #0
 800795a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_MONOMODE;
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <MX_SAI1_Init+0x68>)
 800795e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007962:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8007964:	4b09      	ldr	r3, [pc, #36]	; (800798c <MX_SAI1_Init+0x68>)
 8007966:	2200      	movs	r2, #0
 8007968:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800796a:	4b08      	ldr	r3, [pc, #32]	; (800798c <MX_SAI1_Init+0x68>)
 800796c:	2200      	movs	r2, #0
 800796e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_PCM_LONG, SAI_PROTOCOL_DATASIZE_32BIT, 1) != HAL_OK)
 8007970:	2301      	movs	r3, #1
 8007972:	2203      	movs	r2, #3
 8007974:	2103      	movs	r1, #3
 8007976:	4805      	ldr	r0, [pc, #20]	; (800798c <MX_SAI1_Init+0x68>)
 8007978:	f7ff f9c8 	bl	8006d0c <HAL_SAI_InitProtocol>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <MX_SAI1_Init+0x62>
  {
    Error_Handler();
 8007982:	f000 f95b 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8007986:	bf00      	nop
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	24000da0 	.word	0x24000da0
 8007990:	40015824 	.word	0x40015824

08007994 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 8007998:	4b2b      	ldr	r3, [pc, #172]	; (8007a48 <MX_SAI4_Init+0xb4>)
 800799a:	4a2c      	ldr	r2, [pc, #176]	; (8007a4c <MX_SAI4_Init+0xb8>)
 800799c:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 800799e:	4b2a      	ldr	r3, [pc, #168]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 80079a4:	4b28      	ldr	r3, [pc, #160]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 80079aa:	4b27      	ldr	r3, [pc, #156]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079ac:	2280      	movs	r2, #128	; 0x80
 80079ae:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_LSB;
 80079b0:	4b25      	ldr	r3, [pc, #148]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80079b8:	4b23      	ldr	r3, [pc, #140]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 80079be:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80079c4:	4b20      	ldr	r3, [pc, #128]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_DISABLE;
 80079ca:	4b1f      	ldr	r3, [pc, #124]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80079d0:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80079d2:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 80079d8:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079da:	2200      	movs	r2, #0
 80079dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 80079de:	4b1a      	ldr	r3, [pc, #104]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 80079e4:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 80079ec:	4b16      	ldr	r3, [pc, #88]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 16;
 80079fa:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <MX_SAI4_Init+0xb4>)
 80079fc:	2210      	movs	r2, #16
 80079fe:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8007a00:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <MX_SAI4_Init+0xb4>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8007a06:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <MX_SAI4_Init+0xb4>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007a0c:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <MX_SAI4_Init+0xb4>)
 8007a0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a12:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8007a14:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <MX_SAI4_Init+0xb4>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8007a1a:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <MX_SAI4_Init+0xb4>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8007a20:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <MX_SAI4_Init+0xb4>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <MX_SAI4_Init+0xb4>)
 8007a28:	2201      	movs	r2, #1
 8007a2a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x0000FFFF;
 8007a2c:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <MX_SAI4_Init+0xb4>)
 8007a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a32:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8007a34:	4804      	ldr	r0, [pc, #16]	; (8007a48 <MX_SAI4_Init+0xb4>)
 8007a36:	f7ff f99b 	bl	8006d70 <HAL_SAI_Init>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <MX_SAI4_Init+0xb0>
  {
    Error_Handler();
 8007a40:	f000 f8fc 	bl	8007c3c <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8007a44:	bf00      	nop
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	24000e38 	.word	0x24000e38
 8007a4c:	58005404 	.word	0x58005404

08007a50 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8007a56:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <MX_BDMA_Init+0x30>)
 8007a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a5c:	4a08      	ldr	r2, [pc, #32]	; (8007a80 <MX_BDMA_Init+0x30>)
 8007a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a66:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <MX_BDMA_Init+0x30>)
 8007a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a70:	607b      	str	r3, [r7, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]

}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	58024400 	.word	0x58024400

08007a84 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007a8a:	4b33      	ldr	r3, [pc, #204]	; (8007b58 <MX_DMA_Init+0xd4>)
 8007a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007a90:	4a31      	ldr	r2, [pc, #196]	; (8007b58 <MX_DMA_Init+0xd4>)
 8007a92:	f043 0302 	orr.w	r3, r3, #2
 8007a96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007a9a:	4b2f      	ldr	r3, [pc, #188]	; (8007b58 <MX_DMA_Init+0xd4>)
 8007a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007aa8:	4b2b      	ldr	r3, [pc, #172]	; (8007b58 <MX_DMA_Init+0xd4>)
 8007aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007aae:	4a2a      	ldr	r2, [pc, #168]	; (8007b58 <MX_DMA_Init+0xd4>)
 8007ab0:	f043 0301 	orr.w	r3, r3, #1
 8007ab4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007ab8:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <MX_DMA_Init+0xd4>)
 8007aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	603b      	str	r3, [r7, #0]
 8007ac4:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8007ac6:	4b25      	ldr	r3, [pc, #148]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007ac8:	4a25      	ldr	r2, [pc, #148]	; (8007b60 <MX_DMA_Init+0xdc>)
 8007aca:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8007acc:	4b23      	ldr	r3, [pc, #140]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007ad2:	4b22      	ldr	r3, [pc, #136]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007ad4:	2280      	movs	r2, #128	; 0x80
 8007ad6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8007ad8:	4b20      	ldr	r3, [pc, #128]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ade:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8007ae0:	4b1e      	ldr	r3, [pc, #120]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ae6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007ae8:	4b1c      	ldr	r3, [pc, #112]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007aea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007aee:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007af0:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007af6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8007af8:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8007afe:	4b17      	ldr	r3, [pc, #92]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007b00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b04:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007b06:	4b15      	ldr	r3, [pc, #84]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007b08:	2204      	movs	r2, #4
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007b0c:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007b0e:	2203      	movs	r2, #3
 8007b10:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8007b12:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007b18:	4b10      	ldr	r3, [pc, #64]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8007b1e:	480f      	ldr	r0, [pc, #60]	; (8007b5c <MX_DMA_Init+0xd8>)
 8007b20:	f7f8 ff1c 	bl	800095c <HAL_DMA_Init>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <MX_DMA_Init+0xaa>
  {
    Error_Handler( );
 8007b2a:	f000 f887 	bl	8007c3c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2100      	movs	r1, #0
 8007b32:	200c      	movs	r0, #12
 8007b34:	f7f8 fdf3 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8007b38:	200c      	movs	r0, #12
 8007b3a:	f7f8 fe0a 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	2066      	movs	r0, #102	; 0x66
 8007b44:	f7f8 fdeb 	bl	800071e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8007b48:	2066      	movs	r0, #102	; 0x66
 8007b4a:	f7f8 fe02 	bl	8000752 <HAL_NVIC_EnableIRQ>

}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	58024400 	.word	0x58024400
 8007b5c:	24000d04 	.word	0x24000d04
 8007b60:	40020410 	.word	0x40020410

08007b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08a      	sub	sp, #40	; 0x28
 8007b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b6a:	f107 0314 	add.w	r3, r7, #20
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	605a      	str	r2, [r3, #4]
 8007b74:	609a      	str	r2, [r3, #8]
 8007b76:	60da      	str	r2, [r3, #12]
 8007b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b7a:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b80:	4a2c      	ldr	r2, [pc, #176]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007b82:	f043 0302 	orr.w	r3, r3, #2
 8007b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b8a:	4b2a      	ldr	r3, [pc, #168]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	613b      	str	r3, [r7, #16]
 8007b96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b98:	4b26      	ldr	r3, [pc, #152]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b9e:	4a25      	ldr	r2, [pc, #148]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ba8:	4b22      	ldr	r3, [pc, #136]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bb6:	4b1f      	ldr	r3, [pc, #124]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bbc:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007bbe:	f043 0310 	orr.w	r3, r3, #16
 8007bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007bc6:	4b1b      	ldr	r3, [pc, #108]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007bd4:	4b17      	ldr	r3, [pc, #92]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bda:	4a16      	ldr	r2, [pc, #88]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007bdc:	f043 0308 	orr.w	r3, r3, #8
 8007be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007be4:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	607b      	str	r3, [r7, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007bf2:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bf8:	4a0e      	ldr	r2, [pc, #56]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007bfa:	f043 0320 	orr.w	r3, r3, #32
 8007bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c02:	4b0c      	ldr	r3, [pc, #48]	; (8007c34 <MX_GPIO_Init+0xd0>)
 8007c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c08:	f003 0320 	and.w	r3, r3, #32
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007c10:	2301      	movs	r3, #1
 8007c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007c14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c1e:	f107 0314 	add.w	r3, r7, #20
 8007c22:	4619      	mov	r1, r3
 8007c24:	4804      	ldr	r0, [pc, #16]	; (8007c38 <MX_GPIO_Init+0xd4>)
 8007c26:	f7fa fec3 	bl	80029b0 <HAL_GPIO_Init>

}
 8007c2a:	bf00      	nop
 8007c2c:	3728      	adds	r7, #40	; 0x28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	58024400 	.word	0x58024400
 8007c38:	58021000 	.word	0x58021000

08007c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007c40:	b672      	cpsid	i
}
 8007c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007c44:	e7fe      	b.n	8007c44 <Error_Handler+0x8>
	...

08007c48 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8007c4c:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <MX_PDM2PCM_Init+0x48>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8007c52:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <MX_PDM2PCM_Init+0x48>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8007c58:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <MX_PDM2PCM_Init+0x48>)
 8007c5a:	4a0e      	ldr	r2, [pc, #56]	; (8007c94 <MX_PDM2PCM_Init+0x4c>)
 8007c5c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <MX_PDM2PCM_Init+0x48>)
 8007c60:	2201      	movs	r2, #1
 8007c62:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8007c64:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <MX_PDM2PCM_Init+0x48>)
 8007c66:	2201      	movs	r2, #1
 8007c68:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8007c6a:	4809      	ldr	r0, [pc, #36]	; (8007c90 <MX_PDM2PCM_Init+0x48>)
 8007c6c:	f002 f83a 	bl	8009ce4 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8007c70:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <MX_PDM2PCM_Init+0x50>)
 8007c72:	2202      	movs	r2, #2
 8007c74:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8007c76:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <MX_PDM2PCM_Init+0x50>)
 8007c78:	2210      	movs	r2, #16
 8007c7a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <MX_PDM2PCM_Init+0x50>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8007c82:	4905      	ldr	r1, [pc, #20]	; (8007c98 <MX_PDM2PCM_Init+0x50>)
 8007c84:	4802      	ldr	r0, [pc, #8]	; (8007c90 <MX_PDM2PCM_Init+0x48>)
 8007c86:	f002 f8fd 	bl	8009e84 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8007c8a:	bf00      	nop
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	24001048 	.word	0x24001048
 8007c94:	7d70a3d6 	.word	0x7d70a3d6
 8007c98:	24001040 	.word	0x24001040

08007c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <HAL_MspInit+0x30>)
 8007ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ca8:	4a08      	ldr	r2, [pc, #32]	; (8007ccc <HAL_MspInit+0x30>)
 8007caa:	f043 0302 	orr.w	r3, r3, #2
 8007cae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <HAL_MspInit+0x30>)
 8007cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	607b      	str	r3, [r7, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	58024400 	.word	0x58024400

08007cd0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a0b      	ldr	r2, [pc, #44]	; (8007d0c <HAL_CRC_MspInit+0x3c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d10e      	bne.n	8007d00 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <HAL_CRC_MspInit+0x40>)
 8007ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ce8:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <HAL_CRC_MspInit+0x40>)
 8007cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <HAL_CRC_MspInit+0x40>)
 8007cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007d00:	bf00      	nop
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	58024c00 	.word	0x58024c00
 8007d10:	58024400 	.word	0x58024400

08007d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b0b6      	sub	sp, #216	; 0xd8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	609a      	str	r2, [r3, #8]
 8007d28:	60da      	str	r2, [r3, #12]
 8007d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007d2c:	f107 0310 	add.w	r3, r7, #16
 8007d30:	22b4      	movs	r2, #180	; 0xb4
 8007d32:	2100      	movs	r1, #0
 8007d34:	4618      	mov	r0, r3
 8007d36:	f002 f9c9 	bl	800a0cc <memset>
  if(hi2c->Instance==I2C4)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a29      	ldr	r2, [pc, #164]	; (8007de4 <HAL_I2C_MspInit+0xd0>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d14a      	bne.n	8007dda <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8007d44:	2310      	movs	r3, #16
 8007d46:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d4e:	f107 0310 	add.w	r3, r7, #16
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fc ff48 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007d5e:	f7ff ff6d 	bl	8007c3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d62:	4b21      	ldr	r3, [pc, #132]	; (8007de8 <HAL_I2C_MspInit+0xd4>)
 8007d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d68:	4a1f      	ldr	r2, [pc, #124]	; (8007de8 <HAL_I2C_MspInit+0xd4>)
 8007d6a:	f043 0302 	orr.w	r3, r3, #2
 8007d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d72:	4b1d      	ldr	r3, [pc, #116]	; (8007de8 <HAL_I2C_MspInit+0xd4>)
 8007d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007d80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007d84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d88:	2312      	movs	r3, #18
 8007d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d94:	2300      	movs	r3, #0
 8007d96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8007d9a:	2306      	movs	r3, #6
 8007d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007da0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007da4:	4619      	mov	r1, r3
 8007da6:	4811      	ldr	r0, [pc, #68]	; (8007dec <HAL_I2C_MspInit+0xd8>)
 8007da8:	f7fa fe02 	bl	80029b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007dac:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <HAL_I2C_MspInit+0xd4>)
 8007dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007db2:	4a0d      	ldr	r2, [pc, #52]	; (8007de8 <HAL_I2C_MspInit+0xd4>)
 8007db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <HAL_I2C_MspInit+0xd4>)
 8007dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc6:	60bb      	str	r3, [r7, #8]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2100      	movs	r1, #0
 8007dce:	2060      	movs	r0, #96	; 0x60
 8007dd0:	f7f8 fca5 	bl	800071e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8007dd4:	2060      	movs	r0, #96	; 0x60
 8007dd6:	f7f8 fcbc 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8007dda:	bf00      	nop
 8007ddc:	37d8      	adds	r7, #216	; 0xd8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	58001c00 	.word	0x58001c00
 8007de8:	58024400 	.word	0x58024400
 8007dec:	58020400 	.word	0x58020400

08007df0 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b0ba      	sub	sp, #232	; 0xe8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007df8:	f107 0310 	add.w	r3, r7, #16
 8007dfc:	22b4      	movs	r2, #180	; 0xb4
 8007dfe:	2100      	movs	r1, #0
 8007e00:	4618      	mov	r0, r3
 8007e02:	f002 f963 	bl	800a0cc <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4aae      	ldr	r2, [pc, #696]	; (80080c4 <HAL_SAI_MspInit+0x2d4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	f040 80ae 	bne.w	8007f6e <HAL_SAI_MspInit+0x17e>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8007e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e16:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e1c:	f107 0310 	add.w	r3, r7, #16
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fc fee1 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8007e2c:	f7ff ff06 	bl	8007c3c <Error_Handler>
    }

      if (SAI1_client == 0)
 8007e30:	4ba5      	ldr	r3, [pc, #660]	; (80080c8 <HAL_SAI_MspInit+0x2d8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10e      	bne.n	8007e56 <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8007e38:	4ba4      	ldr	r3, [pc, #656]	; (80080cc <HAL_SAI_MspInit+0x2dc>)
 8007e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e3e:	4aa3      	ldr	r2, [pc, #652]	; (80080cc <HAL_SAI_MspInit+0x2dc>)
 8007e40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007e48:	4ba0      	ldr	r3, [pc, #640]	; (80080cc <HAL_SAI_MspInit+0x2dc>)
 8007e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8007e56:	4b9c      	ldr	r3, [pc, #624]	; (80080c8 <HAL_SAI_MspInit+0x2d8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	4a9a      	ldr	r2, [pc, #616]	; (80080c8 <HAL_SAI_MspInit+0x2d8>)
 8007e5e:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007e60:	2308      	movs	r3, #8
 8007e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e66:	2302      	movs	r3, #2
 8007e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007e78:	2306      	movs	r3, #6
 8007e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007e82:	4619      	mov	r1, r3
 8007e84:	4892      	ldr	r0, [pc, #584]	; (80080d0 <HAL_SAI_MspInit+0x2e0>)
 8007e86:	f7fa fd93 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e92:	2302      	movs	r3, #2
 8007e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007ea4:	2306      	movs	r3, #6
 8007ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007eaa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4888      	ldr	r0, [pc, #544]	; (80080d4 <HAL_SAI_MspInit+0x2e4>)
 8007eb2:	f7fa fd7d 	bl	80029b0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/
    // copied from discovery audio code

    hdma_sai1_b.Instance = DMA1_Stream1;
 8007eb6:	4b88      	ldr	r3, [pc, #544]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007eb8:	4a88      	ldr	r2, [pc, #544]	; (80080dc <HAL_SAI_MspInit+0x2ec>)
 8007eba:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8007ebc:	4b86      	ldr	r3, [pc, #536]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007ebe:	2258      	movs	r2, #88	; 0x58
 8007ec0:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ec2:	4b85      	ldr	r3, [pc, #532]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007ec4:	2240      	movs	r2, #64	; 0x40
 8007ec6:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ec8:	4b83      	ldr	r3, [pc, #524]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8007ece:	4b82      	ldr	r3, [pc, #520]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ed4:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007ed6:	4b80      	ldr	r3, [pc, #512]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007edc:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007ede:	4b7e      	ldr	r3, [pc, #504]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ee4:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8007ee6:	4b7c      	ldr	r3, [pc, #496]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eec:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8007eee:	4b7a      	ldr	r3, [pc, #488]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007ef0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007ef4:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007ef6:	4b78      	ldr	r3, [pc, #480]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007efc:	4b76      	ldr	r3, [pc, #472]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007efe:	2203      	movs	r2, #3
 8007f00:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8007f02:	4b75      	ldr	r3, [pc, #468]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007f08:	4b73      	ldr	r3, [pc, #460]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8007f0e:	4872      	ldr	r0, [pc, #456]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007f10:	f7f8 fd24 	bl	800095c <HAL_DMA_Init>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <HAL_SAI_MspInit+0x12e>
    {
      Error_Handler();
 8007f1a:	f7ff fe8f 	bl	8007c3c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8007f1e:	2306      	movs	r3, #6
 8007f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8007f24:	2300      	movs	r3, #0
 8007f26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8007f36:	2301      	movs	r3, #1
 8007f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 8007f3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4865      	ldr	r0, [pc, #404]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007f44:	f7fa fc1c 	bl	8002780 <HAL_DMAEx_ConfigMuxSync>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <HAL_SAI_MspInit+0x162>
    {
      Error_Handler();
 8007f4e:	f7ff fe75 	bl	8007c3c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a60      	ldr	r2, [pc, #384]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007f5a:	4a5f      	ldr	r2, [pc, #380]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a5d      	ldr	r2, [pc, #372]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007f68:	4a5b      	ldr	r2, [pc, #364]	; (80080d8 <HAL_SAI_MspInit+0x2e8>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a5b      	ldr	r2, [pc, #364]	; (80080e0 <HAL_SAI_MspInit+0x2f0>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	f040 80a0 	bne.w	80080ba <HAL_SAI_MspInit+0x2ca>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8007f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f86:	f107 0310 	add.w	r3, r7, #16
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fc fe2c 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8007f96:	f7ff fe51 	bl	8007c3c <Error_Handler>
    }

    if (SAI4_client == 0)
 8007f9a:	4b52      	ldr	r3, [pc, #328]	; (80080e4 <HAL_SAI_MspInit+0x2f4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10e      	bne.n	8007fc0 <HAL_SAI_MspInit+0x1d0>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8007fa2:	4b4a      	ldr	r3, [pc, #296]	; (80080cc <HAL_SAI_MspInit+0x2dc>)
 8007fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fa8:	4a48      	ldr	r2, [pc, #288]	; (80080cc <HAL_SAI_MspInit+0x2dc>)
 8007faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007fb2:	4b46      	ldr	r3, [pc, #280]	; (80080cc <HAL_SAI_MspInit+0x2dc>)
 8007fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fbc:	60bb      	str	r3, [r7, #8]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8007fc0:	4b48      	ldr	r3, [pc, #288]	; (80080e4 <HAL_SAI_MspInit+0x2f4>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	4a47      	ldr	r2, [pc, #284]	; (80080e4 <HAL_SAI_MspInit+0x2f4>)
 8007fc8:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007fca:	2330      	movs	r3, #48	; 0x30
 8007fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8007fe2:	230a      	movs	r3, #10
 8007fe4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007fe8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007fec:	4619      	mov	r1, r3
 8007fee:	4838      	ldr	r0, [pc, #224]	; (80080d0 <HAL_SAI_MspInit+0x2e0>)
 8007ff0:	f7fa fcde 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007ff4:	2340      	movs	r3, #64	; 0x40
 8007ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008000:	2300      	movs	r3, #0
 8008002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008006:	2300      	movs	r3, #0
 8008008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 800800c:	2301      	movs	r3, #1
 800800e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008012:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008016:	4619      	mov	r1, r3
 8008018:	4833      	ldr	r0, [pc, #204]	; (80080e8 <HAL_SAI_MspInit+0x2f8>)
 800801a:	f7fa fcc9 	bl	80029b0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel1;
 800801e:	4b33      	ldr	r3, [pc, #204]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 8008020:	4a33      	ldr	r2, [pc, #204]	; (80080f0 <HAL_SAI_MspInit+0x300>)
 8008022:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8008024:	4b31      	ldr	r3, [pc, #196]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 8008026:	220f      	movs	r2, #15
 8008028:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800802a:	4b30      	ldr	r3, [pc, #192]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 800802c:	2200      	movs	r2, #0
 800802e:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008030:	4b2e      	ldr	r3, [pc, #184]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 8008032:	2200      	movs	r2, #0
 8008034:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8008036:	4b2d      	ldr	r3, [pc, #180]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 8008038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800803c:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800803e:	4b2b      	ldr	r3, [pc, #172]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 8008040:	2200      	movs	r2, #0
 8008042:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008044:	4b29      	ldr	r3, [pc, #164]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 8008046:	2200      	movs	r2, #0
 8008048:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800804a:	4b28      	ldr	r3, [pc, #160]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 800804c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008050:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008052:	4b26      	ldr	r3, [pc, #152]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 8008054:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008058:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800805a:	4824      	ldr	r0, [pc, #144]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 800805c:	f7f8 fc7e 	bl	800095c <HAL_DMA_Init>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <HAL_SAI_MspInit+0x27a>
    {
      Error_Handler();
 8008066:	f7ff fde9 	bl	8007c3c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800806a:	230e      	movs	r3, #14
 800806c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8008070:	2300      	movs	r3, #0
 8008072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8008076:	2300      	movs	r3, #0
 8008078:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800807c:	2301      	movs	r3, #1
 800807e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8008082:	2301      	movs	r3, #1
 8008084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8008088:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800808c:	4619      	mov	r1, r3
 800808e:	4817      	ldr	r0, [pc, #92]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 8008090:	f7fa fb76 	bl	8002780 <HAL_DMAEx_ConfigMuxSync>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <HAL_SAI_MspInit+0x2ae>
    {
      Error_Handler();
 800809a:	f7ff fdcf 	bl	8007c3c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a12      	ldr	r2, [pc, #72]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 80080a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80080a6:	4a11      	ldr	r2, [pc, #68]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a0f      	ldr	r2, [pc, #60]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 80080b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80080b4:	4a0d      	ldr	r2, [pc, #52]	; (80080ec <HAL_SAI_MspInit+0x2fc>)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80080ba:	bf00      	nop
 80080bc:	37e8      	adds	r7, #232	; 0xe8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	40015824 	.word	0x40015824
 80080c8:	24000c9c 	.word	0x24000c9c
 80080cc:	58024400 	.word	0x58024400
 80080d0:	58021000 	.word	0x58021000
 80080d4:	58021400 	.word	0x58021400
 80080d8:	24000fa0 	.word	0x24000fa0
 80080dc:	40020028 	.word	0x40020028
 80080e0:	58005404 	.word	0x58005404
 80080e4:	24000ca0 	.word	0x24000ca0
 80080e8:	58020c00 	.word	0x58020c00
 80080ec:	24000ee0 	.word	0x24000ee0
 80080f0:	5802541c 	.word	0x5802541c

080080f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80080f8:	e7fe      	b.n	80080f8 <NMI_Handler+0x4>

080080fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080fa:	b480      	push	{r7}
 80080fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080fe:	e7fe      	b.n	80080fe <HardFault_Handler+0x4>

08008100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008104:	e7fe      	b.n	8008104 <MemManage_Handler+0x4>

08008106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008106:	b480      	push	{r7}
 8008108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800810a:	e7fe      	b.n	800810a <BusFault_Handler+0x4>

0800810c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008110:	e7fe      	b.n	8008110 <UsageFault_Handler+0x4>

08008112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008112:	b480      	push	{r7}
 8008114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008116:	bf00      	nop
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008124:	bf00      	nop
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800812e:	b480      	push	{r7}
 8008130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008132:	bf00      	nop
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008140:	f7f8 f9f2 	bl	8000528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008144:	bf00      	nop
 8008146:	bd80      	pop	{r7, pc}

08008148 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	BSP_LED_On(LED1);
 800814c:	2000      	movs	r0, #0
 800814e:	f7f8 f93d 	bl	80003cc <BSP_LED_On>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008152:	2001      	movs	r0, #1
 8008154:	f7fa fded 	bl	8002d32 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8008158:	bf00      	nop
 800815a:	bd80      	pop	{r7, pc}

0800815c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008160:	4802      	ldr	r0, [pc, #8]	; (800816c <DMA1_Stream1_IRQHandler+0x10>)
 8008162:	f7f9 f999 	bl	8001498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008166:	bf00      	nop
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	24000fa0 	.word	0x24000fa0

08008170 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8008174:	4803      	ldr	r0, [pc, #12]	; (8008184 <DMA2_Stream0_IRQHandler+0x14>)
 8008176:	f7f9 f98f 	bl	8001498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  BSP_LED_On(LED1);
 800817a:	2000      	movs	r0, #0
 800817c:	f7f8 f926 	bl	80003cc <BSP_LED_On>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008180:	bf00      	nop
 8008182:	bd80      	pop	{r7, pc}
 8008184:	24000d04 	.word	0x24000d04

08008188 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800818c:	4802      	ldr	r0, [pc, #8]	; (8008198 <I2C4_ER_IRQHandler+0x10>)
 800818e:	f7fa fe85 	bl	8002e9c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8008192:	bf00      	nop
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	24000ca8 	.word	0x24000ca8

0800819c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 80081a0:	4802      	ldr	r0, [pc, #8]	; (80081ac <DMAMUX1_OVR_IRQHandler+0x10>)
 80081a2:	f7fa fbb3 	bl	800290c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80081a6:	bf00      	nop
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	24000fa0 	.word	0x24000fa0

080081b0 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 80081b4:	4802      	ldr	r0, [pc, #8]	; (80081c0 <DMAMUX2_OVR_IRQHandler+0x10>)
 80081b6:	f7fa fba9 	bl	800290c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */
  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 80081ba:	bf00      	nop
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	24000ee0 	.word	0x24000ee0

080081c4 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 80081c8:	4803      	ldr	r0, [pc, #12]	; (80081d8 <BDMA_Channel1_IRQHandler+0x14>)
 80081ca:	f7f9 f965 	bl	8001498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */
  BSP_LED_On(LED2);
 80081ce:	2001      	movs	r0, #1
 80081d0:	f7f8 f8fc 	bl	80003cc <BSP_LED_On>
  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 80081d4:	bf00      	nop
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	24000ee0 	.word	0x24000ee0

080081dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80081e0:	4b32      	ldr	r3, [pc, #200]	; (80082ac <SystemInit+0xd0>)
 80081e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e6:	4a31      	ldr	r2, [pc, #196]	; (80082ac <SystemInit+0xd0>)
 80081e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80081f0:	4b2f      	ldr	r3, [pc, #188]	; (80082b0 <SystemInit+0xd4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	2b06      	cmp	r3, #6
 80081fa:	d807      	bhi.n	800820c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80081fc:	4b2c      	ldr	r3, [pc, #176]	; (80082b0 <SystemInit+0xd4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f023 030f 	bic.w	r3, r3, #15
 8008204:	4a2a      	ldr	r2, [pc, #168]	; (80082b0 <SystemInit+0xd4>)
 8008206:	f043 0307 	orr.w	r3, r3, #7
 800820a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800820c:	4b29      	ldr	r3, [pc, #164]	; (80082b4 <SystemInit+0xd8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a28      	ldr	r2, [pc, #160]	; (80082b4 <SystemInit+0xd8>)
 8008212:	f043 0301 	orr.w	r3, r3, #1
 8008216:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008218:	4b26      	ldr	r3, [pc, #152]	; (80082b4 <SystemInit+0xd8>)
 800821a:	2200      	movs	r2, #0
 800821c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800821e:	4b25      	ldr	r3, [pc, #148]	; (80082b4 <SystemInit+0xd8>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4924      	ldr	r1, [pc, #144]	; (80082b4 <SystemInit+0xd8>)
 8008224:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <SystemInit+0xdc>)
 8008226:	4013      	ands	r3, r2
 8008228:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800822a:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <SystemInit+0xd4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0308 	and.w	r3, r3, #8
 8008232:	2b00      	cmp	r3, #0
 8008234:	d007      	beq.n	8008246 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008236:	4b1e      	ldr	r3, [pc, #120]	; (80082b0 <SystemInit+0xd4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f023 030f 	bic.w	r3, r3, #15
 800823e:	4a1c      	ldr	r2, [pc, #112]	; (80082b0 <SystemInit+0xd4>)
 8008240:	f043 0307 	orr.w	r3, r3, #7
 8008244:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008246:	4b1b      	ldr	r3, [pc, #108]	; (80082b4 <SystemInit+0xd8>)
 8008248:	2200      	movs	r2, #0
 800824a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800824c:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <SystemInit+0xd8>)
 800824e:	2200      	movs	r2, #0
 8008250:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008252:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <SystemInit+0xd8>)
 8008254:	2200      	movs	r2, #0
 8008256:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <SystemInit+0xd8>)
 800825a:	4a18      	ldr	r2, [pc, #96]	; (80082bc <SystemInit+0xe0>)
 800825c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800825e:	4b15      	ldr	r3, [pc, #84]	; (80082b4 <SystemInit+0xd8>)
 8008260:	4a17      	ldr	r2, [pc, #92]	; (80082c0 <SystemInit+0xe4>)
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008264:	4b13      	ldr	r3, [pc, #76]	; (80082b4 <SystemInit+0xd8>)
 8008266:	4a17      	ldr	r2, [pc, #92]	; (80082c4 <SystemInit+0xe8>)
 8008268:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800826a:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <SystemInit+0xd8>)
 800826c:	2200      	movs	r2, #0
 800826e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008270:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <SystemInit+0xd8>)
 8008272:	4a14      	ldr	r2, [pc, #80]	; (80082c4 <SystemInit+0xe8>)
 8008274:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <SystemInit+0xd8>)
 8008278:	2200      	movs	r2, #0
 800827a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800827c:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <SystemInit+0xd8>)
 800827e:	4a11      	ldr	r2, [pc, #68]	; (80082c4 <SystemInit+0xe8>)
 8008280:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008282:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <SystemInit+0xd8>)
 8008284:	2200      	movs	r2, #0
 8008286:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008288:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <SystemInit+0xd8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a09      	ldr	r2, [pc, #36]	; (80082b4 <SystemInit+0xd8>)
 800828e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008292:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008294:	4b07      	ldr	r3, [pc, #28]	; (80082b4 <SystemInit+0xd8>)
 8008296:	2200      	movs	r2, #0
 8008298:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <SystemInit+0xec>)
 800829c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80082a0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80082a2:	bf00      	nop
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	e000ed00 	.word	0xe000ed00
 80082b0:	52002000 	.word	0x52002000
 80082b4:	58024400 	.word	0x58024400
 80082b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80082bc:	02020200 	.word	0x02020200
 80082c0:	01ff0000 	.word	0x01ff0000
 80082c4:	01010280 	.word	0x01010280
 80082c8:	52004000 	.word	0x52004000

080082cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80082cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008304 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80082d0:	f7ff ff84 	bl	80081dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80082d4:	480c      	ldr	r0, [pc, #48]	; (8008308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80082d6:	490d      	ldr	r1, [pc, #52]	; (800830c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80082d8:	4a0d      	ldr	r2, [pc, #52]	; (8008310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80082da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80082dc:	e002      	b.n	80082e4 <LoopCopyDataInit>

080082de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80082de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80082e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80082e2:	3304      	adds	r3, #4

080082e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80082e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80082e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082e8:	d3f9      	bcc.n	80082de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082ea:	4a0a      	ldr	r2, [pc, #40]	; (8008314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80082ec:	4c0a      	ldr	r4, [pc, #40]	; (8008318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80082ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082f0:	e001      	b.n	80082f6 <LoopFillZerobss>

080082f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80082f4:	3204      	adds	r2, #4

080082f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80082f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80082f8:	d3fb      	bcc.n	80082f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80082fa:	f001 fec3 	bl	800a084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80082fe:	f7ff f9bb 	bl	8007678 <main>
  bx  lr
 8008302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008304:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008308:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800830c:	2400047c 	.word	0x2400047c
  ldr r2, =_sidata
 8008310:	0800a750 	.word	0x0800a750
  ldr r2, =_sbss
 8008314:	2400047c 	.word	0x2400047c
  ldr r4, =_ebss
 8008318:	24001094 	.word	0x24001094

0800831c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800831c:	e7fe      	b.n	800831c <ADC3_IRQHandler>
	...

08008320 <D16_GENERIC>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	b089      	sub	sp, #36	; 0x24
 8008326:	6993      	ldr	r3, [r2, #24]
 8008328:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800832a:	9103      	str	r1, [sp, #12]
 800832c:	9307      	str	r3, [sp, #28]
 800832e:	69d3      	ldr	r3, [r2, #28]
 8008330:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8008334:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008338:	9106      	str	r1, [sp, #24]
 800833a:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 800833e:	2d00      	cmp	r5, #0
 8008340:	d063      	beq.n	800840a <D16_GENERIC+0xea>
 8008342:	f001 0520 	and.w	r5, r1, #32
 8008346:	f001 0110 	and.w	r1, r1, #16
 800834a:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 800842c <D16_GENERIC+0x10c>
 800834e:	46c1      	mov	r9, r8
 8008350:	9104      	str	r1, [sp, #16]
 8008352:	2100      	movs	r1, #0
 8008354:	9505      	str	r5, [sp, #20]
 8008356:	e04d      	b.n	80083f4 <D16_GENERIC+0xd4>
 8008358:	5d87      	ldrb	r7, [r0, r6]
 800835a:	7805      	ldrb	r5, [r0, #0]
 800835c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8008360:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8008364:	b2fe      	uxtb	r6, r7
 8008366:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800836a:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800836e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8008372:	441d      	add	r5, r3
 8008374:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8008378:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800837c:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8008380:	0a9b      	lsrs	r3, r3, #10
 8008382:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8008386:	4d27      	ldr	r5, [pc, #156]	; (8008424 <D16_GENERIC+0x104>)
 8008388:	fb26 c505 	smlad	r5, r6, r5, ip
 800838c:	4f26      	ldr	r7, [pc, #152]	; (8008428 <D16_GENERIC+0x108>)
 800838e:	fb26 fc07 	smuad	ip, r6, r7
 8008392:	9e04      	ldr	r6, [sp, #16]
 8008394:	f101 0801 	add.w	r8, r1, #1
 8008398:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800839c:	b1ae      	cbz	r6, 80083ca <D16_GENERIC+0xaa>
 800839e:	442c      	add	r4, r5
 80083a0:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80083a4:	eba4 040a 	sub.w	r4, r4, sl
 80083a8:	46aa      	mov	sl, r5
 80083aa:	17e7      	asrs	r7, r4, #31
 80083ac:	fba4 450b 	umull	r4, r5, r4, fp
 80083b0:	e9cd 4500 	strd	r4, r5, [sp]
 80083b4:	fb0b 5407 	mla	r4, fp, r7, r5
 80083b8:	9401      	str	r4, [sp, #4]
 80083ba:	e9dd 4500 	ldrd	r4, r5, [sp]
 80083be:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80083c2:	f145 0500 	adc.w	r5, r5, #0
 80083c6:	006c      	lsls	r4, r5, #1
 80083c8:	4625      	mov	r5, r4
 80083ca:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80083ce:	042d      	lsls	r5, r5, #16
 80083d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80083d4:	2700      	movs	r7, #0
 80083d6:	fb01 fb0b 	mul.w	fp, r1, fp
 80083da:	fa1f f188 	uxth.w	r1, r8
 80083de:	fbc9 6705 	smlal	r6, r7, r9, r5
 80083e2:	9e03      	ldr	r6, [sp, #12]
 80083e4:	10bd      	asrs	r5, r7, #2
 80083e6:	f305 050f 	ssat	r5, #16, r5
 80083ea:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80083ee:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80083f0:	428d      	cmp	r5, r1
 80083f2:	d90a      	bls.n	800840a <D16_GENERIC+0xea>
 80083f4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80083f6:	2d01      	cmp	r5, #1
 80083f8:	b2ee      	uxtb	r6, r5
 80083fa:	d1ad      	bne.n	8008358 <D16_GENERIC+0x38>
 80083fc:	9d05      	ldr	r5, [sp, #20]
 80083fe:	f850 7b02 	ldr.w	r7, [r0], #2
 8008402:	2d00      	cmp	r5, #0
 8008404:	d0ae      	beq.n	8008364 <D16_GENERIC+0x44>
 8008406:	ba7f      	rev16	r7, r7
 8008408:	e7ac      	b.n	8008364 <D16_GENERIC+0x44>
 800840a:	2000      	movs	r0, #0
 800840c:	9906      	ldr	r1, [sp, #24]
 800840e:	61d3      	str	r3, [r2, #28]
 8008410:	9b07      	ldr	r3, [sp, #28]
 8008412:	f8c2 c008 	str.w	ip, [r2, #8]
 8008416:	60d1      	str	r1, [r2, #12]
 8008418:	6193      	str	r3, [r2, #24]
 800841a:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800841e:	b009      	add	sp, #36	; 0x24
 8008420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008424:	00030001 	.word	0x00030001
 8008428:	00010003 	.word	0x00010003
 800842c:	24000000 	.word	0x24000000

08008430 <D24_GENERIC>:
 8008430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8008438:	b089      	sub	sp, #36	; 0x24
 800843a:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800843c:	9303      	str	r3, [sp, #12]
 800843e:	6993      	ldr	r3, [r2, #24]
 8008440:	9104      	str	r1, [sp, #16]
 8008442:	9307      	str	r3, [sp, #28]
 8008444:	69d1      	ldr	r1, [r2, #28]
 8008446:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800844a:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 800844e:	2e00      	cmp	r6, #0
 8008450:	f000 8088 	beq.w	8008564 <D24_GENERIC+0x134>
 8008454:	f005 0620 	and.w	r6, r5, #32
 8008458:	f005 0510 	and.w	r5, r5, #16
 800845c:	f04f 0c00 	mov.w	ip, #0
 8008460:	f8df e140 	ldr.w	lr, [pc, #320]	; 80085a4 <D24_GENERIC+0x174>
 8008464:	9606      	str	r6, [sp, #24]
 8008466:	9505      	str	r5, [sp, #20]
 8008468:	e064      	b.n	8008534 <D24_GENERIC+0x104>
 800846a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800846e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8008472:	f810 b007 	ldrb.w	fp, [r0, r7]
 8008476:	042d      	lsls	r5, r5, #16
 8008478:	19f0      	adds	r0, r6, r7
 800847a:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800847e:	44a9      	add	r9, r5
 8008480:	fa5f f689 	uxtb.w	r6, r9
 8008484:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8008488:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800848c:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8008490:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8008494:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8008498:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 800849c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80084a0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80084a4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80084a8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80084ac:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80084b0:	4d3a      	ldr	r5, [pc, #232]	; (800859c <D24_GENERIC+0x16c>)
 80084b2:	fb26 8705 	smlad	r7, r6, r5, r8
 80084b6:	4d3a      	ldr	r5, [pc, #232]	; (80085a0 <D24_GENERIC+0x170>)
 80084b8:	fb26 3805 	smlad	r8, r6, r5, r3
 80084bc:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80084c0:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 80084c4:	2301      	movs	r3, #1
 80084c6:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 80084ca:	fb26 f603 	smuad	r6, r6, r3
 80084ce:	eb0c 0903 	add.w	r9, ip, r3
 80084d2:	eb0b 0306 	add.w	r3, fp, r6
 80084d6:	9e05      	ldr	r6, [sp, #20]
 80084d8:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80084dc:	b1ae      	cbz	r6, 800850a <D24_GENERIC+0xda>
 80084de:	442c      	add	r4, r5
 80084e0:	9e03      	ldr	r6, [sp, #12]
 80084e2:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80084e6:	1ba4      	subs	r4, r4, r6
 80084e8:	9503      	str	r5, [sp, #12]
 80084ea:	17e7      	asrs	r7, r4, #31
 80084ec:	fba4 450b 	umull	r4, r5, r4, fp
 80084f0:	e9cd 4500 	strd	r4, r5, [sp]
 80084f4:	fb0b 5407 	mla	r4, fp, r7, r5
 80084f8:	9401      	str	r4, [sp, #4]
 80084fa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80084fe:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8008502:	f145 0500 	adc.w	r5, r5, #0
 8008506:	006c      	lsls	r4, r5, #1
 8008508:	4625      	mov	r5, r4
 800850a:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800850e:	03ad      	lsls	r5, r5, #14
 8008510:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008514:	2700      	movs	r7, #0
 8008516:	fb0c fb0b 	mul.w	fp, ip, fp
 800851a:	fa1f fc89 	uxth.w	ip, r9
 800851e:	fbca 6705 	smlal	r6, r7, sl, r5
 8008522:	9e04      	ldr	r6, [sp, #16]
 8008524:	10bd      	asrs	r5, r7, #2
 8008526:	f305 050f 	ssat	r5, #16, r5
 800852a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800852e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8008530:	4565      	cmp	r5, ip
 8008532:	d917      	bls.n	8008564 <D24_GENERIC+0x134>
 8008534:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8008536:	f890 9000 	ldrb.w	r9, [r0]
 800853a:	b2ef      	uxtb	r7, r5
 800853c:	2d01      	cmp	r5, #1
 800853e:	b23e      	sxth	r6, r7
 8008540:	d193      	bne.n	800846a <D24_GENERIC+0x3a>
 8008542:	9d06      	ldr	r5, [sp, #24]
 8008544:	b1dd      	cbz	r5, 800857e <D24_GENERIC+0x14e>
 8008546:	78c7      	ldrb	r7, [r0, #3]
 8008548:	ea4f 2609 	mov.w	r6, r9, lsl #8
 800854c:	f01c 0f01 	tst.w	ip, #1
 8008550:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8008554:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8008558:	d11a      	bne.n	8008590 <D24_GENERIC+0x160>
 800855a:	f890 9001 	ldrb.w	r9, [r0, #1]
 800855e:	3002      	adds	r0, #2
 8008560:	44b1      	add	r9, r6
 8008562:	e78d      	b.n	8008480 <D24_GENERIC+0x50>
 8008564:	6093      	str	r3, [r2, #8]
 8008566:	2000      	movs	r0, #0
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	f8c2 800c 	str.w	r8, [r2, #12]
 800856e:	6153      	str	r3, [r2, #20]
 8008570:	9b07      	ldr	r3, [sp, #28]
 8008572:	61d1      	str	r1, [r2, #28]
 8008574:	6114      	str	r4, [r2, #16]
 8008576:	6193      	str	r3, [r2, #24]
 8008578:	b009      	add	sp, #36	; 0x24
 800857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857e:	7845      	ldrb	r5, [r0, #1]
 8008580:	3003      	adds	r0, #3
 8008582:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8008586:	022d      	lsls	r5, r5, #8
 8008588:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 800858c:	44a9      	add	r9, r5
 800858e:	e777      	b.n	8008480 <D24_GENERIC+0x50>
 8008590:	7886      	ldrb	r6, [r0, #2]
 8008592:	3004      	adds	r0, #4
 8008594:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8008598:	44a9      	add	r9, r5
 800859a:	e771      	b.n	8008480 <D24_GENERIC+0x50>
 800859c:	00030001 	.word	0x00030001
 80085a0:	00060007 	.word	0x00060007
 80085a4:	24000000 	.word	0x24000000

080085a8 <D32_GENERIC>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80085b0:	b089      	sub	sp, #36	; 0x24
 80085b2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80085b4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80085b6:	9302      	str	r3, [sp, #8]
 80085b8:	6993      	ldr	r3, [r2, #24]
 80085ba:	9104      	str	r1, [sp, #16]
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	9503      	str	r5, [sp, #12]
 80085c0:	69d1      	ldr	r1, [r2, #28]
 80085c2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80085c4:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80085c8:	2e00      	cmp	r6, #0
 80085ca:	f000 8097 	beq.w	80086fc <D32_GENERIC+0x154>
 80085ce:	f005 0620 	and.w	r6, r5, #32
 80085d2:	f005 0510 	and.w	r5, r5, #16
 80085d6:	f04f 0e00 	mov.w	lr, #0
 80085da:	f8df c150 	ldr.w	ip, [pc, #336]	; 800872c <D32_GENERIC+0x184>
 80085de:	9606      	str	r6, [sp, #24]
 80085e0:	9505      	str	r5, [sp, #20]
 80085e2:	e079      	b.n	80086d8 <D32_GENERIC+0x130>
 80085e4:	783d      	ldrb	r5, [r7, #0]
 80085e6:	f810 b009 	ldrb.w	fp, [r0, r9]
 80085ea:	042d      	lsls	r5, r5, #16
 80085ec:	f810 a006 	ldrb.w	sl, [r0, r6]
 80085f0:	f890 9000 	ldrb.w	r9, [r0]
 80085f4:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 80085f8:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 80085fc:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8008600:	44a9      	add	r9, r5
 8008602:	fa5f f789 	uxtb.w	r7, r9
 8008606:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800860a:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800860e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8008612:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8008616:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800861a:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800861e:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8008622:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8008626:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800862a:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800862e:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8008632:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008636:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800863a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800863e:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8008642:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8008646:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800864a:	4d34      	ldr	r5, [pc, #208]	; (800871c <D32_GENERIC+0x174>)
 800864c:	fb29 8805 	smlad	r8, r9, r5, r8
 8008650:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8008654:	fb26 8705 	smlad	r7, r6, r5, r8
 8008658:	4d31      	ldr	r5, [pc, #196]	; (8008720 <D32_GENERIC+0x178>)
 800865a:	fb29 3305 	smlad	r3, r9, r5, r3
 800865e:	4d31      	ldr	r5, [pc, #196]	; (8008724 <D32_GENERIC+0x17c>)
 8008660:	fb26 3805 	smlad	r8, r6, r5, r3
 8008664:	2301      	movs	r3, #1
 8008666:	fb29 f903 	smuad	r9, r9, r3
 800866a:	4b2f      	ldr	r3, [pc, #188]	; (8008728 <D32_GENERIC+0x180>)
 800866c:	fb26 9303 	smlad	r3, r6, r3, r9
 8008670:	9e05      	ldr	r6, [sp, #20]
 8008672:	f10e 0901 	add.w	r9, lr, #1
 8008676:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800867a:	b1ae      	cbz	r6, 80086a8 <D32_GENERIC+0x100>
 800867c:	442c      	add	r4, r5
 800867e:	9e02      	ldr	r6, [sp, #8]
 8008680:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8008684:	1ba4      	subs	r4, r4, r6
 8008686:	9502      	str	r5, [sp, #8]
 8008688:	17e7      	asrs	r7, r4, #31
 800868a:	fba4 450a 	umull	r4, r5, r4, sl
 800868e:	e9cd 4500 	strd	r4, r5, [sp]
 8008692:	fb0a 5407 	mla	r4, sl, r7, r5
 8008696:	9401      	str	r4, [sp, #4]
 8008698:	e9dd 4500 	ldrd	r4, r5, [sp]
 800869c:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80086a0:	f145 0500 	adc.w	r5, r5, #0
 80086a4:	006c      	lsls	r4, r5, #1
 80086a6:	4625      	mov	r5, r4
 80086a8:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 80086ac:	036d      	lsls	r5, r5, #13
 80086ae:	9f03      	ldr	r7, [sp, #12]
 80086b0:	fb0e fb0a 	mul.w	fp, lr, sl
 80086b4:	fa1f fe89 	uxth.w	lr, r9
 80086b8:	f04f 0a00 	mov.w	sl, #0
 80086bc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80086c0:	9e04      	ldr	r6, [sp, #16]
 80086c2:	fbc7 9a05 	smlal	r9, sl, r7, r5
 80086c6:	4657      	mov	r7, sl
 80086c8:	10bd      	asrs	r5, r7, #2
 80086ca:	f305 050f 	ssat	r5, #16, r5
 80086ce:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80086d2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80086d4:	4575      	cmp	r5, lr
 80086d6:	d911      	bls.n	80086fc <D32_GENERIC+0x154>
 80086d8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80086da:	b2ee      	uxtb	r6, r5
 80086dc:	2d01      	cmp	r5, #1
 80086de:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 80086e2:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 80086e6:	f47f af7d 	bne.w	80085e4 <D32_GENERIC+0x3c>
 80086ea:	1d05      	adds	r5, r0, #4
 80086ec:	f8d0 9000 	ldr.w	r9, [r0]
 80086f0:	9806      	ldr	r0, [sp, #24]
 80086f2:	b180      	cbz	r0, 8008716 <D32_GENERIC+0x16e>
 80086f4:	fa99 f999 	rev16.w	r9, r9
 80086f8:	4628      	mov	r0, r5
 80086fa:	e782      	b.n	8008602 <D32_GENERIC+0x5a>
 80086fc:	6093      	str	r3, [r2, #8]
 80086fe:	2000      	movs	r0, #0
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	f8c2 800c 	str.w	r8, [r2, #12]
 8008706:	6153      	str	r3, [r2, #20]
 8008708:	9b07      	ldr	r3, [sp, #28]
 800870a:	61d1      	str	r1, [r2, #28]
 800870c:	6114      	str	r4, [r2, #16]
 800870e:	6193      	str	r3, [r2, #24]
 8008710:	b009      	add	sp, #36	; 0x24
 8008712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008716:	4628      	mov	r0, r5
 8008718:	e773      	b.n	8008602 <D32_GENERIC+0x5a>
 800871a:	bf00      	nop
 800871c:	00060003 	.word	0x00060003
 8008720:	000a000c 	.word	0x000a000c
 8008724:	000c000a 	.word	0x000c000a
 8008728:	00030006 	.word	0x00030006
 800872c:	24000000 	.word	0x24000000

08008730 <D48_GENERIC>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	6913      	ldr	r3, [r2, #16]
 8008736:	b089      	sub	sp, #36	; 0x24
 8008738:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	6953      	ldr	r3, [r2, #20]
 800873e:	9104      	str	r1, [sp, #16]
 8008740:	9302      	str	r3, [sp, #8]
 8008742:	6993      	ldr	r3, [r2, #24]
 8008744:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008748:	9307      	str	r3, [sp, #28]
 800874a:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 800874e:	9100      	str	r1, [sp, #0]
 8008750:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008752:	9103      	str	r1, [sp, #12]
 8008754:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008756:	2c00      	cmp	r4, #0
 8008758:	f000 80be 	beq.w	80088d8 <D48_GENERIC+0x1a8>
 800875c:	f001 0420 	and.w	r4, r1, #32
 8008760:	f001 0110 	and.w	r1, r1, #16
 8008764:	f04f 0e00 	mov.w	lr, #0
 8008768:	9105      	str	r1, [sp, #20]
 800876a:	9406      	str	r4, [sp, #24]
 800876c:	4962      	ldr	r1, [pc, #392]	; (80088f8 <D48_GENERIC+0x1c8>)
 800876e:	e0a0      	b.n	80088b2 <D48_GENERIC+0x182>
 8008770:	eb00 0608 	add.w	r6, r0, r8
 8008774:	f810 a008 	ldrb.w	sl, [r0, r8]
 8008778:	f810 9005 	ldrb.w	r9, [r0, r5]
 800877c:	5df4      	ldrb	r4, [r6, r7]
 800877e:	443e      	add	r6, r7
 8008780:	f890 b000 	ldrb.w	fp, [r0]
 8008784:	0420      	lsls	r0, r4, #16
 8008786:	eb06 0408 	add.w	r4, r6, r8
 800878a:	f816 6008 	ldrb.w	r6, [r6, r8]
 800878e:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8008792:	f814 8007 	ldrb.w	r8, [r4, r7]
 8008796:	4427      	add	r7, r4
 8008798:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800879c:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 80087a0:	eb0a 040b 	add.w	r4, sl, fp
 80087a4:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 80087a8:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80087ac:	b2f7      	uxtb	r7, r6
 80087ae:	b2e6      	uxtb	r6, r4
 80087b0:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80087b4:	f3c4 4907 	ubfx	r9, r4, #16, #8
 80087b8:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 80087bc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80087c0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 80087c4:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 80087c8:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 80087cc:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 80087d0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80087d4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80087d8:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 80087dc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80087e0:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80087e4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80087e8:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80087ec:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80087f0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80087f4:	9d00      	ldr	r5, [sp, #0]
 80087f6:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80087fa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80087fe:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8008802:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008806:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 800880a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800880e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8008812:	4c3a      	ldr	r4, [pc, #232]	; (80088fc <D48_GENERIC+0x1cc>)
 8008814:	fb26 5a04 	smlad	sl, r6, r4, r5
 8008818:	4c39      	ldr	r4, [pc, #228]	; (8008900 <D48_GENERIC+0x1d0>)
 800881a:	fb29 aa04 	smlad	sl, r9, r4, sl
 800881e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8008822:	fb27 aa04 	smlad	sl, r7, r4, sl
 8008826:	4c37      	ldr	r4, [pc, #220]	; (8008904 <D48_GENERIC+0x1d4>)
 8008828:	fb26 3304 	smlad	r3, r6, r4, r3
 800882c:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8008830:	fb29 3304 	smlad	r3, r9, r4, r3
 8008834:	4c34      	ldr	r4, [pc, #208]	; (8008908 <D48_GENERIC+0x1d8>)
 8008836:	fb27 3304 	smlad	r3, r7, r4, r3
 800883a:	2501      	movs	r5, #1
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	fb26 f605 	smuad	r6, r6, r5
 8008842:	4b32      	ldr	r3, [pc, #200]	; (800890c <D48_GENERIC+0x1dc>)
 8008844:	fb29 6903 	smlad	r9, r9, r3, r6
 8008848:	4b31      	ldr	r3, [pc, #196]	; (8008910 <D48_GENERIC+0x1e0>)
 800884a:	fb27 9303 	smlad	r3, r7, r3, r9
 800884e:	9c05      	ldr	r4, [sp, #20]
 8008850:	eb0e 0805 	add.w	r8, lr, r5
 8008854:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8008858:	b19c      	cbz	r4, 8008882 <D48_GENERIC+0x152>
 800885a:	9c01      	ldr	r4, [sp, #4]
 800885c:	9d02      	ldr	r5, [sp, #8]
 800885e:	4454      	add	r4, sl
 8008860:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8008864:	f8cd a008 	str.w	sl, [sp, #8]
 8008868:	1b64      	subs	r4, r4, r5
 800886a:	fba4 ab09 	umull	sl, fp, r4, r9
 800886e:	17e7      	asrs	r7, r4, #31
 8008870:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8008874:	fb09 bb07 	mla	fp, r9, r7, fp
 8008878:	f14b 0500 	adc.w	r5, fp, #0
 800887c:	006c      	lsls	r4, r5, #1
 800887e:	46a2      	mov	sl, r4
 8008880:	9401      	str	r4, [sp, #4]
 8008882:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8008884:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8008888:	9d03      	ldr	r5, [sp, #12]
 800888a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800888e:	fb0e f606 	mul.w	r6, lr, r6
 8008892:	fa1f fe88 	uxth.w	lr, r8
 8008896:	f04f 0800 	mov.w	r8, #0
 800889a:	fbc5 780a 	smlal	r7, r8, r5, sl
 800889e:	4645      	mov	r5, r8
 80088a0:	10ac      	asrs	r4, r5, #2
 80088a2:	9d04      	ldr	r5, [sp, #16]
 80088a4:	f304 040f 	ssat	r4, #16, r4
 80088a8:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 80088ac:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80088ae:	4574      	cmp	r4, lr
 80088b0:	d912      	bls.n	80088d8 <D48_GENERIC+0x1a8>
 80088b2:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80088b4:	b2e5      	uxtb	r5, r4
 80088b6:	2c01      	cmp	r4, #1
 80088b8:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80088bc:	f1c5 0700 	rsb	r7, r5, #0
 80088c0:	f47f af56 	bne.w	8008770 <D48_GENERIC+0x40>
 80088c4:	9d06      	ldr	r5, [sp, #24]
 80088c6:	e9d0 4600 	ldrd	r4, r6, [r0]
 80088ca:	3006      	adds	r0, #6
 80088cc:	2d00      	cmp	r5, #0
 80088ce:	f43f af6b 	beq.w	80087a8 <D48_GENERIC+0x78>
 80088d2:	ba64      	rev16	r4, r4
 80088d4:	ba76      	rev16	r6, r6
 80088d6:	e767      	b.n	80087a8 <D48_GENERIC+0x78>
 80088d8:	6093      	str	r3, [r2, #8]
 80088da:	2000      	movs	r0, #0
 80088dc:	9b00      	ldr	r3, [sp, #0]
 80088de:	f8c2 c01c 	str.w	ip, [r2, #28]
 80088e2:	60d3      	str	r3, [r2, #12]
 80088e4:	9b01      	ldr	r3, [sp, #4]
 80088e6:	6113      	str	r3, [r2, #16]
 80088e8:	9b02      	ldr	r3, [sp, #8]
 80088ea:	6153      	str	r3, [r2, #20]
 80088ec:	9b07      	ldr	r3, [sp, #28]
 80088ee:	6193      	str	r3, [r2, #24]
 80088f0:	b009      	add	sp, #36	; 0x24
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f6:	bf00      	nop
 80088f8:	24000000 	.word	0x24000000
 80088fc:	000f000a 	.word	0x000f000a
 8008900:	00060003 	.word	0x00060003
 8008904:	00150019 	.word	0x00150019
 8008908:	00190015 	.word	0x00190015
 800890c:	00030006 	.word	0x00030006
 8008910:	000a000f 	.word	0x000a000f

08008914 <D64_GENERIC>:
 8008914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008918:	6913      	ldr	r3, [r2, #16]
 800891a:	b089      	sub	sp, #36	; 0x24
 800891c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	6953      	ldr	r3, [r2, #20]
 8008922:	9105      	str	r1, [sp, #20]
 8008924:	9303      	str	r3, [sp, #12]
 8008926:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8008928:	6993      	ldr	r3, [r2, #24]
 800892a:	69d4      	ldr	r4, [r2, #28]
 800892c:	9307      	str	r3, [sp, #28]
 800892e:	9504      	str	r5, [sp, #16]
 8008930:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8008934:	2900      	cmp	r1, #0
 8008936:	f000 80e8 	beq.w	8008b0a <D64_GENERIC+0x1f6>
 800893a:	6a11      	ldr	r1, [r2, #32]
 800893c:	2500      	movs	r5, #0
 800893e:	46b3      	mov	fp, r6
 8008940:	9302      	str	r3, [sp, #8]
 8008942:	9106      	str	r1, [sp, #24]
 8008944:	4978      	ldr	r1, [pc, #480]	; (8008b28 <D64_GENERIC+0x214>)
 8008946:	e0cc      	b.n	8008ae2 <D64_GENERIC+0x1ce>
 8008948:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 800894c:	f1ce 0c00 	rsb	ip, lr, #0
 8008950:	f890 9000 	ldrb.w	r9, [r0]
 8008954:	eb00 0708 	add.w	r7, r0, r8
 8008958:	f810 6008 	ldrb.w	r6, [r0, r8]
 800895c:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8008960:	f817 000c 	ldrb.w	r0, [r7, ip]
 8008964:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8008968:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800896c:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8008970:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8008974:	f817 000c 	ldrb.w	r0, [r7, ip]
 8008978:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800897c:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8008980:	0400      	lsls	r0, r0, #16
 8008982:	4467      	add	r7, ip
 8008984:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8008988:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800898c:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8008990:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8008994:	444e      	add	r6, r9
 8008996:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800899a:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 800899e:	44c2      	add	sl, r8
 80089a0:	b2f7      	uxtb	r7, r6
 80089a2:	f3c6 2807 	ubfx	r8, r6, #8, #8
 80089a6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80089aa:	0e36      	lsrs	r6, r6, #24
 80089ac:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80089b0:	fa5f fc8a 	uxtb.w	ip, sl
 80089b4:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80089b8:	f3ca 2907 	ubfx	r9, sl, #8, #8
 80089bc:	443c      	add	r4, r7
 80089be:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 80089c2:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80089c6:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 80089ca:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 80089ce:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80089d2:	4b56      	ldr	r3, [pc, #344]	; (8008b2c <D64_GENERIC+0x218>)
 80089d4:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 80089d8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80089dc:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 80089e0:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 80089e4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80089e8:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 80089ec:	f3ca 4407 	ubfx	r4, sl, #16, #8
 80089f0:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80089f4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80089f8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80089fc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008a00:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8008a04:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008a08:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8008a0c:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8008a10:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8008a14:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008a18:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8008a1c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008a20:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8008a24:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8008a28:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8008a2c:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8008a30:	fb28 b903 	smlad	r9, r8, r3, fp
 8008a34:	4b3e      	ldr	r3, [pc, #248]	; (8008b30 <D64_GENERIC+0x21c>)
 8008a36:	fb26 9903 	smlad	r9, r6, r3, r9
 8008a3a:	4b3e      	ldr	r3, [pc, #248]	; (8008b34 <D64_GENERIC+0x220>)
 8008a3c:	fb2c 9703 	smlad	r7, ip, r3, r9
 8008a40:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8008a44:	fb2a 7909 	smlad	r9, sl, r9, r7
 8008a48:	4f3b      	ldr	r7, [pc, #236]	; (8008b38 <D64_GENERIC+0x224>)
 8008a4a:	9b02      	ldr	r3, [sp, #8]
 8008a4c:	fb28 3307 	smlad	r3, r8, r7, r3
 8008a50:	fb2a 3317 	smladx	r3, sl, r7, r3
 8008a54:	4f39      	ldr	r7, [pc, #228]	; (8008b3c <D64_GENERIC+0x228>)
 8008a56:	fb26 3307 	smlad	r3, r6, r7, r3
 8008a5a:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8008a5e:	f04f 0e01 	mov.w	lr, #1
 8008a62:	fb28 f80e 	smuad	r8, r8, lr
 8008a66:	4b36      	ldr	r3, [pc, #216]	; (8008b40 <D64_GENERIC+0x22c>)
 8008a68:	fb26 8603 	smlad	r6, r6, r3, r8
 8008a6c:	4b35      	ldr	r3, [pc, #212]	; (8008b44 <D64_GENERIC+0x230>)
 8008a6e:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8008a72:	4b35      	ldr	r3, [pc, #212]	; (8008b48 <D64_GENERIC+0x234>)
 8008a74:	fb2a c303 	smlad	r3, sl, r3, ip
 8008a78:	9f06      	ldr	r7, [sp, #24]
 8008a7a:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8008a7e:	9302      	str	r3, [sp, #8]
 8008a80:	b1cf      	cbz	r7, 8008ab6 <D64_GENERIC+0x1a2>
 8008a82:	9b00      	ldr	r3, [sp, #0]
 8008a84:	444b      	add	r3, r9
 8008a86:	461e      	mov	r6, r3
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a8e:	1af6      	subs	r6, r6, r3
 8008a90:	46b0      	mov	r8, r6
 8008a92:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8008a96:	e9cd 8900 	strd	r8, r9, [sp]
 8008a9a:	fba6 8907 	umull	r8, r9, r6, r7
 8008a9e:	9e01      	ldr	r6, [sp, #4]
 8008aa0:	fb07 9306 	mla	r3, r7, r6, r9
 8008aa4:	4646      	mov	r6, r8
 8008aa6:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8008aaa:	f143 0700 	adc.w	r7, r3, #0
 8008aae:	fa07 f30e 	lsl.w	r3, r7, lr
 8008ab2:	4699      	mov	r9, r3
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8008aba:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8008abe:	9b04      	ldr	r3, [sp, #16]
 8008ac0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008ac4:	2700      	movs	r7, #0
 8008ac6:	fb05 fc0c 	mul.w	ip, r5, ip
 8008aca:	3501      	adds	r5, #1
 8008acc:	fbc3 6709 	smlal	r6, r7, r3, r9
 8008ad0:	9b05      	ldr	r3, [sp, #20]
 8008ad2:	10be      	asrs	r6, r7, #2
 8008ad4:	f306 060f 	ssat	r6, #16, r6
 8008ad8:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8008adc:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8008ade:	42ae      	cmp	r6, r5
 8008ae0:	dd11      	ble.n	8008b06 <D64_GENERIC+0x1f2>
 8008ae2:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8008ae6:	f1be 0f01 	cmp.w	lr, #1
 8008aea:	f47f af2d 	bne.w	8008948 <D64_GENERIC+0x34>
 8008aee:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8008af0:	f100 0c08 	add.w	ip, r0, #8
 8008af4:	06bb      	lsls	r3, r7, #26
 8008af6:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8008afa:	d513      	bpl.n	8008b24 <D64_GENERIC+0x210>
 8008afc:	ba76      	rev16	r6, r6
 8008afe:	fa9a fa9a 	rev16.w	sl, sl
 8008b02:	4660      	mov	r0, ip
 8008b04:	e74c      	b.n	80089a0 <D64_GENERIC+0x8c>
 8008b06:	465e      	mov	r6, fp
 8008b08:	9b02      	ldr	r3, [sp, #8]
 8008b0a:	6093      	str	r3, [r2, #8]
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	60d6      	str	r6, [r2, #12]
 8008b12:	6113      	str	r3, [r2, #16]
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	61d4      	str	r4, [r2, #28]
 8008b18:	6153      	str	r3, [r2, #20]
 8008b1a:	9b07      	ldr	r3, [sp, #28]
 8008b1c:	6193      	str	r3, [r2, #24]
 8008b1e:	b009      	add	sp, #36	; 0x24
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	4660      	mov	r0, ip
 8008b26:	e73b      	b.n	80089a0 <D64_GENERIC+0x8c>
 8008b28:	24000000 	.word	0x24000000
 8008b2c:	001c0015 	.word	0x001c0015
 8008b30:	000f000a 	.word	0x000f000a
 8008b34:	00060003 	.word	0x00060003
 8008b38:	0024002a 	.word	0x0024002a
 8008b3c:	002e0030 	.word	0x002e0030
 8008b40:	00030006 	.word	0x00030006
 8008b44:	000a000f 	.word	0x000a000f
 8008b48:	0015001c 	.word	0x0015001c

08008b4c <D80_GENERIC>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	b08b      	sub	sp, #44	; 0x2c
 8008b52:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008b54:	9107      	str	r1, [sp, #28]
 8008b56:	6911      	ldr	r1, [r2, #16]
 8008b58:	9104      	str	r1, [sp, #16]
 8008b5a:	6951      	ldr	r1, [r2, #20]
 8008b5c:	9105      	str	r1, [sp, #20]
 8008b5e:	6991      	ldr	r1, [r2, #24]
 8008b60:	9109      	str	r1, [sp, #36]	; 0x24
 8008b62:	69d1      	ldr	r1, [r2, #28]
 8008b64:	9102      	str	r1, [sp, #8]
 8008b66:	6891      	ldr	r1, [r2, #8]
 8008b68:	9103      	str	r1, [sp, #12]
 8008b6a:	68d1      	ldr	r1, [r2, #12]
 8008b6c:	9101      	str	r1, [sp, #4]
 8008b6e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008b70:	9106      	str	r1, [sp, #24]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 810b 	beq.w	8008d8e <D80_GENERIC+0x242>
 8008b78:	6a13      	ldr	r3, [r2, #32]
 8008b7a:	f04f 0800 	mov.w	r8, #0
 8008b7e:	f8df c260 	ldr.w	ip, [pc, #608]	; 8008de0 <D80_GENERIC+0x294>
 8008b82:	9308      	str	r3, [sp, #32]
 8008b84:	9200      	str	r2, [sp, #0]
 8008b86:	e0ee      	b.n	8008d66 <D80_GENERIC+0x21a>
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	f890 e000 	ldrb.w	lr, [r0]
 8008b8e:	b219      	sxth	r1, r3
 8008b90:	425c      	negs	r4, r3
 8008b92:	f810 9003 	ldrb.w	r9, [r0, r3]
 8008b96:	004e      	lsls	r6, r1, #1
 8008b98:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8008b9c:	4431      	add	r1, r6
 8008b9e:	1843      	adds	r3, r0, r1
 8008ba0:	f810 b001 	ldrb.w	fp, [r0, r1]
 8008ba4:	1919      	adds	r1, r3, r4
 8008ba6:	5d1b      	ldrb	r3, [r3, r4]
 8008ba8:	1948      	adds	r0, r1, r5
 8008baa:	f811 a005 	ldrb.w	sl, [r1, r5]
 8008bae:	041b      	lsls	r3, r3, #16
 8008bb0:	1907      	adds	r7, r0, r4
 8008bb2:	5d01      	ldrb	r1, [r0, r4]
 8008bb4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008bb8:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8008bbc:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8008bc0:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8008bc4:	0409      	lsls	r1, r1, #16
 8008bc6:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8008bca:	eb0b 0905 	add.w	r9, fp, r5
 8008bce:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8008bd2:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8008bd6:	eb09 0b04 	add.w	fp, r9, r4
 8008bda:	f819 4004 	ldrb.w	r4, [r9, r4]
 8008bde:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008be2:	4473      	add	r3, lr
 8008be4:	eb0b 0006 	add.w	r0, fp, r6
 8008be8:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8008bec:	4439      	add	r1, r7
 8008bee:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8008bf2:	b2df      	uxtb	r7, r3
 8008bf4:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8008bf8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8008bfc:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8008c00:	fa5f fa81 	uxtb.w	sl, r1
 8008c04:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8008c08:	9c02      	ldr	r4, [sp, #8]
 8008c0a:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8008c0e:	441c      	add	r4, r3
 8008c10:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8008c14:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8008c18:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008c1c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008c20:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8008c24:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8008c28:	b2ed      	uxtb	r5, r5
 8008c2a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8008c2e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c32:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8008c36:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8008c3a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8008c3e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8008c42:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8008c46:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8008c4a:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8008c4e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8008c52:	0e09      	lsrs	r1, r1, #24
 8008c54:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8008c58:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008c5c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008c60:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008c64:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008c68:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008c6c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008c70:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8008c74:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c78:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8008c7c:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008c80:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008c84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008c88:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008c8c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008c90:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8008c94:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8008c98:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8008c9c:	9202      	str	r2, [sp, #8]
 8008c9e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8008ca2:	4a43      	ldr	r2, [pc, #268]	; (8008db0 <D80_GENERIC+0x264>)
 8008ca4:	9f01      	ldr	r7, [sp, #4]
 8008ca6:	fb23 7a02 	smlad	sl, r3, r2, r7
 8008caa:	4a42      	ldr	r2, [pc, #264]	; (8008db4 <D80_GENERIC+0x268>)
 8008cac:	fb26 aa02 	smlad	sl, r6, r2, sl
 8008cb0:	4a41      	ldr	r2, [pc, #260]	; (8008db8 <D80_GENERIC+0x26c>)
 8008cb2:	fb24 aa02 	smlad	sl, r4, r2, sl
 8008cb6:	4a41      	ldr	r2, [pc, #260]	; (8008dbc <D80_GENERIC+0x270>)
 8008cb8:	fb21 a702 	smlad	r7, r1, r2, sl
 8008cbc:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8008cc0:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8008cc4:	4a3e      	ldr	r2, [pc, #248]	; (8008dc0 <D80_GENERIC+0x274>)
 8008cc6:	9f03      	ldr	r7, [sp, #12]
 8008cc8:	fb23 7e02 	smlad	lr, r3, r2, r7
 8008ccc:	4a3d      	ldr	r2, [pc, #244]	; (8008dc4 <D80_GENERIC+0x278>)
 8008cce:	fb26 ee02 	smlad	lr, r6, r2, lr
 8008cd2:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8008cd6:	fb24 e707 	smlad	r7, r4, r7, lr
 8008cda:	4a3b      	ldr	r2, [pc, #236]	; (8008dc8 <D80_GENERIC+0x27c>)
 8008cdc:	fb21 7702 	smlad	r7, r1, r2, r7
 8008ce0:	4a3a      	ldr	r2, [pc, #232]	; (8008dcc <D80_GENERIC+0x280>)
 8008ce2:	fb25 7202 	smlad	r2, r5, r2, r7
 8008ce6:	f04f 0901 	mov.w	r9, #1
 8008cea:	9201      	str	r2, [sp, #4]
 8008cec:	fb23 f909 	smuad	r9, r3, r9
 8008cf0:	4b37      	ldr	r3, [pc, #220]	; (8008dd0 <D80_GENERIC+0x284>)
 8008cf2:	fb26 9603 	smlad	r6, r6, r3, r9
 8008cf6:	4f37      	ldr	r7, [pc, #220]	; (8008dd4 <D80_GENERIC+0x288>)
 8008cf8:	fb24 6407 	smlad	r4, r4, r7, r6
 8008cfc:	4f36      	ldr	r7, [pc, #216]	; (8008dd8 <D80_GENERIC+0x28c>)
 8008cfe:	fb21 4707 	smlad	r7, r1, r7, r4
 8008d02:	4936      	ldr	r1, [pc, #216]	; (8008ddc <D80_GENERIC+0x290>)
 8008d04:	fb25 7301 	smlad	r3, r5, r1, r7
 8008d08:	9303      	str	r3, [sp, #12]
 8008d0a:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8008d0e:	9b08      	ldr	r3, [sp, #32]
 8008d10:	b193      	cbz	r3, 8008d38 <D80_GENERIC+0x1ec>
 8008d12:	9a04      	ldr	r2, [sp, #16]
 8008d14:	4452      	add	r2, sl
 8008d16:	4614      	mov	r4, r2
 8008d18:	9a05      	ldr	r2, [sp, #20]
 8008d1a:	f8cd a014 	str.w	sl, [sp, #20]
 8008d1e:	1aa4      	subs	r4, r4, r2
 8008d20:	fba4 1203 	umull	r1, r2, r4, r3
 8008d24:	17e7      	asrs	r7, r4, #31
 8008d26:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8008d2a:	fb03 2207 	mla	r2, r3, r7, r2
 8008d2e:	f142 0500 	adc.w	r5, r2, #0
 8008d32:	006b      	lsls	r3, r5, #1
 8008d34:	469a      	mov	sl, r3
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	9e00      	ldr	r6, [sp, #0]
 8008d3a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8008d3e:	9a06      	ldr	r2, [sp, #24]
 8008d40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008d44:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8008d46:	2500      	movs	r5, #0
 8008d48:	fb08 f303 	mul.w	r3, r8, r3
 8008d4c:	fbc2 450a 	smlal	r4, r5, r2, sl
 8008d50:	9a07      	ldr	r2, [sp, #28]
 8008d52:	f108 0801 	add.w	r8, r8, #1
 8008d56:	10a9      	asrs	r1, r5, #2
 8008d58:	f301 010f 	ssat	r1, #16, r1
 8008d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008d60:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8008d62:	4543      	cmp	r3, r8
 8008d64:	dd12      	ble.n	8008d8c <D80_GENERIC+0x240>
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	f47f af0c 	bne.w	8008b88 <D80_GENERIC+0x3c>
 8008d70:	9b00      	ldr	r3, [sp, #0]
 8008d72:	6885      	ldr	r5, [r0, #8]
 8008d74:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008d76:	06b2      	lsls	r2, r6, #26
 8008d78:	e9d0 3100 	ldrd	r3, r1, [r0]
 8008d7c:	f100 000a 	add.w	r0, r0, #10
 8008d80:	f57f af35 	bpl.w	8008bee <D80_GENERIC+0xa2>
 8008d84:	ba5b      	rev16	r3, r3
 8008d86:	ba49      	rev16	r1, r1
 8008d88:	ba6d      	rev16	r5, r5
 8008d8a:	e730      	b.n	8008bee <D80_GENERIC+0xa2>
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	2000      	movs	r0, #0
 8008d92:	6093      	str	r3, [r2, #8]
 8008d94:	9b01      	ldr	r3, [sp, #4]
 8008d96:	60d3      	str	r3, [r2, #12]
 8008d98:	9b02      	ldr	r3, [sp, #8]
 8008d9a:	61d3      	str	r3, [r2, #28]
 8008d9c:	9b04      	ldr	r3, [sp, #16]
 8008d9e:	6113      	str	r3, [r2, #16]
 8008da0:	9b05      	ldr	r3, [sp, #20]
 8008da2:	6153      	str	r3, [r2, #20]
 8008da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da6:	6193      	str	r3, [r2, #24]
 8008da8:	b00b      	add	sp, #44	; 0x2c
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	bf00      	nop
 8008db0:	002d0024 	.word	0x002d0024
 8008db4:	001c0015 	.word	0x001c0015
 8008db8:	000f000a 	.word	0x000f000a
 8008dbc:	00060003 	.word	0x00060003
 8008dc0:	0037003f 	.word	0x0037003f
 8008dc4:	00450049 	.word	0x00450049
 8008dc8:	00490045 	.word	0x00490045
 8008dcc:	003f0037 	.word	0x003f0037
 8008dd0:	00030006 	.word	0x00030006
 8008dd4:	000a000f 	.word	0x000a000f
 8008dd8:	0015001c 	.word	0x0015001c
 8008ddc:	0024002d 	.word	0x0024002d
 8008de0:	24000000 	.word	0x24000000

08008de4 <D128_GENERIC>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	b08d      	sub	sp, #52	; 0x34
 8008dea:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008dec:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8008df0:	9109      	str	r1, [sp, #36]	; 0x24
 8008df2:	6911      	ldr	r1, [r2, #16]
 8008df4:	9201      	str	r2, [sp, #4]
 8008df6:	9106      	str	r1, [sp, #24]
 8008df8:	6951      	ldr	r1, [r2, #20]
 8008dfa:	9107      	str	r1, [sp, #28]
 8008dfc:	6991      	ldr	r1, [r2, #24]
 8008dfe:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e00:	6891      	ldr	r1, [r2, #8]
 8008e02:	9103      	str	r1, [sp, #12]
 8008e04:	68d1      	ldr	r1, [r2, #12]
 8008e06:	9102      	str	r1, [sp, #8]
 8008e08:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008e0a:	9108      	str	r1, [sp, #32]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8183 	beq.w	8009118 <D128_GENERIC+0x334>
 8008e12:	2300      	movs	r3, #0
 8008e14:	6a12      	ldr	r2, [r2, #32]
 8008e16:	4681      	mov	r9, r0
 8008e18:	920a      	str	r2, [sp, #40]	; 0x28
 8008e1a:	e9cd a304 	strd	sl, r3, [sp, #16]
 8008e1e:	e165      	b.n	80090ec <D128_GENERIC+0x308>
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	f899 b000 	ldrb.w	fp, [r9]
 8008e26:	b213      	sxth	r3, r2
 8008e28:	4255      	negs	r5, r2
 8008e2a:	f819 0002 	ldrb.w	r0, [r9, r2]
 8008e2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008e32:	009f      	lsls	r7, r3, #2
 8008e34:	eb09 0402 	add.w	r4, r9, r2
 8008e38:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8008e3c:	f819 8002 	ldrb.w	r8, [r9, r2]
 8008e40:	443b      	add	r3, r7
 8008e42:	1962      	adds	r2, r4, r5
 8008e44:	5d64      	ldrb	r4, [r4, r5]
 8008e46:	eb02 0c03 	add.w	ip, r2, r3
 8008e4a:	0424      	lsls	r4, r4, #16
 8008e4c:	5cd3      	ldrb	r3, [r2, r3]
 8008e4e:	eb0c 0e05 	add.w	lr, ip, r5
 8008e52:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8008e56:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8008e5a:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8008e5e:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8008e62:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8008e66:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8008e6a:	eb0c 0e06 	add.w	lr, ip, r6
 8008e6e:	f81c a006 	ldrb.w	sl, [ip, r6]
 8008e72:	0412      	lsls	r2, r2, #16
 8008e74:	445c      	add	r4, fp
 8008e76:	eb0e 0c05 	add.w	ip, lr, r5
 8008e7a:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8008e7e:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8008e82:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8008e86:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8008e8a:	041b      	lsls	r3, r3, #16
 8008e8c:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8008e90:	eb00 0b06 	add.w	fp, r0, r6
 8008e94:	5d80      	ldrb	r0, [r0, r6]
 8008e96:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8008e9a:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8008e9e:	eb0b 0a05 	add.w	sl, fp, r5
 8008ea2:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8008ea6:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8008eaa:	0436      	lsls	r6, r6, #16
 8008eac:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8008eb0:	4442      	add	r2, r8
 8008eb2:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8008eb6:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8008eba:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8008ebe:	44b9      	add	r9, r7
 8008ec0:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8008ec4:	4463      	add	r3, ip
 8008ec6:	eb06 0508 	add.w	r5, r6, r8
 8008eca:	b2e7      	uxtb	r7, r4
 8008ecc:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8008ed0:	499b      	ldr	r1, [pc, #620]	; (8009140 <D128_GENERIC+0x35c>)
 8008ed2:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8008ed6:	0e24      	lsrs	r4, r4, #24
 8008ed8:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8008edc:	b2d7      	uxtb	r7, r2
 8008ede:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8008ee2:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8008ee6:	9904      	ldr	r1, [sp, #16]
 8008ee8:	4461      	add	r1, ip
 8008eea:	468c      	mov	ip, r1
 8008eec:	4994      	ldr	r1, [pc, #592]	; (8009140 <D128_GENERIC+0x35c>)
 8008eee:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8008ef2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008ef6:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8008efa:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008efe:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8008f02:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8008f06:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8008f0a:	0e12      	lsrs	r2, r2, #24
 8008f0c:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8008f10:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008f14:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8008f18:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008f1c:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8008f20:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008f2a:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8008f2e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008f32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008f36:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8008f3a:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8008f3e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008f42:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8008f46:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008f4a:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8008f4e:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8008f52:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008f56:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008f5a:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008f5e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008f62:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8008f66:	0e1b      	lsrs	r3, r3, #24
 8008f68:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8008f6c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008f70:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8008f74:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8008f78:	b2eb      	uxtb	r3, r5
 8008f7a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008f7e:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8008f82:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8008f86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f8a:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8008f8e:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8008f92:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008f96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f9a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008f9e:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8008fa2:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8008fa6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8008faa:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8008fae:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008fb2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008fb6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8008fba:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008fbe:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8008fc2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8008fc6:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8008fca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008fce:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8008fd2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008fd6:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8008fda:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8008fde:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8008fe2:	9104      	str	r1, [sp, #16]
 8008fe4:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8008fe8:	9902      	ldr	r1, [sp, #8]
 8008fea:	4a56      	ldr	r2, [pc, #344]	; (8009144 <D128_GENERIC+0x360>)
 8008fec:	fb2b 1202 	smlad	r2, fp, r2, r1
 8008ff0:	4955      	ldr	r1, [pc, #340]	; (8009148 <D128_GENERIC+0x364>)
 8008ff2:	fb28 2201 	smlad	r2, r8, r1, r2
 8008ff6:	4955      	ldr	r1, [pc, #340]	; (800914c <D128_GENERIC+0x368>)
 8008ff8:	fb27 2201 	smlad	r2, r7, r1, r2
 8008ffc:	4954      	ldr	r1, [pc, #336]	; (8009150 <D128_GENERIC+0x36c>)
 8008ffe:	fb26 2201 	smlad	r2, r6, r1, r2
 8009002:	4954      	ldr	r1, [pc, #336]	; (8009154 <D128_GENERIC+0x370>)
 8009004:	fb24 2201 	smlad	r2, r4, r1, r2
 8009008:	4953      	ldr	r1, [pc, #332]	; (8009158 <D128_GENERIC+0x374>)
 800900a:	fb20 2201 	smlad	r2, r0, r1, r2
 800900e:	4953      	ldr	r1, [pc, #332]	; (800915c <D128_GENERIC+0x378>)
 8009010:	fb23 2201 	smlad	r2, r3, r1, r2
 8009014:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8009018:	fb25 2a0c 	smlad	sl, r5, ip, r2
 800901c:	4950      	ldr	r1, [pc, #320]	; (8009160 <D128_GENERIC+0x37c>)
 800901e:	9a03      	ldr	r2, [sp, #12]
 8009020:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8009024:	4a4f      	ldr	r2, [pc, #316]	; (8009164 <D128_GENERIC+0x380>)
 8009026:	fb28 ce02 	smlad	lr, r8, r2, ip
 800902a:	f8df c150 	ldr.w	ip, [pc, #336]	; 800917c <D128_GENERIC+0x398>
 800902e:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8009032:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8009180 <D128_GENERIC+0x39c>
 8009036:	fb26 cc0e 	smlad	ip, r6, lr, ip
 800903a:	f8df e148 	ldr.w	lr, [pc, #328]	; 8009184 <D128_GENERIC+0x3a0>
 800903e:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8009042:	f8df c144 	ldr.w	ip, [pc, #324]	; 8009188 <D128_GENERIC+0x3a4>
 8009046:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800904a:	f8df c140 	ldr.w	ip, [pc, #320]	; 800918c <D128_GENERIC+0x3a8>
 800904e:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8009052:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8009190 <D128_GENERIC+0x3ac>
 8009056:	fb25 c20e 	smlad	r2, r5, lr, ip
 800905a:	f04f 0c01 	mov.w	ip, #1
 800905e:	9202      	str	r2, [sp, #8]
 8009060:	fb2b fb0c 	smuad	fp, fp, ip
 8009064:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8009194 <D128_GENERIC+0x3b0>
 8009068:	fb28 bb0c 	smlad	fp, r8, ip, fp
 800906c:	f8df c128 	ldr.w	ip, [pc, #296]	; 8009198 <D128_GENERIC+0x3b4>
 8009070:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8009074:	4f3c      	ldr	r7, [pc, #240]	; (8009168 <D128_GENERIC+0x384>)
 8009076:	fb26 bb07 	smlad	fp, r6, r7, fp
 800907a:	4f3c      	ldr	r7, [pc, #240]	; (800916c <D128_GENERIC+0x388>)
 800907c:	fb24 bb07 	smlad	fp, r4, r7, fp
 8009080:	4f3b      	ldr	r7, [pc, #236]	; (8009170 <D128_GENERIC+0x38c>)
 8009082:	fb20 bb07 	smlad	fp, r0, r7, fp
 8009086:	4f3b      	ldr	r7, [pc, #236]	; (8009174 <D128_GENERIC+0x390>)
 8009088:	fb23 bb07 	smlad	fp, r3, r7, fp
 800908c:	4b3a      	ldr	r3, [pc, #232]	; (8009178 <D128_GENERIC+0x394>)
 800908e:	fb25 b303 	smlad	r3, r5, r3, fp
 8009092:	9303      	str	r3, [sp, #12]
 8009094:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8009098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800909a:	b183      	cbz	r3, 80090be <D128_GENERIC+0x2da>
 800909c:	9a06      	ldr	r2, [sp, #24]
 800909e:	9907      	ldr	r1, [sp, #28]
 80090a0:	4422      	add	r2, r4
 80090a2:	9407      	str	r4, [sp, #28]
 80090a4:	1a52      	subs	r2, r2, r1
 80090a6:	fba2 0103 	umull	r0, r1, r2, r3
 80090aa:	17d5      	asrs	r5, r2, #31
 80090ac:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 80090b0:	fb03 1105 	mla	r1, r3, r5, r1
 80090b4:	f141 0300 	adc.w	r3, r1, #0
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	461c      	mov	r4, r3
 80090bc:	9306      	str	r3, [sp, #24]
 80090be:	9d01      	ldr	r5, [sp, #4]
 80090c0:	01e4      	lsls	r4, r4, #7
 80090c2:	9e05      	ldr	r6, [sp, #20]
 80090c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090c8:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 80090ca:	2300      	movs	r3, #0
 80090cc:	9908      	ldr	r1, [sp, #32]
 80090ce:	fb06 f000 	mul.w	r0, r6, r0
 80090d2:	3601      	adds	r6, #1
 80090d4:	fbc1 2304 	smlal	r2, r3, r1, r4
 80090d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090da:	109b      	asrs	r3, r3, #2
 80090dc:	9605      	str	r6, [sp, #20]
 80090de:	f303 030f 	ssat	r3, #16, r3
 80090e2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 80090e6:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80090e8:	42b3      	cmp	r3, r6
 80090ea:	dd13      	ble.n	8009114 <D128_GENERIC+0x330>
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80090f0:	2a01      	cmp	r2, #1
 80090f2:	f47f ae95 	bne.w	8008e20 <D128_GENERIC+0x3c>
 80090f6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80090f8:	f109 0610 	add.w	r6, r9, #16
 80090fc:	0681      	lsls	r1, r0, #26
 80090fe:	e9d9 4200 	ldrd	r4, r2, [r9]
 8009102:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8009106:	d518      	bpl.n	800913a <D128_GENERIC+0x356>
 8009108:	ba64      	rev16	r4, r4
 800910a:	ba52      	rev16	r2, r2
 800910c:	ba5b      	rev16	r3, r3
 800910e:	ba6d      	rev16	r5, r5
 8009110:	46b1      	mov	r9, r6
 8009112:	e6da      	b.n	8008eca <D128_GENERIC+0xe6>
 8009114:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009118:	9b01      	ldr	r3, [sp, #4]
 800911a:	2000      	movs	r0, #0
 800911c:	9903      	ldr	r1, [sp, #12]
 800911e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009120:	6099      	str	r1, [r3, #8]
 8009122:	9902      	ldr	r1, [sp, #8]
 8009124:	f8c3 a01c 	str.w	sl, [r3, #28]
 8009128:	60d9      	str	r1, [r3, #12]
 800912a:	9906      	ldr	r1, [sp, #24]
 800912c:	619a      	str	r2, [r3, #24]
 800912e:	6119      	str	r1, [r3, #16]
 8009130:	9907      	ldr	r1, [sp, #28]
 8009132:	6159      	str	r1, [r3, #20]
 8009134:	b00d      	add	sp, #52	; 0x34
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913a:	46b1      	mov	r9, r6
 800913c:	e6c5      	b.n	8008eca <D128_GENERIC+0xe6>
 800913e:	bf00      	nop
 8009140:	24000000 	.word	0x24000000
 8009144:	00780069 	.word	0x00780069
 8009148:	005b004e 	.word	0x005b004e
 800914c:	00420037 	.word	0x00420037
 8009150:	002d0024 	.word	0x002d0024
 8009154:	001c0015 	.word	0x001c0015
 8009158:	000f000a 	.word	0x000f000a
 800915c:	00060003 	.word	0x00060003
 8009160:	00880096 	.word	0x00880096
 8009164:	00a200ac 	.word	0x00a200ac
 8009168:	0015001c 	.word	0x0015001c
 800916c:	0024002d 	.word	0x0024002d
 8009170:	00370042 	.word	0x00370042
 8009174:	004e005b 	.word	0x004e005b
 8009178:	00690078 	.word	0x00690078
 800917c:	00b400ba 	.word	0x00b400ba
 8009180:	00be00c0 	.word	0x00be00c0
 8009184:	00c000be 	.word	0x00c000be
 8009188:	00ba00b4 	.word	0x00ba00b4
 800918c:	00ac00a2 	.word	0x00ac00a2
 8009190:	00960088 	.word	0x00960088
 8009194:	00030006 	.word	0x00030006
 8009198:	000a000f 	.word	0x000a000f

0800919c <D16_1CH_HTONS_VOL_HP>:
 800919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a0:	6993      	ldr	r3, [r2, #24]
 80091a2:	b087      	sub	sp, #28
 80091a4:	4682      	mov	sl, r0
 80091a6:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 80091ae:	69d3      	ldr	r3, [r2, #28]
 80091b0:	f8d2 e020 	ldr.w	lr, [r2, #32]
 80091b4:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 80091b8:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 80091bc:	9403      	str	r4, [sp, #12]
 80091be:	2800      	cmp	r0, #0
 80091c0:	d054      	beq.n	800926c <D16_1CH_HTONS_VOL_HP+0xd0>
 80091c2:	f1a1 0902 	sub.w	r9, r1, #2
 80091c6:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 80091ca:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8009278 <D16_1CH_HTONS_VOL_HP+0xdc>
 80091ce:	4650      	mov	r0, sl
 80091d0:	9101      	str	r1, [sp, #4]
 80091d2:	4619      	mov	r1, r3
 80091d4:	f8cd b008 	str.w	fp, [sp, #8]
 80091d8:	9205      	str	r2, [sp, #20]
 80091da:	f850 3b02 	ldr.w	r3, [r0], #2
 80091de:	ba5b      	rev16	r3, r3
 80091e0:	b2dc      	uxtb	r4, r3
 80091e2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80091e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091ea:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80091ee:	4419      	add	r1, r3
 80091f0:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 80091f4:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80091f8:	f3c4 0209 	ubfx	r2, r4, #0, #10
 80091fc:	0aa1      	lsrs	r1, r4, #10
 80091fe:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009202:	4a1b      	ldr	r2, [pc, #108]	; (8009270 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8009204:	fb23 5402 	smlad	r4, r3, r2, r5
 8009208:	4a1a      	ldr	r2, [pc, #104]	; (8009274 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800920a:	fb23 f502 	smuad	r5, r3, r2
 800920e:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009212:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8009216:	f04f 0b00 	mov.w	fp, #0
 800921a:	19a2      	adds	r2, r4, r6
 800921c:	eba2 020c 	sub.w	r2, r2, ip
 8009220:	46a4      	mov	ip, r4
 8009222:	17d7      	asrs	r7, r2, #31
 8009224:	fba2 230e 	umull	r2, r3, r2, lr
 8009228:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 800922c:	fb0e 3307 	mla	r3, lr, r7, r3
 8009230:	f143 0700 	adc.w	r7, r3, #0
 8009234:	9b02      	ldr	r3, [sp, #8]
 8009236:	047a      	lsls	r2, r7, #17
 8009238:	007e      	lsls	r6, r7, #1
 800923a:	fbc3 ab02 	smlal	sl, fp, r3, r2
 800923e:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8009242:	f303 030f 	ssat	r3, #16, r3
 8009246:	f829 3f02 	strh.w	r3, [r9, #2]!
 800924a:	9b01      	ldr	r3, [sp, #4]
 800924c:	4298      	cmp	r0, r3
 800924e:	d1c4      	bne.n	80091da <D16_1CH_HTONS_VOL_HP+0x3e>
 8009250:	460b      	mov	r3, r1
 8009252:	9a05      	ldr	r2, [sp, #20]
 8009254:	2000      	movs	r0, #0
 8009256:	9903      	ldr	r1, [sp, #12]
 8009258:	61d3      	str	r3, [r2, #28]
 800925a:	9b04      	ldr	r3, [sp, #16]
 800925c:	6095      	str	r5, [r2, #8]
 800925e:	60d1      	str	r1, [r2, #12]
 8009260:	6193      	str	r3, [r2, #24]
 8009262:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8009266:	b007      	add	sp, #28
 8009268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	4664      	mov	r4, ip
 800926e:	e7f1      	b.n	8009254 <D16_1CH_HTONS_VOL_HP+0xb8>
 8009270:	00030001 	.word	0x00030001
 8009274:	00010003 	.word	0x00010003
 8009278:	24000000 	.word	0x24000000

0800927c <D24_1CH_HTONS_VOL_HP>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009282:	b089      	sub	sp, #36	; 0x24
 8009284:	6993      	ldr	r3, [r2, #24]
 8009286:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009288:	9604      	str	r6, [sp, #16]
 800928a:	6a16      	ldr	r6, [r2, #32]
 800928c:	9306      	str	r3, [sp, #24]
 800928e:	9505      	str	r5, [sp, #20]
 8009290:	69d3      	ldr	r3, [r2, #28]
 8009292:	9600      	str	r6, [sp, #0]
 8009294:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8009298:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 800929c:	2d00      	cmp	r5, #0
 800929e:	f000 8083 	beq.w	80093a8 <D24_1CH_HTONS_VOL_HP+0x12c>
 80092a2:	9207      	str	r2, [sp, #28]
 80092a4:	2600      	movs	r6, #0
 80092a6:	4622      	mov	r2, r4
 80092a8:	f1a1 0b02 	sub.w	fp, r1, #2
 80092ac:	4f3f      	ldr	r7, [pc, #252]	; (80093ac <D24_1CH_HTONS_VOL_HP+0x130>)
 80092ae:	461d      	mov	r5, r3
 80092b0:	f8cd a00c 	str.w	sl, [sp, #12]
 80092b4:	9c00      	ldr	r4, [sp, #0]
 80092b6:	e056      	b.n	8009366 <D24_1CH_HTONS_VOL_HP+0xea>
 80092b8:	7841      	ldrb	r1, [r0, #1]
 80092ba:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 80092be:	3002      	adds	r0, #2
 80092c0:	4488      	add	r8, r1
 80092c2:	fa5f f388 	uxtb.w	r3, r8
 80092c6:	f3c8 2907 	ubfx	r9, r8, #8, #8
 80092ca:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80092ce:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80092d2:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 80092d6:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 80092da:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 80092de:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 80092e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80092e6:	f3c8 0309 	ubfx	r3, r8, #0, #10
 80092ea:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80092ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80092f2:	492f      	ldr	r1, [pc, #188]	; (80093b0 <D24_1CH_HTONS_VOL_HP+0x134>)
 80092f4:	fb23 e901 	smlad	r9, r3, r1, lr
 80092f8:	492e      	ldr	r1, [pc, #184]	; (80093b4 <D24_1CH_HTONS_VOL_HP+0x138>)
 80092fa:	fb23 ce01 	smlad	lr, r3, r1, ip
 80092fe:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8009302:	2101      	movs	r1, #1
 8009304:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8009308:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 800930c:	fb23 f301 	smuad	r3, r3, r1
 8009310:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8009314:	eb08 0c03 	add.w	ip, r8, r3
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	f04f 0a00 	mov.w	sl, #0
 800931e:	440a      	add	r2, r1
 8009320:	3601      	adds	r6, #1
 8009322:	9103      	str	r1, [sp, #12]
 8009324:	1ad2      	subs	r2, r2, r3
 8009326:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800932a:	fba2 2304 	umull	r2, r3, r2, r4
 800932e:	e9cd 2300 	strd	r2, r3, [sp]
 8009332:	fb04 3309 	mla	r3, r4, r9, r3
 8009336:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800933a:	9301      	str	r3, [sp, #4]
 800933c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009340:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009344:	f143 0300 	adc.w	r3, r3, #0
 8009348:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 800934c:	005a      	lsls	r2, r3, #1
 800934e:	9b04      	ldr	r3, [sp, #16]
 8009350:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8009354:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8009358:	f303 030f 	ssat	r3, #16, r3
 800935c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8009360:	9b05      	ldr	r3, [sp, #20]
 8009362:	429e      	cmp	r6, r3
 8009364:	d010      	beq.n	8009388 <D24_1CH_HTONS_VOL_HP+0x10c>
 8009366:	f890 9003 	ldrb.w	r9, [r0, #3]
 800936a:	f016 0f01 	tst.w	r6, #1
 800936e:	7801      	ldrb	r1, [r0, #0]
 8009370:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8009374:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8009378:	d09e      	beq.n	80092b8 <D24_1CH_HTONS_VOL_HP+0x3c>
 800937a:	f890 8002 	ldrb.w	r8, [r0, #2]
 800937e:	3004      	adds	r0, #4
 8009380:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8009384:	4488      	add	r8, r1
 8009386:	e79c      	b.n	80092c2 <D24_1CH_HTONS_VOL_HP+0x46>
 8009388:	4614      	mov	r4, r2
 800938a:	462b      	mov	r3, r5
 800938c:	9a07      	ldr	r2, [sp, #28]
 800938e:	2000      	movs	r0, #0
 8009390:	61d3      	str	r3, [r2, #28]
 8009392:	9b06      	ldr	r3, [sp, #24]
 8009394:	f8c2 c008 	str.w	ip, [r2, #8]
 8009398:	f8c2 e00c 	str.w	lr, [r2, #12]
 800939c:	6193      	str	r3, [r2, #24]
 800939e:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80093a2:	b009      	add	sp, #36	; 0x24
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	4651      	mov	r1, sl
 80093aa:	e7f0      	b.n	800938e <D24_1CH_HTONS_VOL_HP+0x112>
 80093ac:	24000000 	.word	0x24000000
 80093b0:	00030001 	.word	0x00030001
 80093b4:	00060007 	.word	0x00060007

080093b8 <D32_1CH_HTONS_VOL_HP>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	6993      	ldr	r3, [r2, #24]
 80093be:	b087      	sub	sp, #28
 80093c0:	4683      	mov	fp, r0
 80093c2:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	69d5      	ldr	r5, [r2, #28]
 80093c8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80093ca:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80093ce:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 80093d2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d077      	beq.n	80094ca <D32_1CH_HTONS_VOL_HP+0x112>
 80093da:	460f      	mov	r7, r1
 80093dc:	46f1      	mov	r9, lr
 80093de:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80093e2:	f8cd 8000 	str.w	r8, [sp]
 80093e6:	4e3a      	ldr	r6, [pc, #232]	; (80094d0 <D32_1CH_HTONS_VOL_HP+0x118>)
 80093e8:	469e      	mov	lr, r3
 80093ea:	46a0      	mov	r8, r4
 80093ec:	9103      	str	r1, [sp, #12]
 80093ee:	9205      	str	r2, [sp, #20]
 80093f0:	f85b 4b04 	ldr.w	r4, [fp], #4
 80093f4:	ba64      	rev16	r4, r4
 80093f6:	b2e0      	uxtb	r0, r4
 80093f8:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80093fc:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009400:	0e24      	lsrs	r4, r4, #24
 8009402:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8009406:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800940a:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800940e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009412:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8009416:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 800941a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800941e:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8009422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009426:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800942a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800942e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009432:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8009436:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800943a:	4826      	ldr	r0, [pc, #152]	; (80094d4 <D32_1CH_HTONS_VOL_HP+0x11c>)
 800943c:	fb23 c400 	smlad	r4, r3, r0, ip
 8009440:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009444:	fb21 4402 	smlad	r4, r1, r2, r4
 8009448:	4823      	ldr	r0, [pc, #140]	; (80094d8 <D32_1CH_HTONS_VOL_HP+0x120>)
 800944a:	fb23 ec00 	smlad	ip, r3, r0, lr
 800944e:	4823      	ldr	r0, [pc, #140]	; (80094dc <D32_1CH_HTONS_VOL_HP+0x124>)
 8009450:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009454:	2201      	movs	r2, #1
 8009456:	fb23 f302 	smuad	r3, r3, r2
 800945a:	4821      	ldr	r0, [pc, #132]	; (80094e0 <D32_1CH_HTONS_VOL_HP+0x128>)
 800945c:	fb21 3e00 	smlad	lr, r1, r0, r3
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8009466:	4423      	add	r3, r4
 8009468:	eba3 0209 	sub.w	r2, r3, r9
 800946c:	46a1      	mov	r9, r4
 800946e:	17d1      	asrs	r1, r2, #31
 8009470:	fba2 230a 	umull	r2, r3, r2, sl
 8009474:	e9cd 2300 	strd	r2, r3, [sp]
 8009478:	fb0a 3301 	mla	r3, sl, r1, r3
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009482:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009486:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800948a:	f143 0300 	adc.w	r3, r3, #0
 800948e:	0399      	lsls	r1, r3, #14
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	2300      	movs	r3, #0
 8009496:	fbc8 2301 	smlal	r2, r3, r8, r1
 800949a:	109b      	asrs	r3, r3, #2
 800949c:	f303 030f 	ssat	r3, #16, r3
 80094a0:	f827 3b02 	strh.w	r3, [r7], #2
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	429f      	cmp	r7, r3
 80094a8:	d1a2      	bne.n	80093f0 <D32_1CH_HTONS_VOL_HP+0x38>
 80094aa:	4673      	mov	r3, lr
 80094ac:	f8dd 8000 	ldr.w	r8, [sp]
 80094b0:	9a05      	ldr	r2, [sp, #20]
 80094b2:	6093      	str	r3, [r2, #8]
 80094b4:	2000      	movs	r0, #0
 80094b6:	9b04      	ldr	r3, [sp, #16]
 80094b8:	f8c2 c00c 	str.w	ip, [r2, #12]
 80094bc:	61d5      	str	r5, [r2, #28]
 80094be:	6193      	str	r3, [r2, #24]
 80094c0:	e9c2 8404 	strd	r8, r4, [r2, #16]
 80094c4:	b007      	add	sp, #28
 80094c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ca:	4674      	mov	r4, lr
 80094cc:	e7f1      	b.n	80094b2 <D32_1CH_HTONS_VOL_HP+0xfa>
 80094ce:	bf00      	nop
 80094d0:	24000000 	.word	0x24000000
 80094d4:	00060003 	.word	0x00060003
 80094d8:	000a000c 	.word	0x000a000c
 80094dc:	000c000a 	.word	0x000c000a
 80094e0:	00030006 	.word	0x00030006

080094e4 <D48_1CH_HTONS_VOL_HP>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80094ea:	b087      	sub	sp, #28
 80094ec:	6993      	ldr	r3, [r2, #24]
 80094ee:	9701      	str	r7, [sp, #4]
 80094f0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80094f2:	6a17      	ldr	r7, [r2, #32]
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	69d6      	ldr	r6, [r2, #28]
 80094f8:	9702      	str	r7, [sp, #8]
 80094fa:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 80094fe:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009502:	2d00      	cmp	r5, #0
 8009504:	f000 8093 	beq.w	800962e <D48_1CH_HTONS_VOL_HP+0x14a>
 8009508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800950c:	f1a1 0b02 	sub.w	fp, r1, #2
 8009510:	46f2      	mov	sl, lr
 8009512:	4f48      	ldr	r7, [pc, #288]	; (8009634 <D48_1CH_HTONS_VOL_HP+0x150>)
 8009514:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8009518:	469e      	mov	lr, r3
 800951a:	9205      	str	r2, [sp, #20]
 800951c:	9103      	str	r1, [sp, #12]
 800951e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8009522:	3006      	adds	r0, #6
 8009524:	ba5b      	rev16	r3, r3
 8009526:	fa92 f992 	rev16.w	r9, r2
 800952a:	b2dd      	uxtb	r5, r3
 800952c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009530:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009534:	0e1b      	lsrs	r3, r3, #24
 8009536:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800953a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800953e:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8009542:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 8009546:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800954a:	fa5f f289 	uxtb.w	r2, r9
 800954e:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8009552:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8009556:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800955a:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800955e:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8009562:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 8009566:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800956a:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 800956e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009572:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8009576:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800957a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800957e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8009582:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009586:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800958a:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800958e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8009592:	4b29      	ldr	r3, [pc, #164]	; (8009638 <D48_1CH_HTONS_VOL_HP+0x154>)
 8009594:	fb28 c103 	smlad	r1, r8, r3, ip
 8009598:	4b28      	ldr	r3, [pc, #160]	; (800963c <D48_1CH_HTONS_VOL_HP+0x158>)
 800959a:	fb25 1103 	smlad	r1, r5, r3, r1
 800959e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095a2:	fb22 1903 	smlad	r9, r2, r3, r1
 80095a6:	4b26      	ldr	r3, [pc, #152]	; (8009640 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80095a8:	fb28 ec03 	smlad	ip, r8, r3, lr
 80095ac:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80095b0:	fb25 cc03 	smlad	ip, r5, r3, ip
 80095b4:	4b23      	ldr	r3, [pc, #140]	; (8009644 <D48_1CH_HTONS_VOL_HP+0x160>)
 80095b6:	fb22 cc03 	smlad	ip, r2, r3, ip
 80095ba:	2101      	movs	r1, #1
 80095bc:	fb28 f801 	smuad	r8, r8, r1
 80095c0:	4b21      	ldr	r3, [pc, #132]	; (8009648 <D48_1CH_HTONS_VOL_HP+0x164>)
 80095c2:	fb25 8503 	smlad	r5, r5, r3, r8
 80095c6:	4b21      	ldr	r3, [pc, #132]	; (800964c <D48_1CH_HTONS_VOL_HP+0x168>)
 80095c8:	fb22 5e03 	smlad	lr, r2, r3, r5
 80095cc:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 80095d0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80095d4:	190a      	adds	r2, r1, r4
 80095d6:	9c02      	ldr	r4, [sp, #8]
 80095d8:	eba2 020a 	sub.w	r2, r2, sl
 80095dc:	468a      	mov	sl, r1
 80095de:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80095e2:	fba2 2304 	umull	r2, r3, r2, r4
 80095e6:	fb04 3309 	mla	r3, r4, r9, r3
 80095ea:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 80095ee:	f04f 0900 	mov.w	r9, #0
 80095f2:	f143 0500 	adc.w	r5, r3, #0
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	032a      	lsls	r2, r5, #12
 80095fa:	006c      	lsls	r4, r5, #1
 80095fc:	fbc3 8902 	smlal	r8, r9, r3, r2
 8009600:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8009604:	f303 030f 	ssat	r3, #16, r3
 8009608:	f82b 3f02 	strh.w	r3, [fp, #2]!
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	4283      	cmp	r3, r0
 8009610:	d185      	bne.n	800951e <D48_1CH_HTONS_VOL_HP+0x3a>
 8009612:	4673      	mov	r3, lr
 8009614:	9a05      	ldr	r2, [sp, #20]
 8009616:	6093      	str	r3, [r2, #8]
 8009618:	2000      	movs	r0, #0
 800961a:	9b04      	ldr	r3, [sp, #16]
 800961c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8009620:	61d6      	str	r6, [r2, #28]
 8009622:	6193      	str	r3, [r2, #24]
 8009624:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009628:	b007      	add	sp, #28
 800962a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962e:	4671      	mov	r1, lr
 8009630:	e7f1      	b.n	8009616 <D48_1CH_HTONS_VOL_HP+0x132>
 8009632:	bf00      	nop
 8009634:	24000000 	.word	0x24000000
 8009638:	000f000a 	.word	0x000f000a
 800963c:	00060003 	.word	0x00060003
 8009640:	00150019 	.word	0x00150019
 8009644:	00190015 	.word	0x00190015
 8009648:	00030006 	.word	0x00030006
 800964c:	000a000f 	.word	0x000a000f

08009650 <D64_1CH_HTONS_VOL_HP>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009656:	b089      	sub	sp, #36	; 0x24
 8009658:	6993      	ldr	r3, [r2, #24]
 800965a:	4686      	mov	lr, r0
 800965c:	9503      	str	r5, [sp, #12]
 800965e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8009660:	6a15      	ldr	r5, [r2, #32]
 8009662:	9306      	str	r3, [sp, #24]
 8009664:	69d6      	ldr	r6, [r2, #28]
 8009666:	9504      	str	r5, [sp, #16]
 8009668:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800966c:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009670:	2800      	cmp	r0, #0
 8009672:	f000 80a4 	beq.w	80097be <D64_1CH_HTONS_VOL_HP+0x16e>
 8009676:	460f      	mov	r7, r1
 8009678:	46f1      	mov	r9, lr
 800967a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800967e:	4d56      	ldr	r5, [pc, #344]	; (80097d8 <D64_1CH_HTONS_VOL_HP+0x188>)
 8009680:	46a2      	mov	sl, r4
 8009682:	469e      	mov	lr, r3
 8009684:	9105      	str	r1, [sp, #20]
 8009686:	9207      	str	r2, [sp, #28]
 8009688:	f859 1b08 	ldr.w	r1, [r9], #8
 800968c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009690:	ba49      	rev16	r1, r1
 8009692:	fa93 fb93 	rev16.w	fp, r3
 8009696:	b2cb      	uxtb	r3, r1
 8009698:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800969c:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80096a0:	0e09      	lsrs	r1, r1, #24
 80096a2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80096a6:	fa5f f38b 	uxtb.w	r3, fp
 80096aa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80096ae:	4426      	add	r6, r4
 80096b0:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80096b4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80096b8:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80096bc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80096c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80096c4:	f3cb 2307 	ubfx	r3, fp, #8, #8
 80096c8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80096cc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80096d0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80096d4:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 80096d8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80096dc:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80096e0:	f3cb 4607 	ubfx	r6, fp, #16, #8
 80096e4:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 80096e8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80096ec:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80096f0:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 80096f4:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 80096f8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80096fc:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8009700:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009704:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8009708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800970c:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8009710:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8009714:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009718:	f3cb 0009 	ubfx	r0, fp, #0, #10
 800971c:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8009720:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8009724:	482d      	ldr	r0, [pc, #180]	; (80097dc <D64_1CH_HTONS_VOL_HP+0x18c>)
 8009726:	fb22 cc00 	smlad	ip, r2, r0, ip
 800972a:	482d      	ldr	r0, [pc, #180]	; (80097e0 <D64_1CH_HTONS_VOL_HP+0x190>)
 800972c:	fb21 cc00 	smlad	ip, r1, r0, ip
 8009730:	482c      	ldr	r0, [pc, #176]	; (80097e4 <D64_1CH_HTONS_VOL_HP+0x194>)
 8009732:	fb23 cc00 	smlad	ip, r3, r0, ip
 8009736:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800973a:	fb2b c404 	smlad	r4, fp, r4, ip
 800973e:	482a      	ldr	r0, [pc, #168]	; (80097e8 <D64_1CH_HTONS_VOL_HP+0x198>)
 8009740:	fb22 ec00 	smlad	ip, r2, r0, lr
 8009744:	fb2b cc10 	smladx	ip, fp, r0, ip
 8009748:	4828      	ldr	r0, [pc, #160]	; (80097ec <D64_1CH_HTONS_VOL_HP+0x19c>)
 800974a:	fb21 cc00 	smlad	ip, r1, r0, ip
 800974e:	fb23 cc10 	smladx	ip, r3, r0, ip
 8009752:	f04f 0e01 	mov.w	lr, #1
 8009756:	fb22 f20e 	smuad	r2, r2, lr
 800975a:	4825      	ldr	r0, [pc, #148]	; (80097f0 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800975c:	fb21 2100 	smlad	r1, r1, r0, r2
 8009760:	4a24      	ldr	r2, [pc, #144]	; (80097f4 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8009762:	fb23 1302 	smlad	r3, r3, r2, r1
 8009766:	4a24      	ldr	r2, [pc, #144]	; (80097f8 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8009768:	fb2b 3e02 	smlad	lr, fp, r2, r3
 800976c:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 8009770:	eb04 0208 	add.w	r2, r4, r8
 8009774:	eba2 020a 	sub.w	r2, r2, sl
 8009778:	46a2      	mov	sl, r4
 800977a:	4610      	mov	r0, r2
 800977c:	17d1      	asrs	r1, r2, #31
 800977e:	e9cd 0100 	strd	r0, r1, [sp]
 8009782:	9904      	ldr	r1, [sp, #16]
 8009784:	9801      	ldr	r0, [sp, #4]
 8009786:	fba2 2301 	umull	r2, r3, r2, r1
 800978a:	fb01 3300 	mla	r3, r1, r0, r3
 800978e:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 8009792:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009796:	f143 0100 	adc.w	r1, r3, #0
 800979a:	9b03      	ldr	r3, [sp, #12]
 800979c:	02ca      	lsls	r2, r1, #11
 800979e:	ea4f 0841 	mov.w	r8, r1, lsl #1
 80097a2:	2100      	movs	r1, #0
 80097a4:	fbc3 0102 	smlal	r0, r1, r3, r2
 80097a8:	108b      	asrs	r3, r1, #2
 80097aa:	f303 030f 	ssat	r3, #16, r3
 80097ae:	f827 3b02 	strh.w	r3, [r7], #2
 80097b2:	9b05      	ldr	r3, [sp, #20]
 80097b4:	429f      	cmp	r7, r3
 80097b6:	f47f af67 	bne.w	8009688 <D64_1CH_HTONS_VOL_HP+0x38>
 80097ba:	4673      	mov	r3, lr
 80097bc:	9a07      	ldr	r2, [sp, #28]
 80097be:	6093      	str	r3, [r2, #8]
 80097c0:	2000      	movs	r0, #0
 80097c2:	9b06      	ldr	r3, [sp, #24]
 80097c4:	f8c2 c00c 	str.w	ip, [r2, #12]
 80097c8:	61d6      	str	r6, [r2, #28]
 80097ca:	6193      	str	r3, [r2, #24]
 80097cc:	e9c2 8404 	strd	r8, r4, [r2, #16]
 80097d0:	b009      	add	sp, #36	; 0x24
 80097d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d6:	bf00      	nop
 80097d8:	24000000 	.word	0x24000000
 80097dc:	001c0015 	.word	0x001c0015
 80097e0:	000f000a 	.word	0x000f000a
 80097e4:	00060003 	.word	0x00060003
 80097e8:	0024002a 	.word	0x0024002a
 80097ec:	002e0030 	.word	0x002e0030
 80097f0:	00030006 	.word	0x00030006
 80097f4:	000a000f 	.word	0x000a000f
 80097f8:	0015001c 	.word	0x0015001c

080097fc <D80_1CH_HTONS_VOL_HP>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	6913      	ldr	r3, [r2, #16]
 8009802:	b089      	sub	sp, #36	; 0x24
 8009804:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8009806:	9301      	str	r3, [sp, #4]
 8009808:	9603      	str	r6, [sp, #12]
 800980a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800980c:	6a16      	ldr	r6, [r2, #32]
 800980e:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8009812:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 8009816:	9306      	str	r3, [sp, #24]
 8009818:	9604      	str	r6, [sp, #16]
 800981a:	69d3      	ldr	r3, [r2, #28]
 800981c:	2c00      	cmp	r4, #0
 800981e:	f000 80ce 	beq.w	80099be <D80_1CH_HTONS_VOL_HP+0x1c2>
 8009822:	3902      	subs	r1, #2
 8009824:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009828:	4e66      	ldr	r6, [pc, #408]	; (80099c4 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 800982a:	469e      	mov	lr, r3
 800982c:	9102      	str	r1, [sp, #8]
 800982e:	46aa      	mov	sl, r5
 8009830:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8009834:	9207      	str	r2, [sp, #28]
 8009836:	9105      	str	r1, [sp, #20]
 8009838:	6883      	ldr	r3, [r0, #8]
 800983a:	e9d0 4200 	ldrd	r4, r2, [r0]
 800983e:	300a      	adds	r0, #10
 8009840:	ba64      	rev16	r4, r4
 8009842:	ba52      	rev16	r2, r2
 8009844:	fa93 fb93 	rev16.w	fp, r3
 8009848:	b2e5      	uxtb	r5, r4
 800984a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800984e:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009852:	0e24      	lsrs	r4, r4, #24
 8009854:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8009858:	b2d5      	uxtb	r5, r2
 800985a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800985e:	44c6      	add	lr, r8
 8009860:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009864:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8009868:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800986c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8009870:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009874:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8009878:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800987c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009880:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8009884:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8009888:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800988c:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8009890:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8009894:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8009898:	0e12      	lsrs	r2, r2, #24
 800989a:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800989e:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80098a2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80098a6:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80098aa:	fa5f fb8b 	uxtb.w	fp, fp
 80098ae:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80098b2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80098b6:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 80098ba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80098be:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 80098c2:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80098c6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80098ca:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80098ce:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 80098d2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80098d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80098da:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 80098de:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80098e2:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80098e6:	f3ce 0109 	ubfx	r1, lr, #0, #10
 80098ea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80098ee:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 80098f2:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80098f6:	4934      	ldr	r1, [pc, #208]	; (80099c8 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 80098f8:	fb23 cc01 	smlad	ip, r3, r1, ip
 80098fc:	4933      	ldr	r1, [pc, #204]	; (80099cc <D80_1CH_HTONS_VOL_HP+0x1d0>)
 80098fe:	fb24 cc01 	smlad	ip, r4, r1, ip
 8009902:	4933      	ldr	r1, [pc, #204]	; (80099d0 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8009904:	fb28 cc01 	smlad	ip, r8, r1, ip
 8009908:	4932      	ldr	r1, [pc, #200]	; (80099d4 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800990a:	fb22 cc01 	smlad	ip, r2, r1, ip
 800990e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009912:	fb2b c901 	smlad	r9, fp, r1, ip
 8009916:	4930      	ldr	r1, [pc, #192]	; (80099d8 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8009918:	fb23 7701 	smlad	r7, r3, r1, r7
 800991c:	492f      	ldr	r1, [pc, #188]	; (80099dc <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800991e:	fb24 7701 	smlad	r7, r4, r1, r7
 8009922:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8009926:	fb28 7c0c 	smlad	ip, r8, ip, r7
 800992a:	492d      	ldr	r1, [pc, #180]	; (80099e0 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800992c:	fb22 cc01 	smlad	ip, r2, r1, ip
 8009930:	492c      	ldr	r1, [pc, #176]	; (80099e4 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8009932:	fb2b cc01 	smlad	ip, fp, r1, ip
 8009936:	2101      	movs	r1, #1
 8009938:	fb23 f301 	smuad	r3, r3, r1
 800993c:	492a      	ldr	r1, [pc, #168]	; (80099e8 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800993e:	fb24 3401 	smlad	r4, r4, r1, r3
 8009942:	492a      	ldr	r1, [pc, #168]	; (80099ec <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8009944:	fb28 4101 	smlad	r1, r8, r1, r4
 8009948:	4f29      	ldr	r7, [pc, #164]	; (80099f0 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800994a:	fb22 1207 	smlad	r2, r2, r7, r1
 800994e:	4f29      	ldr	r7, [pc, #164]	; (80099f4 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8009950:	fb2b 2707 	smlad	r7, fp, r7, r2
 8009954:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	9c04      	ldr	r4, [sp, #16]
 800995c:	440b      	add	r3, r1
 800995e:	eba3 020a 	sub.w	r2, r3, sl
 8009962:	468a      	mov	sl, r1
 8009964:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8009968:	fba2 2304 	umull	r2, r3, r2, r4
 800996c:	fb04 3309 	mla	r3, r4, r9, r3
 8009970:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8009974:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009978:	f143 0500 	adc.w	r5, r3, #0
 800997c:	006b      	lsls	r3, r5, #1
 800997e:	02aa      	lsls	r2, r5, #10
 8009980:	2500      	movs	r5, #0
 8009982:	9301      	str	r3, [sp, #4]
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	fbc3 4502 	smlal	r4, r5, r3, r2
 800998a:	9a02      	ldr	r2, [sp, #8]
 800998c:	10ab      	asrs	r3, r5, #2
 800998e:	f303 030f 	ssat	r3, #16, r3
 8009992:	f822 3f02 	strh.w	r3, [r2, #2]!
 8009996:	9b05      	ldr	r3, [sp, #20]
 8009998:	9202      	str	r2, [sp, #8]
 800999a:	4298      	cmp	r0, r3
 800999c:	f47f af4c 	bne.w	8009838 <D80_1CH_HTONS_VOL_HP+0x3c>
 80099a0:	4673      	mov	r3, lr
 80099a2:	9a07      	ldr	r2, [sp, #28]
 80099a4:	61d3      	str	r3, [r2, #28]
 80099a6:	2000      	movs	r0, #0
 80099a8:	9b01      	ldr	r3, [sp, #4]
 80099aa:	6097      	str	r7, [r2, #8]
 80099ac:	f8c2 c00c 	str.w	ip, [r2, #12]
 80099b0:	e9c2 3104 	strd	r3, r1, [r2, #16]
 80099b4:	9b06      	ldr	r3, [sp, #24]
 80099b6:	6193      	str	r3, [r2, #24]
 80099b8:	b009      	add	sp, #36	; 0x24
 80099ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099be:	4629      	mov	r1, r5
 80099c0:	e7f0      	b.n	80099a4 <D80_1CH_HTONS_VOL_HP+0x1a8>
 80099c2:	bf00      	nop
 80099c4:	24000000 	.word	0x24000000
 80099c8:	002d0024 	.word	0x002d0024
 80099cc:	001c0015 	.word	0x001c0015
 80099d0:	000f000a 	.word	0x000f000a
 80099d4:	00060003 	.word	0x00060003
 80099d8:	0037003f 	.word	0x0037003f
 80099dc:	00450049 	.word	0x00450049
 80099e0:	00490045 	.word	0x00490045
 80099e4:	003f0037 	.word	0x003f0037
 80099e8:	00030006 	.word	0x00030006
 80099ec:	000a000f 	.word	0x000a000f
 80099f0:	0015001c 	.word	0x0015001c
 80099f4:	0024002d 	.word	0x0024002d

080099f8 <D128_1CH_HTONS_VOL_HP>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	6914      	ldr	r4, [r2, #16]
 80099fe:	b08d      	sub	sp, #52	; 0x34
 8009a00:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009a02:	9404      	str	r4, [sp, #16]
 8009a04:	6954      	ldr	r4, [r2, #20]
 8009a06:	920b      	str	r2, [sp, #44]	; 0x2c
 8009a08:	9405      	str	r4, [sp, #20]
 8009a0a:	6994      	ldr	r4, [r2, #24]
 8009a0c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009a10:	940a      	str	r4, [sp, #40]	; 0x28
 8009a12:	6894      	ldr	r4, [r2, #8]
 8009a14:	9403      	str	r4, [sp, #12]
 8009a16:	68d4      	ldr	r4, [r2, #12]
 8009a18:	9402      	str	r4, [sp, #8]
 8009a1a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009a1c:	6a12      	ldr	r2, [r2, #32]
 8009a1e:	9407      	str	r4, [sp, #28]
 8009a20:	9208      	str	r2, [sp, #32]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 812e 	beq.w	8009c84 <D128_1CH_HTONS_VOL_HP+0x28c>
 8009a28:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009a2c:	f100 0b10 	add.w	fp, r0, #16
 8009a30:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8009cc4 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8009a34:	9106      	str	r1, [sp, #24]
 8009a36:	9309      	str	r3, [sp, #36]	; 0x24
 8009a38:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8009a3c:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8009a40:	ba40      	rev16	r0, r0
 8009a42:	ba52      	rev16	r2, r2
 8009a44:	ba5b      	rev16	r3, r3
 8009a46:	ba76      	rev16	r6, r6
 8009a48:	b2c5      	uxtb	r5, r0
 8009a4a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8009a4e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8009a52:	0e00      	lsrs	r0, r0, #24
 8009a54:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8009a58:	b2d5      	uxtb	r5, r2
 8009a5a:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8009a5e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009a62:	44bc      	add	ip, r7
 8009a64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009a68:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8009a6c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009a70:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8009a74:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8009a78:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009a7c:	0e12      	lsrs	r2, r2, #24
 8009a7e:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8009a82:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8009a86:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009a8a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009a8e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8009a92:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8009a96:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8009aa0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009aa4:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8009aa8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009aac:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8009ab0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009ab4:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8009ab8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009abc:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8009ac0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009ac4:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8009ac8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8009acc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009ad0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009ad4:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8009ad8:	0e1b      	lsrs	r3, r3, #24
 8009ada:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8009ade:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009ae2:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8009ae6:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8009aea:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8009aee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009af2:	b2f3      	uxtb	r3, r6
 8009af4:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8009af8:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8009afc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009b00:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8009b04:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8009b08:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8009b0c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009b10:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009b14:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8009b18:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8009b1c:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8009b20:	0e36      	lsrs	r6, r6, #24
 8009b22:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8009b26:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009b2a:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8009b2e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009b32:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8009b36:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b3a:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8009b3e:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8009b42:	9101      	str	r1, [sp, #4]
 8009b44:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8009b48:	9b02      	ldr	r3, [sp, #8]
 8009b4a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009b4e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009b52:	4611      	mov	r1, r2
 8009b54:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8009b58:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8009b5c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009b60:	4a49      	ldr	r2, [pc, #292]	; (8009c88 <D128_1CH_HTONS_VOL_HP+0x290>)
 8009b62:	fb2e 3202 	smlad	r2, lr, r2, r3
 8009b66:	4b49      	ldr	r3, [pc, #292]	; (8009c8c <D128_1CH_HTONS_VOL_HP+0x294>)
 8009b68:	fb27 2203 	smlad	r2, r7, r3, r2
 8009b6c:	4b48      	ldr	r3, [pc, #288]	; (8009c90 <D128_1CH_HTONS_VOL_HP+0x298>)
 8009b6e:	fb25 2203 	smlad	r2, r5, r3, r2
 8009b72:	4b48      	ldr	r3, [pc, #288]	; (8009c94 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8009b74:	fb24 2203 	smlad	r2, r4, r3, r2
 8009b78:	4b47      	ldr	r3, [pc, #284]	; (8009c98 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8009b7a:	fb20 2803 	smlad	r8, r0, r3, r2
 8009b7e:	4b47      	ldr	r3, [pc, #284]	; (8009c9c <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8009b80:	9a01      	ldr	r2, [sp, #4]
 8009b82:	fb22 8203 	smlad	r2, r2, r3, r8
 8009b86:	4b46      	ldr	r3, [pc, #280]	; (8009ca0 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8009b88:	9102      	str	r1, [sp, #8]
 8009b8a:	fb21 2203 	smlad	r2, r1, r3, r2
 8009b8e:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8009b92:	fb26 2308 	smlad	r3, r6, r8, r2
 8009b96:	4619      	mov	r1, r3
 8009b98:	9a03      	ldr	r2, [sp, #12]
 8009b9a:	4b42      	ldr	r3, [pc, #264]	; (8009ca4 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8009b9c:	fb2e 2803 	smlad	r8, lr, r3, r2
 8009ba0:	4b41      	ldr	r3, [pc, #260]	; (8009ca8 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8009ba2:	fb27 8a03 	smlad	sl, r7, r3, r8
 8009ba6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8009cc8 <D128_1CH_HTONS_VOL_HP+0x2d0>
 8009baa:	fb25 a808 	smlad	r8, r5, r8, sl
 8009bae:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8009ccc <D128_1CH_HTONS_VOL_HP+0x2d4>
 8009bb2:	fb24 880a 	smlad	r8, r4, sl, r8
 8009bb6:	f8df a118 	ldr.w	sl, [pc, #280]	; 8009cd0 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8009bba:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8009bbe:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8009cd4 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8009bc2:	9b01      	ldr	r3, [sp, #4]
 8009bc4:	fb23 aa08 	smlad	sl, r3, r8, sl
 8009bc8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009cd8 <D128_1CH_HTONS_VOL_HP+0x2e0>
 8009bcc:	9a02      	ldr	r2, [sp, #8]
 8009bce:	fb22 a808 	smlad	r8, r2, r8, sl
 8009bd2:	f8df a108 	ldr.w	sl, [pc, #264]	; 8009cdc <D128_1CH_HTONS_VOL_HP+0x2e4>
 8009bd6:	fb26 830a 	smlad	r3, r6, sl, r8
 8009bda:	f04f 0801 	mov.w	r8, #1
 8009bde:	9302      	str	r3, [sp, #8]
 8009be0:	fb2e fe08 	smuad	lr, lr, r8
 8009be4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8009ce0 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8009be8:	fb27 ee08 	smlad	lr, r7, r8, lr
 8009bec:	4f2f      	ldr	r7, [pc, #188]	; (8009cac <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8009bee:	fb25 ee07 	smlad	lr, r5, r7, lr
 8009bf2:	4f2f      	ldr	r7, [pc, #188]	; (8009cb0 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8009bf4:	fb24 ee07 	smlad	lr, r4, r7, lr
 8009bf8:	4f2e      	ldr	r7, [pc, #184]	; (8009cb4 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8009bfa:	fb20 ee07 	smlad	lr, r0, r7, lr
 8009bfe:	4f2e      	ldr	r7, [pc, #184]	; (8009cb8 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8009c00:	9b01      	ldr	r3, [sp, #4]
 8009c02:	fb23 ee07 	smlad	lr, r3, r7, lr
 8009c06:	4f2d      	ldr	r7, [pc, #180]	; (8009cbc <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8009c08:	fb22 e707 	smlad	r7, r2, r7, lr
 8009c0c:	4b2c      	ldr	r3, [pc, #176]	; (8009cc0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009c0e:	fb26 7303 	smlad	r3, r6, r3, r7
 8009c12:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8009c16:	9303      	str	r3, [sp, #12]
 8009c18:	9b04      	ldr	r3, [sp, #16]
 8009c1a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009c1e:	9f08      	ldr	r7, [sp, #32]
 8009c20:	2100      	movs	r1, #0
 8009c22:	4433      	add	r3, r6
 8009c24:	f10b 0b10 	add.w	fp, fp, #16
 8009c28:	461a      	mov	r2, r3
 8009c2a:	9b05      	ldr	r3, [sp, #20]
 8009c2c:	9605      	str	r6, [sp, #20]
 8009c2e:	1ad2      	subs	r2, r2, r3
 8009c30:	17d5      	asrs	r5, r2, #31
 8009c32:	fba2 2307 	umull	r2, r3, r2, r7
 8009c36:	1814      	adds	r4, r2, r0
 8009c38:	fb07 3305 	mla	r3, r7, r5, r3
 8009c3c:	eb43 0501 	adc.w	r5, r3, r1
 8009c40:	006b      	lsls	r3, r5, #1
 8009c42:	022a      	lsls	r2, r5, #8
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	9b07      	ldr	r3, [sp, #28]
 8009c48:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009c4c:	9a06      	ldr	r2, [sp, #24]
 8009c4e:	108b      	asrs	r3, r1, #2
 8009c50:	f303 030f 	ssat	r3, #16, r3
 8009c54:	f822 3b02 	strh.w	r3, [r2], #2
 8009c58:	4613      	mov	r3, r2
 8009c5a:	9206      	str	r2, [sp, #24]
 8009c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	f47f aeea 	bne.w	8009a38 <D128_1CH_HTONS_VOL_HP+0x40>
 8009c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c66:	2000      	movs	r0, #0
 8009c68:	9903      	ldr	r1, [sp, #12]
 8009c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c6c:	6099      	str	r1, [r3, #8]
 8009c6e:	9902      	ldr	r1, [sp, #8]
 8009c70:	f8c3 c01c 	str.w	ip, [r3, #28]
 8009c74:	60d9      	str	r1, [r3, #12]
 8009c76:	9904      	ldr	r1, [sp, #16]
 8009c78:	619a      	str	r2, [r3, #24]
 8009c7a:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8009c7e:	b00d      	add	sp, #52	; 0x34
 8009c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c84:	9e05      	ldr	r6, [sp, #20]
 8009c86:	e7ed      	b.n	8009c64 <D128_1CH_HTONS_VOL_HP+0x26c>
 8009c88:	00780069 	.word	0x00780069
 8009c8c:	005b004e 	.word	0x005b004e
 8009c90:	00420037 	.word	0x00420037
 8009c94:	002d0024 	.word	0x002d0024
 8009c98:	001c0015 	.word	0x001c0015
 8009c9c:	000f000a 	.word	0x000f000a
 8009ca0:	00060003 	.word	0x00060003
 8009ca4:	00880096 	.word	0x00880096
 8009ca8:	00a200ac 	.word	0x00a200ac
 8009cac:	000a000f 	.word	0x000a000f
 8009cb0:	0015001c 	.word	0x0015001c
 8009cb4:	0024002d 	.word	0x0024002d
 8009cb8:	00370042 	.word	0x00370042
 8009cbc:	004e005b 	.word	0x004e005b
 8009cc0:	00690078 	.word	0x00690078
 8009cc4:	24000000 	.word	0x24000000
 8009cc8:	00b400ba 	.word	0x00b400ba
 8009ccc:	00be00c0 	.word	0x00be00c0
 8009cd0:	00c000be 	.word	0x00c000be
 8009cd4:	00ba00b4 	.word	0x00ba00b4
 8009cd8:	00ac00a2 	.word	0x00ac00a2
 8009cdc:	00960088 	.word	0x00960088
 8009ce0:	00030006 	.word	0x00030006

08009ce4 <PDM_Filter_Init>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	2240      	movs	r2, #64	; 0x40
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4604      	mov	r4, r0
 8009cec:	300c      	adds	r0, #12
 8009cee:	f000 f9ed 	bl	800a0cc <memset>
 8009cf2:	4a56      	ldr	r2, [pc, #344]	; (8009e4c <PDM_Filter_Init+0x168>)
 8009cf4:	4856      	ldr	r0, [pc, #344]	; (8009e50 <PDM_Filter_Init+0x16c>)
 8009cf6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8009cfa:	6813      	ldr	r3, [r2, #0]
 8009cfc:	f24c 2540 	movw	r5, #49728	; 0xc240
 8009d00:	f023 0301 	bic.w	r3, r3, #1
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	6803      	ldr	r3, [r0, #0]
 8009d08:	400b      	ands	r3, r1
 8009d0a:	42ab      	cmp	r3, r5
 8009d0c:	d040      	beq.n	8009d90 <PDM_Filter_Init+0xac>
 8009d0e:	6803      	ldr	r3, [r0, #0]
 8009d10:	f24c 2270 	movw	r2, #49776	; 0xc270
 8009d14:	4019      	ands	r1, r3
 8009d16:	4291      	cmp	r1, r2
 8009d18:	d03a      	beq.n	8009d90 <PDM_Filter_Init+0xac>
 8009d1a:	4b4e      	ldr	r3, [pc, #312]	; (8009e54 <PDM_Filter_Init+0x170>)
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	461a      	mov	r2, r3
 8009d20:	6019      	str	r1, [r3, #0]
 8009d22:	6813      	ldr	r3, [r2, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1fc      	bne.n	8009d22 <PDM_Filter_Init+0x3e>
 8009d28:	4b4b      	ldr	r3, [pc, #300]	; (8009e58 <PDM_Filter_Init+0x174>)
 8009d2a:	494c      	ldr	r1, [pc, #304]	; (8009e5c <PDM_Filter_Init+0x178>)
 8009d2c:	4a4c      	ldr	r2, [pc, #304]	; (8009e60 <PDM_Filter_Init+0x17c>)
 8009d2e:	6019      	str	r1, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	8820      	ldrh	r0, [r4, #0]
 8009d34:	4293      	cmp	r3, r2
 8009d36:	8961      	ldrh	r1, [r4, #10]
 8009d38:	f04f 0300 	mov.w	r3, #0
 8009d3c:	8922      	ldrh	r2, [r4, #8]
 8009d3e:	bf14      	ite	ne
 8009d40:	2500      	movne	r5, #0
 8009d42:	4d47      	ldreq	r5, [pc, #284]	; (8009e60 <PDM_Filter_Init+0x17c>)
 8009d44:	2801      	cmp	r0, #1
 8009d46:	61a3      	str	r3, [r4, #24]
 8009d48:	6465      	str	r5, [r4, #68]	; 0x44
 8009d4a:	60e3      	str	r3, [r4, #12]
 8009d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8009d4e:	6423      	str	r3, [r4, #64]	; 0x40
 8009d50:	86a1      	strh	r1, [r4, #52]	; 0x34
 8009d52:	86e2      	strh	r2, [r4, #54]	; 0x36
 8009d54:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8009d58:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009d5c:	d936      	bls.n	8009dcc <PDM_Filter_Init+0xe8>
 8009d5e:	2003      	movs	r0, #3
 8009d60:	2302      	movs	r3, #2
 8009d62:	8862      	ldrh	r2, [r4, #2]
 8009d64:	2a01      	cmp	r2, #1
 8009d66:	d92e      	bls.n	8009dc6 <PDM_Filter_Init+0xe2>
 8009d68:	2140      	movs	r1, #64	; 0x40
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009d6e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8009d72:	d101      	bne.n	8009d78 <PDM_Filter_Init+0x94>
 8009d74:	460b      	mov	r3, r1
 8009d76:	6421      	str	r1, [r4, #64]	; 0x40
 8009d78:	6862      	ldr	r2, [r4, #4]
 8009d7a:	b11a      	cbz	r2, 8009d84 <PDM_Filter_Init+0xa0>
 8009d7c:	f043 0310 	orr.w	r3, r3, #16
 8009d80:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009d82:	6423      	str	r3, [r4, #64]	; 0x40
 8009d84:	2200      	movs	r2, #0
 8009d86:	8722      	strh	r2, [r4, #56]	; 0x38
 8009d88:	b908      	cbnz	r0, 8009d8e <PDM_Filter_Init+0xaa>
 8009d8a:	3380      	adds	r3, #128	; 0x80
 8009d8c:	6423      	str	r3, [r4, #64]	; 0x40
 8009d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d90:	4b34      	ldr	r3, [pc, #208]	; (8009e64 <PDM_Filter_Init+0x180>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1c0      	bne.n	8009d1a <PDM_Filter_Init+0x36>
 8009d98:	4a33      	ldr	r2, [pc, #204]	; (8009e68 <PDM_Filter_Init+0x184>)
 8009d9a:	6813      	ldr	r3, [r2, #0]
 8009d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009da0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009da4:	d006      	beq.n	8009db4 <PDM_Filter_Init+0xd0>
 8009da6:	6813      	ldr	r3, [r2, #0]
 8009da8:	f240 4283 	movw	r2, #1155	; 0x483
 8009dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d1b2      	bne.n	8009d1a <PDM_Filter_Init+0x36>
 8009db4:	4b2d      	ldr	r3, [pc, #180]	; (8009e6c <PDM_Filter_Init+0x188>)
 8009db6:	2101      	movs	r1, #1
 8009db8:	461a      	mov	r2, r3
 8009dba:	6019      	str	r1, [r3, #0]
 8009dbc:	6813      	ldr	r3, [r2, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1fc      	bne.n	8009dbc <PDM_Filter_Init+0xd8>
 8009dc2:	4b2b      	ldr	r3, [pc, #172]	; (8009e70 <PDM_Filter_Init+0x18c>)
 8009dc4:	e7b1      	b.n	8009d2a <PDM_Filter_Init+0x46>
 8009dc6:	d03a      	beq.n	8009e3e <PDM_Filter_Init+0x15a>
 8009dc8:	4618      	mov	r0, r3
 8009dca:	e7cd      	b.n	8009d68 <PDM_Filter_Init+0x84>
 8009dcc:	4d29      	ldr	r5, [pc, #164]	; (8009e74 <PDM_Filter_Init+0x190>)
 8009dce:	782a      	ldrb	r2, [r5, #0]
 8009dd0:	d01b      	beq.n	8009e0a <PDM_Filter_Init+0x126>
 8009dd2:	2a01      	cmp	r2, #1
 8009dd4:	d001      	beq.n	8009dda <PDM_Filter_Init+0xf6>
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	e7c3      	b.n	8009d62 <PDM_Filter_Init+0x7e>
 8009dda:	4927      	ldr	r1, [pc, #156]	; (8009e78 <PDM_Filter_Init+0x194>)
 8009ddc:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8009e80 <PDM_Filter_Init+0x19c>
 8009de0:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009de4:	4e25      	ldr	r6, [pc, #148]	; (8009e7c <PDM_Filter_Init+0x198>)
 8009de6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009dea:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009dee:	ea02 0006 	and.w	r0, r2, r6
 8009df2:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009df6:	428f      	cmp	r7, r1
 8009df8:	ea43 0300 	orr.w	r3, r3, r0
 8009dfc:	4413      	add	r3, r2
 8009dfe:	600b      	str	r3, [r1, #0]
 8009e00:	d1f1      	bne.n	8009de6 <PDM_Filter_Init+0x102>
 8009e02:	2300      	movs	r3, #0
 8009e04:	2001      	movs	r0, #1
 8009e06:	702b      	strb	r3, [r5, #0]
 8009e08:	e7ab      	b.n	8009d62 <PDM_Filter_Init+0x7e>
 8009e0a:	2a00      	cmp	r2, #0
 8009e0c:	d1a9      	bne.n	8009d62 <PDM_Filter_Init+0x7e>
 8009e0e:	491a      	ldr	r1, [pc, #104]	; (8009e78 <PDM_Filter_Init+0x194>)
 8009e10:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8009e80 <PDM_Filter_Init+0x19c>
 8009e14:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009e18:	4e18      	ldr	r6, [pc, #96]	; (8009e7c <PDM_Filter_Init+0x198>)
 8009e1a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009e1e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8009e22:	ea02 0006 	and.w	r0, r2, r6
 8009e26:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009e2a:	428f      	cmp	r7, r1
 8009e2c:	ea43 0300 	orr.w	r3, r3, r0
 8009e30:	4413      	add	r3, r2
 8009e32:	600b      	str	r3, [r1, #0]
 8009e34:	d1f1      	bne.n	8009e1a <PDM_Filter_Init+0x136>
 8009e36:	2001      	movs	r0, #1
 8009e38:	2300      	movs	r3, #0
 8009e3a:	7028      	strb	r0, [r5, #0]
 8009e3c:	e791      	b.n	8009d62 <PDM_Filter_Init+0x7e>
 8009e3e:	2220      	movs	r2, #32
 8009e40:	4618      	mov	r0, r3
 8009e42:	2160      	movs	r1, #96	; 0x60
 8009e44:	6422      	str	r2, [r4, #64]	; 0x40
 8009e46:	4613      	mov	r3, r2
 8009e48:	e790      	b.n	8009d6c <PDM_Filter_Init+0x88>
 8009e4a:	bf00      	nop
 8009e4c:	e0002000 	.word	0xe0002000
 8009e50:	e000ed00 	.word	0xe000ed00
 8009e54:	40023008 	.word	0x40023008
 8009e58:	40023000 	.word	0x40023000
 8009e5c:	f407a5c2 	.word	0xf407a5c2
 8009e60:	b5e8b5cd 	.word	0xb5e8b5cd
 8009e64:	e0042000 	.word	0xe0042000
 8009e68:	5c001000 	.word	0x5c001000
 8009e6c:	58024c08 	.word	0x58024c08
 8009e70:	58024c00 	.word	0x58024c00
 8009e74:	24000498 	.word	0x24000498
 8009e78:	23fffffc 	.word	0x23fffffc
 8009e7c:	000ffc00 	.word	0x000ffc00
 8009e80:	3ff00000 	.word	0x3ff00000

08009e84 <PDM_Filter_setConfig>:
 8009e84:	4b67      	ldr	r3, [pc, #412]	; (800a024 <PDM_Filter_setConfig+0x1a0>)
 8009e86:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d128      	bne.n	8009ede <PDM_Filter_setConfig+0x5a>
 8009e8c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e90:	880e      	ldrh	r6, [r1, #0]
 8009e92:	460d      	mov	r5, r1
 8009e94:	4604      	mov	r4, r0
 8009e96:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009e9a:	1e73      	subs	r3, r6, #1
 8009e9c:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8009ea0:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8009ea4:	2b06      	cmp	r3, #6
 8009ea6:	ed2d 8b02 	vpush	{d8}
 8009eaa:	6421      	str	r1, [r4, #64]	; 0x40
 8009eac:	b083      	sub	sp, #12
 8009eae:	d820      	bhi.n	8009ef2 <PDM_Filter_setConfig+0x6e>
 8009eb0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009eb2:	42b3      	cmp	r3, r6
 8009eb4:	d03d      	beq.n	8009f32 <PDM_Filter_setConfig+0xae>
 8009eb6:	4b5c      	ldr	r3, [pc, #368]	; (800a028 <PDM_Filter_setConfig+0x1a4>)
 8009eb8:	4013      	ands	r3, r2
 8009eba:	4333      	orrs	r3, r6
 8009ebc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009ec0:	6423      	str	r3, [r4, #64]	; 0x40
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	2a70      	cmp	r2, #112	; 0x70
 8009ec8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009ecc:	d009      	beq.n	8009ee2 <PDM_Filter_setConfig+0x5e>
 8009ece:	2b06      	cmp	r3, #6
 8009ed0:	d824      	bhi.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009ed2:	e8df f003 	tbb	[pc, r3]
 8009ed6:	878a      	.short	0x878a
 8009ed8:	7b7e8184 	.word	0x7b7e8184
 8009edc:	78          	.byte	0x78
 8009edd:	00          	.byte	0x00
 8009ede:	2004      	movs	r0, #4
 8009ee0:	4770      	bx	lr
 8009ee2:	2b06      	cmp	r3, #6
 8009ee4:	d81a      	bhi.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009ee6:	e8df f003 	tbb	[pc, r3]
 8009eea:	8f92      	.short	0x8f92
 8009eec:	8617898c 	.word	0x8617898c
 8009ef0:	83          	.byte	0x83
 8009ef1:	00          	.byte	0x00
 8009ef2:	4287      	cmp	r7, r0
 8009ef4:	f000 808e 	beq.w	800a014 <PDM_Filter_setConfig+0x190>
 8009ef8:	f117 0f0c 	cmn.w	r7, #12
 8009efc:	f04f 0008 	mov.w	r0, #8
 8009f00:	da11      	bge.n	8009f26 <PDM_Filter_setConfig+0xa2>
 8009f02:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8009f06:	3040      	adds	r0, #64	; 0x40
 8009f08:	80ab      	strh	r3, [r5, #4]
 8009f0a:	886b      	ldrh	r3, [r5, #2]
 8009f0c:	8626      	strh	r6, [r4, #48]	; 0x30
 8009f0e:	8663      	strh	r3, [r4, #50]	; 0x32
 8009f10:	b003      	add	sp, #12
 8009f12:	ecbd 8b02 	vpop	{d8}
 8009f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f18:	4b44      	ldr	r3, [pc, #272]	; (800a02c <PDM_Filter_setConfig+0x1a8>)
 8009f1a:	64a3      	str	r3, [r4, #72]	; 0x48
 8009f1c:	f117 0f0c 	cmn.w	r7, #12
 8009f20:	f04f 0000 	mov.w	r0, #0
 8009f24:	dbed      	blt.n	8009f02 <PDM_Filter_setConfig+0x7e>
 8009f26:	2f33      	cmp	r7, #51	; 0x33
 8009f28:	dd10      	ble.n	8009f4c <PDM_Filter_setConfig+0xc8>
 8009f2a:	2333      	movs	r3, #51	; 0x33
 8009f2c:	3040      	adds	r0, #64	; 0x40
 8009f2e:	80ab      	strh	r3, [r5, #4]
 8009f30:	e7eb      	b.n	8009f0a <PDM_Filter_setConfig+0x86>
 8009f32:	4287      	cmp	r7, r0
 8009f34:	d1f2      	bne.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009f36:	886b      	ldrh	r3, [r5, #2]
 8009f38:	8663      	strh	r3, [r4, #50]	; 0x32
 8009f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f42:	6423      	str	r3, [r4, #64]	; 0x40
 8009f44:	b003      	add	sp, #12
 8009f46:	ecbd 8b02 	vpop	{d8}
 8009f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	3b01      	subs	r3, #1
 8009f54:	2b06      	cmp	r3, #6
 8009f56:	d831      	bhi.n	8009fbc <PDM_Filter_setConfig+0x138>
 8009f58:	4a35      	ldr	r2, [pc, #212]	; (800a030 <PDM_Filter_setConfig+0x1ac>)
 8009f5a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8009f5e:	eddf 0a35 	vldr	s1, [pc, #212]	; 800a034 <PDM_Filter_setConfig+0x1b0>
 8009f62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f66:	9001      	str	r0, [sp, #4]
 8009f68:	edd3 7a07 	vldr	s15, [r3, #28]
 8009f6c:	ed93 8a00 	vldr	s16, [r3]
 8009f70:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009f74:	f000 f8cc 	bl	800a110 <powf>
 8009f78:	eef0 8a40 	vmov.f32	s17, s0
 8009f7c:	9801      	ldr	r0, [sp, #4]
 8009f7e:	ee07 7a90 	vmov	s15, r7
 8009f82:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009f86:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8009f8a:	9001      	str	r0, [sp, #4]
 8009f8c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8009f90:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a038 <PDM_Filter_setConfig+0x1b4>
 8009f94:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009f98:	f000 f8ba 	bl	800a110 <powf>
 8009f9c:	ee28 8a00 	vmul.f32	s16, s16, s0
 8009fa0:	886b      	ldrh	r3, [r5, #2]
 8009fa2:	9801      	ldr	r0, [sp, #4]
 8009fa4:	feb8 8a48 	vrinta.f32	s16, s16
 8009fa8:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8009fac:	8727      	strh	r7, [r4, #56]	; 0x38
 8009fae:	8663      	strh	r3, [r4, #50]	; 0x32
 8009fb0:	8626      	strh	r6, [r4, #48]	; 0x30
 8009fb2:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0bf      	beq.n	8009f3a <PDM_Filter_setConfig+0xb6>
 8009fba:	e7a9      	b.n	8009f10 <PDM_Filter_setConfig+0x8c>
 8009fbc:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800a03c <PDM_Filter_setConfig+0x1b8>
 8009fc0:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800a040 <PDM_Filter_setConfig+0x1bc>
 8009fc4:	e7db      	b.n	8009f7e <PDM_Filter_setConfig+0xfa>
 8009fc6:	4b1f      	ldr	r3, [pc, #124]	; (800a044 <PDM_Filter_setConfig+0x1c0>)
 8009fc8:	64a3      	str	r3, [r4, #72]	; 0x48
 8009fca:	e7a7      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009fcc:	4b1e      	ldr	r3, [pc, #120]	; (800a048 <PDM_Filter_setConfig+0x1c4>)
 8009fce:	64a3      	str	r3, [r4, #72]	; 0x48
 8009fd0:	e7a4      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009fd2:	4b1e      	ldr	r3, [pc, #120]	; (800a04c <PDM_Filter_setConfig+0x1c8>)
 8009fd4:	64a3      	str	r3, [r4, #72]	; 0x48
 8009fd6:	e7a1      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009fd8:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <PDM_Filter_setConfig+0x1cc>)
 8009fda:	64a3      	str	r3, [r4, #72]	; 0x48
 8009fdc:	e79e      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009fde:	4b1d      	ldr	r3, [pc, #116]	; (800a054 <PDM_Filter_setConfig+0x1d0>)
 8009fe0:	64a3      	str	r3, [r4, #72]	; 0x48
 8009fe2:	e79b      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009fe4:	4b1c      	ldr	r3, [pc, #112]	; (800a058 <PDM_Filter_setConfig+0x1d4>)
 8009fe6:	64a3      	str	r3, [r4, #72]	; 0x48
 8009fe8:	e798      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009fea:	4b1c      	ldr	r3, [pc, #112]	; (800a05c <PDM_Filter_setConfig+0x1d8>)
 8009fec:	64a3      	str	r3, [r4, #72]	; 0x48
 8009fee:	e795      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009ff0:	4b1b      	ldr	r3, [pc, #108]	; (800a060 <PDM_Filter_setConfig+0x1dc>)
 8009ff2:	64a3      	str	r3, [r4, #72]	; 0x48
 8009ff4:	e792      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009ff6:	4b1b      	ldr	r3, [pc, #108]	; (800a064 <PDM_Filter_setConfig+0x1e0>)
 8009ff8:	64a3      	str	r3, [r4, #72]	; 0x48
 8009ffa:	e78f      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 8009ffc:	4b1a      	ldr	r3, [pc, #104]	; (800a068 <PDM_Filter_setConfig+0x1e4>)
 8009ffe:	64a3      	str	r3, [r4, #72]	; 0x48
 800a000:	e78c      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 800a002:	4b1a      	ldr	r3, [pc, #104]	; (800a06c <PDM_Filter_setConfig+0x1e8>)
 800a004:	64a3      	str	r3, [r4, #72]	; 0x48
 800a006:	e789      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 800a008:	4b19      	ldr	r3, [pc, #100]	; (800a070 <PDM_Filter_setConfig+0x1ec>)
 800a00a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a00c:	e786      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 800a00e:	4b19      	ldr	r3, [pc, #100]	; (800a074 <PDM_Filter_setConfig+0x1f0>)
 800a010:	64a3      	str	r3, [r4, #72]	; 0x48
 800a012:	e783      	b.n	8009f1c <PDM_Filter_setConfig+0x98>
 800a014:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a016:	42b3      	cmp	r3, r6
 800a018:	f47f af6e 	bne.w	8009ef8 <PDM_Filter_setConfig+0x74>
 800a01c:	886b      	ldrh	r3, [r5, #2]
 800a01e:	2008      	movs	r0, #8
 800a020:	8663      	strh	r3, [r4, #50]	; 0x32
 800a022:	e775      	b.n	8009f10 <PDM_Filter_setConfig+0x8c>
 800a024:	b5e8b5cd 	.word	0xb5e8b5cd
 800a028:	fffffef0 	.word	0xfffffef0
 800a02c:	0800919d 	.word	0x0800919d
 800a030:	0800a480 	.word	0x0800a480
 800a034:	42000000 	.word	0x42000000
 800a038:	3d4ccccd 	.word	0x3d4ccccd
 800a03c:	4f800000 	.word	0x4f800000
 800a040:	00000000 	.word	0x00000000
 800a044:	080085a9 	.word	0x080085a9
 800a048:	08008431 	.word	0x08008431
 800a04c:	08008321 	.word	0x08008321
 800a050:	08008de5 	.word	0x08008de5
 800a054:	08008b4d 	.word	0x08008b4d
 800a058:	08008915 	.word	0x08008915
 800a05c:	08008731 	.word	0x08008731
 800a060:	080093b9 	.word	0x080093b9
 800a064:	0800927d 	.word	0x0800927d
 800a068:	080099f9 	.word	0x080099f9
 800a06c:	080097fd 	.word	0x080097fd
 800a070:	08009651 	.word	0x08009651
 800a074:	080094e5 	.word	0x080094e5

0800a078 <__errno>:
 800a078:	4b01      	ldr	r3, [pc, #4]	; (800a080 <__errno+0x8>)
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	24000418 	.word	0x24000418

0800a084 <__libc_init_array>:
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	4d0d      	ldr	r5, [pc, #52]	; (800a0bc <__libc_init_array+0x38>)
 800a088:	4c0d      	ldr	r4, [pc, #52]	; (800a0c0 <__libc_init_array+0x3c>)
 800a08a:	1b64      	subs	r4, r4, r5
 800a08c:	10a4      	asrs	r4, r4, #2
 800a08e:	2600      	movs	r6, #0
 800a090:	42a6      	cmp	r6, r4
 800a092:	d109      	bne.n	800a0a8 <__libc_init_array+0x24>
 800a094:	4d0b      	ldr	r5, [pc, #44]	; (800a0c4 <__libc_init_array+0x40>)
 800a096:	4c0c      	ldr	r4, [pc, #48]	; (800a0c8 <__libc_init_array+0x44>)
 800a098:	f000 f9e6 	bl	800a468 <_init>
 800a09c:	1b64      	subs	r4, r4, r5
 800a09e:	10a4      	asrs	r4, r4, #2
 800a0a0:	2600      	movs	r6, #0
 800a0a2:	42a6      	cmp	r6, r4
 800a0a4:	d105      	bne.n	800a0b2 <__libc_init_array+0x2e>
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}
 800a0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ac:	4798      	blx	r3
 800a0ae:	3601      	adds	r6, #1
 800a0b0:	e7ee      	b.n	800a090 <__libc_init_array+0xc>
 800a0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b6:	4798      	blx	r3
 800a0b8:	3601      	adds	r6, #1
 800a0ba:	e7f2      	b.n	800a0a2 <__libc_init_array+0x1e>
 800a0bc:	0800a748 	.word	0x0800a748
 800a0c0:	0800a748 	.word	0x0800a748
 800a0c4:	0800a748 	.word	0x0800a748
 800a0c8:	0800a74c 	.word	0x0800a74c

0800a0cc <memset>:
 800a0cc:	4402      	add	r2, r0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d100      	bne.n	800a0d6 <memset+0xa>
 800a0d4:	4770      	bx	lr
 800a0d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0da:	e7f9      	b.n	800a0d0 <memset+0x4>

0800a0dc <checkint>:
 800a0dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a0e0:	2b7e      	cmp	r3, #126	; 0x7e
 800a0e2:	dd10      	ble.n	800a106 <checkint+0x2a>
 800a0e4:	2b96      	cmp	r3, #150	; 0x96
 800a0e6:	dc0c      	bgt.n	800a102 <checkint+0x26>
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f2:	1e5a      	subs	r2, r3, #1
 800a0f4:	4202      	tst	r2, r0
 800a0f6:	d106      	bne.n	800a106 <checkint+0x2a>
 800a0f8:	4203      	tst	r3, r0
 800a0fa:	bf0c      	ite	eq
 800a0fc:	2002      	moveq	r0, #2
 800a0fe:	2001      	movne	r0, #1
 800a100:	4770      	bx	lr
 800a102:	2002      	movs	r0, #2
 800a104:	4770      	bx	lr
 800a106:	2000      	movs	r0, #0
 800a108:	4770      	bx	lr
 800a10a:	0000      	movs	r0, r0
 800a10c:	0000      	movs	r0, r0
	...

0800a110 <powf>:
 800a110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a112:	ee10 1a10 	vmov	r1, s0
 800a116:	ee10 6a90 	vmov	r6, s1
 800a11a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800a11e:	0072      	lsls	r2, r6, #1
 800a120:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a124:	b085      	sub	sp, #20
 800a126:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800a12a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800a12e:	d256      	bcs.n	800a1de <powf+0xce>
 800a130:	4298      	cmp	r0, r3
 800a132:	d256      	bcs.n	800a1e2 <powf+0xd2>
 800a134:	2000      	movs	r0, #0
 800a136:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800a13a:	4ea3      	ldr	r6, [pc, #652]	; (800a3c8 <powf+0x2b8>)
 800a13c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a140:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800a144:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800a148:	0dd2      	lsrs	r2, r2, #23
 800a14a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800a14e:	05d2      	lsls	r2, r2, #23
 800a150:	1a8b      	subs	r3, r1, r2
 800a152:	ed97 5b00 	vldr	d5, [r7]
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	15d2      	asrs	r2, r2, #23
 800a15c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a160:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a164:	ed97 5b02 	vldr	d5, [r7, #8]
 800a168:	ee26 2b06 	vmul.f64	d2, d6, d6
 800a16c:	ee22 1b02 	vmul.f64	d1, d2, d2
 800a170:	ee07 2a90 	vmov	s15, r2
 800a174:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800a178:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a17c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a180:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800a184:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800a188:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a18c:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800a190:	eea6 4b03 	vfma.f64	d4, d6, d3
 800a194:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800a198:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800a19c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a1a0:	eea2 7b04 	vfma.f64	d7, d2, d4
 800a1a4:	eea5 7b01 	vfma.f64	d7, d5, d1
 800a1a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a1ac:	ee10 1a90 	vmov	r1, s1
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	2700      	movs	r7, #0
 800a1b4:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800a1b8:	f248 06be 	movw	r6, #32958	; 0x80be
 800a1bc:	429f      	cmp	r7, r3
 800a1be:	bf08      	it	eq
 800a1c0:	4296      	cmpeq	r6, r2
 800a1c2:	f080 80b1 	bcs.w	800a328 <powf+0x218>
 800a1c6:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800a3a8 <powf+0x298>
 800a1ca:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d2:	dd79      	ble.n	800a2c8 <powf+0x1b8>
 800a1d4:	b005      	add	sp, #20
 800a1d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a1da:	f000 b91f 	b.w	800a41c <__math_oflowf>
 800a1de:	4298      	cmp	r0, r3
 800a1e0:	d32d      	bcc.n	800a23e <powf+0x12e>
 800a1e2:	b952      	cbnz	r2, 800a1fa <powf+0xea>
 800a1e4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800a1e8:	005b      	lsls	r3, r3, #1
 800a1ea:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800a1ee:	f240 80cd 	bls.w	800a38c <powf+0x27c>
 800a1f2:	ee30 0a20 	vadd.f32	s0, s0, s1
 800a1f6:	b005      	add	sp, #20
 800a1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1fa:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a1fe:	d105      	bne.n	800a20c <powf+0xfc>
 800a200:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800a204:	0076      	lsls	r6, r6, #1
 800a206:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800a20a:	e7f0      	b.n	800a1ee <powf+0xde>
 800a20c:	004b      	lsls	r3, r1, #1
 800a20e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800a212:	d8ee      	bhi.n	800a1f2 <powf+0xe2>
 800a214:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a218:	d1eb      	bne.n	800a1f2 <powf+0xe2>
 800a21a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a21e:	f000 80b5 	beq.w	800a38c <powf+0x27c>
 800a222:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a226:	ea6f 0606 	mvn.w	r6, r6
 800a22a:	bf34      	ite	cc
 800a22c:	2300      	movcc	r3, #0
 800a22e:	2301      	movcs	r3, #1
 800a230:	0ff6      	lsrs	r6, r6, #31
 800a232:	42b3      	cmp	r3, r6
 800a234:	f040 80ad 	bne.w	800a392 <powf+0x282>
 800a238:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800a23c:	e7db      	b.n	800a1f6 <powf+0xe6>
 800a23e:	004f      	lsls	r7, r1, #1
 800a240:	1e7a      	subs	r2, r7, #1
 800a242:	429a      	cmp	r2, r3
 800a244:	d31c      	bcc.n	800a280 <powf+0x170>
 800a246:	2900      	cmp	r1, #0
 800a248:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a24c:	da0f      	bge.n	800a26e <powf+0x15e>
 800a24e:	ee10 0a90 	vmov	r0, s1
 800a252:	f7ff ff43 	bl	800a0dc <checkint>
 800a256:	2801      	cmp	r0, #1
 800a258:	d109      	bne.n	800a26e <powf+0x15e>
 800a25a:	eeb1 0a40 	vneg.f32	s0, s0
 800a25e:	b947      	cbnz	r7, 800a272 <powf+0x162>
 800a260:	2e00      	cmp	r6, #0
 800a262:	dac8      	bge.n	800a1f6 <powf+0xe6>
 800a264:	b005      	add	sp, #20
 800a266:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a26a:	f000 b8dd 	b.w	800a428 <__math_divzerof>
 800a26e:	2000      	movs	r0, #0
 800a270:	e7f5      	b.n	800a25e <powf+0x14e>
 800a272:	2e00      	cmp	r6, #0
 800a274:	dabf      	bge.n	800a1f6 <powf+0xe6>
 800a276:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a27a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a27e:	e7ba      	b.n	800a1f6 <powf+0xe6>
 800a280:	2900      	cmp	r1, #0
 800a282:	da1f      	bge.n	800a2c4 <powf+0x1b4>
 800a284:	ee10 0a90 	vmov	r0, s1
 800a288:	f7ff ff28 	bl	800a0dc <checkint>
 800a28c:	b920      	cbnz	r0, 800a298 <powf+0x188>
 800a28e:	b005      	add	sp, #20
 800a290:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a294:	f000 b8d8 	b.w	800a448 <__math_invalidf>
 800a298:	2801      	cmp	r0, #1
 800a29a:	bf14      	ite	ne
 800a29c:	2000      	movne	r0, #0
 800a29e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800a2a2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a2a6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a2aa:	f4bf af44 	bcs.w	800a136 <powf+0x26>
 800a2ae:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a3cc <powf+0x2bc>
 800a2b2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a2b6:	ee10 3a10 	vmov	r3, s0
 800a2ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2be:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800a2c2:	e738      	b.n	800a136 <powf+0x26>
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	e7ee      	b.n	800a2a6 <powf+0x196>
 800a2c8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800a3b0 <powf+0x2a0>
 800a2cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d4:	dd10      	ble.n	800a2f8 <powf+0x1e8>
 800a2d6:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d15c      	bne.n	800a398 <powf+0x288>
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	eddd 7a02 	vldr	s15, [sp, #8]
 800a2e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2ec:	eef4 7a47 	vcmp.f32	s15, s14
 800a2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f4:	f47f af6e 	bne.w	800a1d4 <powf+0xc4>
 800a2f8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a3b8 <powf+0x2a8>
 800a2fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a304:	d804      	bhi.n	800a310 <powf+0x200>
 800a306:	b005      	add	sp, #20
 800a308:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a30c:	f000 b87a 	b.w	800a404 <__math_uflowf>
 800a310:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800a3c0 <powf+0x2b0>
 800a314:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a31c:	d504      	bpl.n	800a328 <powf+0x218>
 800a31e:	b005      	add	sp, #20
 800a320:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a324:	f000 b874 	b.w	800a410 <__math_may_uflowf>
 800a328:	4b29      	ldr	r3, [pc, #164]	; (800a3d0 <powf+0x2c0>)
 800a32a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800a32e:	ee30 6b07 	vadd.f64	d6, d0, d7
 800a332:	ed8d 6b00 	vstr	d6, [sp]
 800a336:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a33a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800a33e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a342:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a346:	f006 011f 	and.w	r1, r6, #31
 800a34a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a34e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800a352:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800a356:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800a35a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800a35e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a362:	ee27 5b07 	vmul.f64	d5, d7, d7
 800a366:	1836      	adds	r6, r6, r0
 800a368:	2300      	movs	r3, #0
 800a36a:	eb13 040c 	adds.w	r4, r3, ip
 800a36e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800a372:	eb41 050e 	adc.w	r5, r1, lr
 800a376:	eea7 0b04 	vfma.f64	d0, d7, d4
 800a37a:	ec45 4b17 	vmov	d7, r4, r5
 800a37e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800a382:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a386:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a38a:	e734      	b.n	800a1f6 <powf+0xe6>
 800a38c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a390:	e731      	b.n	800a1f6 <powf+0xe6>
 800a392:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a3d4 <powf+0x2c4>
 800a396:	e72e      	b.n	800a1f6 <powf+0xe6>
 800a398:	9303      	str	r3, [sp, #12]
 800a39a:	eddd 7a03 	vldr	s15, [sp, #12]
 800a39e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a3a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3a6:	e7a1      	b.n	800a2ec <powf+0x1dc>
 800a3a8:	ffd1d571 	.word	0xffd1d571
 800a3ac:	405fffff 	.word	0x405fffff
 800a3b0:	ffa3aae2 	.word	0xffa3aae2
 800a3b4:	405fffff 	.word	0x405fffff
 800a3b8:	00000000 	.word	0x00000000
 800a3bc:	c062c000 	.word	0xc062c000
 800a3c0:	00000000 	.word	0x00000000
 800a3c4:	c062a000 	.word	0xc062a000
 800a3c8:	0800a4d8 	.word	0x0800a4d8
 800a3cc:	4b000000 	.word	0x4b000000
 800a3d0:	0800a600 	.word	0x0800a600
 800a3d4:	00000000 	.word	0x00000000

0800a3d8 <with_errnof>:
 800a3d8:	b513      	push	{r0, r1, r4, lr}
 800a3da:	4604      	mov	r4, r0
 800a3dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a3e0:	f7ff fe4a 	bl	800a078 <__errno>
 800a3e4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a3e8:	6004      	str	r4, [r0, #0]
 800a3ea:	b002      	add	sp, #8
 800a3ec:	bd10      	pop	{r4, pc}

0800a3ee <xflowf>:
 800a3ee:	b130      	cbz	r0, 800a3fe <xflowf+0x10>
 800a3f0:	eef1 7a40 	vneg.f32	s15, s0
 800a3f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a3f8:	2022      	movs	r0, #34	; 0x22
 800a3fa:	f7ff bfed 	b.w	800a3d8 <with_errnof>
 800a3fe:	eef0 7a40 	vmov.f32	s15, s0
 800a402:	e7f7      	b.n	800a3f4 <xflowf+0x6>

0800a404 <__math_uflowf>:
 800a404:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a40c <__math_uflowf+0x8>
 800a408:	f7ff bff1 	b.w	800a3ee <xflowf>
 800a40c:	10000000 	.word	0x10000000

0800a410 <__math_may_uflowf>:
 800a410:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a418 <__math_may_uflowf+0x8>
 800a414:	f7ff bfeb 	b.w	800a3ee <xflowf>
 800a418:	1a200000 	.word	0x1a200000

0800a41c <__math_oflowf>:
 800a41c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a424 <__math_oflowf+0x8>
 800a420:	f7ff bfe5 	b.w	800a3ee <xflowf>
 800a424:	70000000 	.word	0x70000000

0800a428 <__math_divzerof>:
 800a428:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a42c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a430:	2800      	cmp	r0, #0
 800a432:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800a436:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800a444 <__math_divzerof+0x1c>
 800a43a:	2022      	movs	r0, #34	; 0x22
 800a43c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a440:	f7ff bfca 	b.w	800a3d8 <with_errnof>
 800a444:	00000000 	.word	0x00000000

0800a448 <__math_invalidf>:
 800a448:	eef0 7a40 	vmov.f32	s15, s0
 800a44c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a450:	eef4 7a67 	vcmp.f32	s15, s15
 800a454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a458:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a45c:	d602      	bvs.n	800a464 <__math_invalidf+0x1c>
 800a45e:	2021      	movs	r0, #33	; 0x21
 800a460:	f7ff bfba 	b.w	800a3d8 <with_errnof>
 800a464:	4770      	bx	lr
	...

0800a468 <_init>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	bf00      	nop
 800a46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46e:	bc08      	pop	{r3}
 800a470:	469e      	mov	lr, r3
 800a472:	4770      	bx	lr

0800a474 <_fini>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	bf00      	nop
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr
