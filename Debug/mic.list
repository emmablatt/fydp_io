
mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009418  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080096e8  080096e8  000196e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000474  24000000  080099b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000798  24000474  08009e24  00020474  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000c0c  08009e24  00020c0c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fac3  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002f47  00000000  00000000  0003ff65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d20  00000000  00000000  00042eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c30  00000000  00000000  00043bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000035a3  00000000  00000000  00044800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001333e  00000000  00000000  00047da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015031d  00000000  00000000  0005b0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000d1  00000000  00000000  001ab3fe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000036a8  00000000  00000000  001ab4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000474 	.word	0x24000474
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080096d0 	.word	0x080096d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000478 	.word	0x24000478
 800030c:	080096d0 	.word	0x080096d0

08000310 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d002      	beq.n	800032e <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8000328:	f06f 0301 	mvn.w	r3, #1
 800032c:	e085      	b.n	800043a <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 800032e:	4b45      	ldr	r3, [pc, #276]	; (8000444 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000334:	4a43      	ldr	r2, [pc, #268]	; (8000444 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800033a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033e:	4b41      	ldr	r3, [pc, #260]	; (8000444 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e06e      	b.n	8000430 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8000352:	4a3d      	ldr	r2, [pc, #244]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	214c      	movs	r1, #76	; 0x4c
 8000358:	fb01 f303 	mul.w	r3, r1, r3
 800035c:	4413      	add	r3, r2
 800035e:	2201      	movs	r2, #1
 8000360:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8000362:	4a39      	ldr	r2, [pc, #228]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	214c      	movs	r1, #76	; 0x4c
 8000368:	fb01 f303 	mul.w	r3, r1, r3
 800036c:	4413      	add	r3, r2
 800036e:	3302      	adds	r3, #2
 8000370:	2200      	movs	r2, #0
 8000372:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8000374:	4a34      	ldr	r2, [pc, #208]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	214c      	movs	r1, #76	; 0x4c
 800037a:	fb01 f303 	mul.w	r3, r1, r3
 800037e:	4413      	add	r3, r2
 8000380:	3304      	adds	r3, #4
 8000382:	4a32      	ldr	r2, [pc, #200]	; (800044c <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8000384:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	b298      	uxth	r0, r3
 800038a:	4a2f      	ldr	r2, [pc, #188]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	214c      	movs	r1, #76	; 0x4c
 8000390:	fb01 f303 	mul.w	r3, r1, r3
 8000394:	4413      	add	r3, r2
 8000396:	330a      	adds	r3, #10
 8000398:	4602      	mov	r2, r0
 800039a:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	b298      	uxth	r0, r3
 80003a0:	4a29      	ldr	r2, [pc, #164]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	214c      	movs	r1, #76	; 0x4c
 80003a6:	fb01 f303 	mul.w	r3, r1, r3
 80003aa:	4413      	add	r3, r2
 80003ac:	3308      	adds	r3, #8
 80003ae:	4602      	mov	r2, r0
 80003b0:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	224c      	movs	r2, #76	; 0x4c
 80003b6:	fb02 f303 	mul.w	r3, r2, r3
 80003ba:	4a23      	ldr	r2, [pc, #140]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80003bc:	4413      	add	r3, r2
 80003be:	4618      	mov	r0, r3
 80003c0:	f008 fdc6 	bl	8008f50 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	4a22      	ldr	r2, [pc, #136]	; (8000450 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 80003c8:	fba2 2303 	umull	r2, r3, r2, r3
 80003cc:	099b      	lsrs	r3, r3, #6
 80003ce:	b298      	uxth	r0, r3
 80003d0:	4920      	ldr	r1, [pc, #128]	; (8000454 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	4613      	mov	r3, r2
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	4413      	add	r3, r2
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	440b      	add	r3, r1
 80003de:	3302      	adds	r3, #2
 80003e0:	4602      	mov	r2, r0
 80003e2:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 80003e4:	491b      	ldr	r1, [pc, #108]	; (8000454 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80003e6:	697a      	ldr	r2, [r7, #20]
 80003e8:	4613      	mov	r3, r2
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	4413      	add	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	440b      	add	r3, r1
 80003f2:	3304      	adds	r3, #4
 80003f4:	2218      	movs	r2, #24
 80003f6:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 80003f8:	4916      	ldr	r1, [pc, #88]	; (8000454 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	4613      	mov	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	440b      	add	r3, r1
 8000406:	2207      	movs	r2, #7
 8000408:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	224c      	movs	r2, #76	; 0x4c
 800040e:	fb02 f303 	mul.w	r3, r2, r3
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8000414:	1898      	adds	r0, r3, r2
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	4613      	mov	r3, r2
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	4413      	add	r3, r2
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	4a0c      	ldr	r2, [pc, #48]	; (8000454 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8000422:	4413      	add	r3, r2
 8000424:	4619      	mov	r1, r3
 8000426:	f008 fe63 	bl	80090f0 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	3301      	adds	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	697a      	ldr	r2, [r7, #20]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	429a      	cmp	r2, r3
 8000436:	d38c      	bcc.n	8000352 <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3718      	adds	r7, #24
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	58024400 	.word	0x58024400
 8000448:	240005fc 	.word	0x240005fc
 800044c:	7e809d48 	.word	0x7e809d48
 8000450:	10624dd3 	.word	0x10624dd3
 8000454:	24000694 	.word	0x24000694

08000458 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pbuf     Main buffer pointer for the recorded data storing
  * @param  Size     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d003      	beq.n	8000476 <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800046e:	f06f 0301 	mvn.w	r3, #1
 8000472:	617b      	str	r3, [r7, #20]
 8000474:	e01d      	b.n	80004b2 <BSP_AUDIO_IN_RecordPDM+0x5a>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai[Instance], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	22b4      	movs	r2, #180	; 0xb4
 800047a:	fb02 f303 	mul.w	r3, r2, r3
 800047e:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <BSP_AUDIO_IN_RecordPDM+0x64>)
 8000480:	1898      	adds	r0, r3, r2
 8000482:	490f      	ldr	r1, [pc, #60]	; (80004c0 <BSP_AUDIO_IN_RecordPDM+0x68>)
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	4613      	mov	r3, r2
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	4413      	add	r3, r2
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	440b      	add	r3, r1
 8000490:	330c      	adds	r3, #12
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	fbb2 f3f3 	udiv	r3, r2, r3
 800049c:	b29b      	uxth	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	f006 f8a3 	bl	80065ec <HAL_SAI_Receive_DMA>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <BSP_AUDIO_IN_RecordPDM+0x5a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80004ac:	f06f 0303 	mvn.w	r3, #3
 80004b0:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 80004b2:	697b      	ldr	r3, [r7, #20]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3718      	adds	r7, #24
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	24000494 	.word	0x24000494
 80004c0:	240008fc 	.word	0x240008fc

080004c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ca:	2003      	movs	r0, #3
 80004cc:	f000 f95c 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80004d0:	f003 fbe2 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 80004d4:	4602      	mov	r2, r0
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <HAL_Init+0x68>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	f003 030f 	and.w	r3, r3, #15
 80004e0:	4913      	ldr	r1, [pc, #76]	; (8000530 <HAL_Init+0x6c>)
 80004e2:	5ccb      	ldrb	r3, [r1, r3]
 80004e4:	f003 031f 	and.w	r3, r3, #31
 80004e8:	fa22 f303 	lsr.w	r3, r2, r3
 80004ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_Init+0x68>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_Init+0x6c>)
 80004f8:	5cd3      	ldrb	r3, [r2, r3]
 80004fa:	f003 031f 	and.w	r3, r3, #31
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	fa22 f303 	lsr.w	r3, r2, r3
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <HAL_Init+0x70>)
 8000506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <HAL_Init+0x74>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800050e:	2000      	movs	r0, #0
 8000510:	f000 f814 	bl	800053c <HAL_InitTick>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800051a:	2301      	movs	r3, #1
 800051c:	e002      	b.n	8000524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800051e:	f006 fd8d 	bl	800703c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	58024400 	.word	0x58024400
 8000530:	08009728 	.word	0x08009728
 8000534:	2400040c 	.word	0x2400040c
 8000538:	24000408 	.word	0x24000408

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_InitTick+0x60>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d101      	bne.n	8000550 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	e021      	b.n	8000594 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <HAL_InitTick+0x64>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_InitTick+0x60>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f941 	bl	80007ee <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 f90b 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x68>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	24000404 	.word	0x24000404
 80005a0:	24000408 	.word	0x24000408
 80005a4:	24000400 	.word	0x24000400

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	24000404 	.word	0x24000404
 80005cc:	2400098c 	.word	0x2400098c

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2400098c 	.word	0x2400098c

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <__NVIC_SetPriorityGrouping+0x40>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	4313      	orrs	r3, r2
 8000614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <__NVIC_SetPriorityGrouping+0x40>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	60d3      	str	r3, [r2, #12]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00
 800062c:	05fa0000 	.word	0x05fa0000

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db0b      	blt.n	8000676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	4907      	ldr	r1, [pc, #28]	; (8000684 <__NVIC_EnableIRQ+0x38>)
 8000666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	2001      	movs	r0, #1
 800066e:	fa00 f202 	lsl.w	r2, r0, r2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	401a      	ands	r2, r3
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43d9      	mvns	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000768:	f7ff ff8e 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff29 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff40 	bl	8000630 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff90 	bl	80006dc <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5f 	bl	8000688 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff33 	bl	800064c <__NVIC_EnableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffa4 	bl	8000744 <SysTick_Config>
 80007fc:	4603      	mov	r3, r0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e054      	b.n	80008c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7f5b      	ldrb	r3, [r3, #29]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d105      	bne.n	8000830 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f006 fc20 	bl	8007070 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2202      	movs	r2, #2
 8000834:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10c      	bne.n	8000858 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_CRC_Init+0xc4>)
 8000844:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f022 0218 	bic.w	r2, r2, #24
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	e00c      	b.n	8000872 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6899      	ldr	r1, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	461a      	mov	r2, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f834 	bl	80008d0 <HAL_CRCEx_Polynomial_Set>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e028      	b.n	80008c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	795b      	ldrb	r3, [r3, #5]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d105      	bne.n	8000886 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	e004      	b.n	8000890 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	6912      	ldr	r2, [r2, #16]
 800088e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	699a      	ldr	r2, [r3, #24]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	04c11db7 	.word	0x04c11db7

080008d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80008e0:	231f      	movs	r3, #31
 80008e2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80008e4:	bf00      	nop
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	613a      	str	r2, [r7, #16]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d009      	beq.n	8000904 <HAL_CRCEx_Polynomial_Set+0x34>
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	f003 031f 	and.w	r3, r3, #31
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	fa22 f303 	lsr.w	r3, r2, r3
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f0      	beq.n	80008e6 <HAL_CRCEx_Polynomial_Set+0x16>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b18      	cmp	r3, #24
 8000908:	d846      	bhi.n	8000998 <HAL_CRCEx_Polynomial_Set+0xc8>
 800090a:	a201      	add	r2, pc, #4	; (adr r2, 8000910 <HAL_CRCEx_Polynomial_Set+0x40>)
 800090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000910:	0800099f 	.word	0x0800099f
 8000914:	08000999 	.word	0x08000999
 8000918:	08000999 	.word	0x08000999
 800091c:	08000999 	.word	0x08000999
 8000920:	08000999 	.word	0x08000999
 8000924:	08000999 	.word	0x08000999
 8000928:	08000999 	.word	0x08000999
 800092c:	08000999 	.word	0x08000999
 8000930:	0800098d 	.word	0x0800098d
 8000934:	08000999 	.word	0x08000999
 8000938:	08000999 	.word	0x08000999
 800093c:	08000999 	.word	0x08000999
 8000940:	08000999 	.word	0x08000999
 8000944:	08000999 	.word	0x08000999
 8000948:	08000999 	.word	0x08000999
 800094c:	08000999 	.word	0x08000999
 8000950:	08000981 	.word	0x08000981
 8000954:	08000999 	.word	0x08000999
 8000958:	08000999 	.word	0x08000999
 800095c:	08000999 	.word	0x08000999
 8000960:	08000999 	.word	0x08000999
 8000964:	08000999 	.word	0x08000999
 8000968:	08000999 	.word	0x08000999
 800096c:	08000999 	.word	0x08000999
 8000970:	08000975 	.word	0x08000975
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	2b06      	cmp	r3, #6
 8000978:	d913      	bls.n	80009a2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800097e:	e010      	b.n	80009a2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	2b07      	cmp	r3, #7
 8000984:	d90f      	bls.n	80009a6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800098a:	e00c      	b.n	80009a6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d90b      	bls.n	80009aa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000996:	e008      	b.n	80009aa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	75fb      	strb	r3, [r7, #23]
      break;
 800099c:	e006      	b.n	80009ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800099e:	bf00      	nop
 80009a0:	e004      	b.n	80009ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80009a2:	bf00      	nop
 80009a4:	e002      	b.n	80009ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80009a6:	bf00      	nop
 80009a8:	e000      	b.n	80009ac <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80009aa:	bf00      	nop
  }
  if (status == HAL_OK)
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10d      	bne.n	80009ce <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f023 0118 	bic.w	r1, r3, #24
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff fdf4 	bl	80005d0 <HAL_GetTick>
 80009e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d101      	bne.n	80009f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e314      	b.n	800101e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a66      	ldr	r2, [pc, #408]	; (8000b94 <HAL_DMA_Init+0x1b8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d04a      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a65      	ldr	r2, [pc, #404]	; (8000b98 <HAL_DMA_Init+0x1bc>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d045      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a63      	ldr	r2, [pc, #396]	; (8000b9c <HAL_DMA_Init+0x1c0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d040      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a62      	ldr	r2, [pc, #392]	; (8000ba0 <HAL_DMA_Init+0x1c4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d03b      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a60      	ldr	r2, [pc, #384]	; (8000ba4 <HAL_DMA_Init+0x1c8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d036      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a5f      	ldr	r2, [pc, #380]	; (8000ba8 <HAL_DMA_Init+0x1cc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d031      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a5d      	ldr	r2, [pc, #372]	; (8000bac <HAL_DMA_Init+0x1d0>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d02c      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a5c      	ldr	r2, [pc, #368]	; (8000bb0 <HAL_DMA_Init+0x1d4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d027      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a5a      	ldr	r2, [pc, #360]	; (8000bb4 <HAL_DMA_Init+0x1d8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d022      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a59      	ldr	r2, [pc, #356]	; (8000bb8 <HAL_DMA_Init+0x1dc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d01d      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a57      	ldr	r2, [pc, #348]	; (8000bbc <HAL_DMA_Init+0x1e0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d018      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a56      	ldr	r2, [pc, #344]	; (8000bc0 <HAL_DMA_Init+0x1e4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d013      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a54      	ldr	r2, [pc, #336]	; (8000bc4 <HAL_DMA_Init+0x1e8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00e      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <HAL_DMA_Init+0x1ec>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d009      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_DMA_Init+0x1f0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d004      	beq.n	8000a94 <HAL_DMA_Init+0xb8>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_DMA_Init+0x1f4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d101      	bne.n	8000a98 <HAL_DMA_Init+0xbc>
 8000a94:	2301      	movs	r3, #1
 8000a96:	e000      	b.n	8000a9a <HAL_DMA_Init+0xbe>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 813c 	beq.w	8000d18 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <HAL_DMA_Init+0x1b8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d04a      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <HAL_DMA_Init+0x1bc>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d045      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <HAL_DMA_Init+0x1c0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d040      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a33      	ldr	r2, [pc, #204]	; (8000ba0 <HAL_DMA_Init+0x1c4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d03b      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <HAL_DMA_Init+0x1c8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d036      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <HAL_DMA_Init+0x1cc>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d031      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a2e      	ldr	r2, [pc, #184]	; (8000bac <HAL_DMA_Init+0x1d0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d02c      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a2d      	ldr	r2, [pc, #180]	; (8000bb0 <HAL_DMA_Init+0x1d4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d027      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <HAL_DMA_Init+0x1d8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d022      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a2a      	ldr	r2, [pc, #168]	; (8000bb8 <HAL_DMA_Init+0x1dc>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d01d      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <HAL_DMA_Init+0x1e0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d018      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a27      	ldr	r2, [pc, #156]	; (8000bc0 <HAL_DMA_Init+0x1e4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d013      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <HAL_DMA_Init+0x1e8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00e      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <HAL_DMA_Init+0x1ec>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d009      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <HAL_DMA_Init+0x1f0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d004      	beq.n	8000b50 <HAL_DMA_Init+0x174>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a21      	ldr	r2, [pc, #132]	; (8000bd0 <HAL_DMA_Init+0x1f4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d108      	bne.n	8000b62 <HAL_DMA_Init+0x186>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e007      	b.n	8000b72 <HAL_DMA_Init+0x196>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0201 	bic.w	r2, r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000b72:	e02f      	b.n	8000bd4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b74:	f7ff fd2c 	bl	80005d0 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d928      	bls.n	8000bd4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2220      	movs	r2, #32
 8000b86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e244      	b.n	800101e <HAL_DMA_Init+0x642>
 8000b94:	40020010 	.word	0x40020010
 8000b98:	40020028 	.word	0x40020028
 8000b9c:	40020040 	.word	0x40020040
 8000ba0:	40020058 	.word	0x40020058
 8000ba4:	40020070 	.word	0x40020070
 8000ba8:	40020088 	.word	0x40020088
 8000bac:	400200a0 	.word	0x400200a0
 8000bb0:	400200b8 	.word	0x400200b8
 8000bb4:	40020410 	.word	0x40020410
 8000bb8:	40020428 	.word	0x40020428
 8000bbc:	40020440 	.word	0x40020440
 8000bc0:	40020458 	.word	0x40020458
 8000bc4:	40020470 	.word	0x40020470
 8000bc8:	40020488 	.word	0x40020488
 8000bcc:	400204a0 	.word	0x400204a0
 8000bd0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1c8      	bne.n	8000b74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4b84      	ldr	r3, [pc, #528]	; (8000e00 <HAL_DMA_Init+0x424>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000bfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d107      	bne.n	8000c38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	4313      	orrs	r3, r2
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b28      	cmp	r3, #40	; 0x28
 8000c3e:	d903      	bls.n	8000c48 <HAL_DMA_Init+0x26c>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b2e      	cmp	r3, #46	; 0x2e
 8000c46:	d91f      	bls.n	8000c88 <HAL_DMA_Init+0x2ac>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b3e      	cmp	r3, #62	; 0x3e
 8000c4e:	d903      	bls.n	8000c58 <HAL_DMA_Init+0x27c>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b42      	cmp	r3, #66	; 0x42
 8000c56:	d917      	bls.n	8000c88 <HAL_DMA_Init+0x2ac>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b46      	cmp	r3, #70	; 0x46
 8000c5e:	d903      	bls.n	8000c68 <HAL_DMA_Init+0x28c>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b48      	cmp	r3, #72	; 0x48
 8000c66:	d90f      	bls.n	8000c88 <HAL_DMA_Init+0x2ac>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b4e      	cmp	r3, #78	; 0x4e
 8000c6e:	d903      	bls.n	8000c78 <HAL_DMA_Init+0x29c>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b52      	cmp	r3, #82	; 0x52
 8000c76:	d907      	bls.n	8000c88 <HAL_DMA_Init+0x2ac>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b73      	cmp	r3, #115	; 0x73
 8000c7e:	d905      	bls.n	8000c8c <HAL_DMA_Init+0x2b0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b77      	cmp	r3, #119	; 0x77
 8000c86:	d801      	bhi.n	8000c8c <HAL_DMA_Init+0x2b0>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_DMA_Init+0x2b2>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c98:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f023 0307 	bic.w	r3, r3, #7
 8000cb0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d117      	bne.n	8000cf4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00e      	beq.n	8000cf4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f001 fdd8 	bl	800288c <DMA_CheckFifoParam>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d008      	beq.n	8000cf4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2240      	movs	r2, #64	; 0x40
 8000ce6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e194      	b.n	800101e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f001 fd13 	bl	8002728 <DMA_CalcBaseAndBitshift>
 8000d02:	4603      	mov	r3, r0
 8000d04:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d0a:	f003 031f 	and.w	r3, r3, #31
 8000d0e:	223f      	movs	r2, #63	; 0x3f
 8000d10:	409a      	lsls	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	e0ca      	b.n	8000eae <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <HAL_DMA_Init+0x428>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d022      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <HAL_DMA_Init+0x42c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d01d      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a36      	ldr	r2, [pc, #216]	; (8000e0c <HAL_DMA_Init+0x430>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d018      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a35      	ldr	r2, [pc, #212]	; (8000e10 <HAL_DMA_Init+0x434>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d013      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a33      	ldr	r2, [pc, #204]	; (8000e14 <HAL_DMA_Init+0x438>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00e      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a32      	ldr	r2, [pc, #200]	; (8000e18 <HAL_DMA_Init+0x43c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d009      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a30      	ldr	r2, [pc, #192]	; (8000e1c <HAL_DMA_Init+0x440>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d004      	beq.n	8000d68 <HAL_DMA_Init+0x38c>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <HAL_DMA_Init+0x444>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d101      	bne.n	8000d6c <HAL_DMA_Init+0x390>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <HAL_DMA_Init+0x392>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8094 	beq.w	8000e9c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_DMA_Init+0x428>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d021      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <HAL_DMA_Init+0x42c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d01c      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <HAL_DMA_Init+0x430>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d017      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <HAL_DMA_Init+0x434>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d012      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <HAL_DMA_Init+0x438>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <HAL_DMA_Init+0x43c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d008      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_DMA_Init+0x440>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d003      	beq.n	8000dc2 <HAL_DMA_Init+0x3e6>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_DMA_Init+0x444>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_DMA_Init+0x448>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2b40      	cmp	r3, #64	; 0x40
 8000dea:	d01d      	beq.n	8000e28 <HAL_DMA_Init+0x44c>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b80      	cmp	r3, #128	; 0x80
 8000df2:	d102      	bne.n	8000dfa <HAL_DMA_Init+0x41e>
 8000df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000df8:	e017      	b.n	8000e2a <HAL_DMA_Init+0x44e>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e015      	b.n	8000e2a <HAL_DMA_Init+0x44e>
 8000dfe:	bf00      	nop
 8000e00:	fe10803f 	.word	0xfe10803f
 8000e04:	58025408 	.word	0x58025408
 8000e08:	5802541c 	.word	0x5802541c
 8000e0c:	58025430 	.word	0x58025430
 8000e10:	58025444 	.word	0x58025444
 8000e14:	58025458 	.word	0x58025458
 8000e18:	5802546c 	.word	0x5802546c
 8000e1c:	58025480 	.word	0x58025480
 8000e20:	58025494 	.word	0x58025494
 8000e24:	fffe000f 	.word	0xfffe000f
 8000e28:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68d2      	ldr	r2, [r2, #12]
 8000e2e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000e58:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b6e      	ldr	r3, [pc, #440]	; (8001028 <HAL_DMA_Init+0x64c>)
 8000e70:	4413      	add	r3, r2
 8000e72:	4a6e      	ldr	r2, [pc, #440]	; (800102c <HAL_DMA_Init+0x650>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	009a      	lsls	r2, r3, #2
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f001 fc51 	bl	8002728 <DMA_CalcBaseAndBitshift>
 8000e86:	4603      	mov	r3, r0
 8000e88:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	2201      	movs	r2, #1
 8000e94:	409a      	lsls	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	e008      	b.n	8000eae <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0b7      	b.n	800101e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a5f      	ldr	r2, [pc, #380]	; (8001030 <HAL_DMA_Init+0x654>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d072      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a5d      	ldr	r2, [pc, #372]	; (8001034 <HAL_DMA_Init+0x658>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d06d      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a5c      	ldr	r2, [pc, #368]	; (8001038 <HAL_DMA_Init+0x65c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d068      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a5a      	ldr	r2, [pc, #360]	; (800103c <HAL_DMA_Init+0x660>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d063      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a59      	ldr	r2, [pc, #356]	; (8001040 <HAL_DMA_Init+0x664>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d05e      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a57      	ldr	r2, [pc, #348]	; (8001044 <HAL_DMA_Init+0x668>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d059      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a56      	ldr	r2, [pc, #344]	; (8001048 <HAL_DMA_Init+0x66c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d054      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a54      	ldr	r2, [pc, #336]	; (800104c <HAL_DMA_Init+0x670>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d04f      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a53      	ldr	r2, [pc, #332]	; (8001050 <HAL_DMA_Init+0x674>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d04a      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a51      	ldr	r2, [pc, #324]	; (8001054 <HAL_DMA_Init+0x678>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d045      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a50      	ldr	r2, [pc, #320]	; (8001058 <HAL_DMA_Init+0x67c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d040      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_DMA_Init+0x680>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d03b      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <HAL_DMA_Init+0x684>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d036      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a4b      	ldr	r2, [pc, #300]	; (8001064 <HAL_DMA_Init+0x688>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d031      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a4a      	ldr	r2, [pc, #296]	; (8001068 <HAL_DMA_Init+0x68c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d02c      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_DMA_Init+0x690>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d027      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a47      	ldr	r2, [pc, #284]	; (8001070 <HAL_DMA_Init+0x694>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d022      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a45      	ldr	r2, [pc, #276]	; (8001074 <HAL_DMA_Init+0x698>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01d      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a44      	ldr	r2, [pc, #272]	; (8001078 <HAL_DMA_Init+0x69c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d018      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a42      	ldr	r2, [pc, #264]	; (800107c <HAL_DMA_Init+0x6a0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a41      	ldr	r2, [pc, #260]	; (8001080 <HAL_DMA_Init+0x6a4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d00e      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a3f      	ldr	r2, [pc, #252]	; (8001084 <HAL_DMA_Init+0x6a8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d009      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a3e      	ldr	r2, [pc, #248]	; (8001088 <HAL_DMA_Init+0x6ac>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d004      	beq.n	8000f9e <HAL_DMA_Init+0x5c2>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a3c      	ldr	r2, [pc, #240]	; (800108c <HAL_DMA_Init+0x6b0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_DMA_Init+0x5c6>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_DMA_Init+0x5c8>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d032      	beq.n	800100e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f001 fceb 	bl	8002984 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b80      	cmp	r3, #128	; 0x80
 8000fb4:	d102      	bne.n	8000fbc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000fd0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d010      	beq.n	8000ffc <HAL_DMA_Init+0x620>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d80c      	bhi.n	8000ffc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 fd68 	bl	8002ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	e008      	b.n	800100e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	a7fdabf8 	.word	0xa7fdabf8
 800102c:	cccccccd 	.word	0xcccccccd
 8001030:	40020010 	.word	0x40020010
 8001034:	40020028 	.word	0x40020028
 8001038:	40020040 	.word	0x40020040
 800103c:	40020058 	.word	0x40020058
 8001040:	40020070 	.word	0x40020070
 8001044:	40020088 	.word	0x40020088
 8001048:	400200a0 	.word	0x400200a0
 800104c:	400200b8 	.word	0x400200b8
 8001050:	40020410 	.word	0x40020410
 8001054:	40020428 	.word	0x40020428
 8001058:	40020440 	.word	0x40020440
 800105c:	40020458 	.word	0x40020458
 8001060:	40020470 	.word	0x40020470
 8001064:	40020488 	.word	0x40020488
 8001068:	400204a0 	.word	0x400204a0
 800106c:	400204b8 	.word	0x400204b8
 8001070:	58025408 	.word	0x58025408
 8001074:	5802541c 	.word	0x5802541c
 8001078:	58025430 	.word	0x58025430
 800107c:	58025444 	.word	0x58025444
 8001080:	58025458 	.word	0x58025458
 8001084:	5802546c 	.word	0x5802546c
 8001088:	58025480 	.word	0x58025480
 800108c:	58025494 	.word	0x58025494

08001090 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e226      	b.n	80014fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_DMA_Start_IT+0x2a>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e21f      	b.n	80014fa <HAL_DMA_Start_IT+0x46a>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	f040 820a 	bne.w	80014e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a68      	ldr	r2, [pc, #416]	; (8001284 <HAL_DMA_Start_IT+0x1f4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d04a      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a66      	ldr	r2, [pc, #408]	; (8001288 <HAL_DMA_Start_IT+0x1f8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d045      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a65      	ldr	r2, [pc, #404]	; (800128c <HAL_DMA_Start_IT+0x1fc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d040      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a63      	ldr	r2, [pc, #396]	; (8001290 <HAL_DMA_Start_IT+0x200>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d03b      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a62      	ldr	r2, [pc, #392]	; (8001294 <HAL_DMA_Start_IT+0x204>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d036      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a60      	ldr	r2, [pc, #384]	; (8001298 <HAL_DMA_Start_IT+0x208>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d031      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a5f      	ldr	r2, [pc, #380]	; (800129c <HAL_DMA_Start_IT+0x20c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d02c      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a5d      	ldr	r2, [pc, #372]	; (80012a0 <HAL_DMA_Start_IT+0x210>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d027      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a5c      	ldr	r2, [pc, #368]	; (80012a4 <HAL_DMA_Start_IT+0x214>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d022      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a5a      	ldr	r2, [pc, #360]	; (80012a8 <HAL_DMA_Start_IT+0x218>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01d      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a59      	ldr	r2, [pc, #356]	; (80012ac <HAL_DMA_Start_IT+0x21c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d018      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a57      	ldr	r2, [pc, #348]	; (80012b0 <HAL_DMA_Start_IT+0x220>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_DMA_Start_IT+0x224>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d00e      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <HAL_DMA_Start_IT+0x228>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d009      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a53      	ldr	r2, [pc, #332]	; (80012bc <HAL_DMA_Start_IT+0x22c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d004      	beq.n	800117e <HAL_DMA_Start_IT+0xee>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <HAL_DMA_Start_IT+0x230>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d108      	bne.n	8001190 <HAL_DMA_Start_IT+0x100>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_DMA_Start_IT+0x110>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f001 f912 	bl	80023d0 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a34      	ldr	r2, [pc, #208]	; (8001284 <HAL_DMA_Start_IT+0x1f4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d04a      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a33      	ldr	r2, [pc, #204]	; (8001288 <HAL_DMA_Start_IT+0x1f8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d045      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a31      	ldr	r2, [pc, #196]	; (800128c <HAL_DMA_Start_IT+0x1fc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d040      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a30      	ldr	r2, [pc, #192]	; (8001290 <HAL_DMA_Start_IT+0x200>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d03b      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <HAL_DMA_Start_IT+0x204>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d036      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2d      	ldr	r2, [pc, #180]	; (8001298 <HAL_DMA_Start_IT+0x208>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d031      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a2b      	ldr	r2, [pc, #172]	; (800129c <HAL_DMA_Start_IT+0x20c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d02c      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <HAL_DMA_Start_IT+0x210>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d027      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <HAL_DMA_Start_IT+0x214>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d022      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <HAL_DMA_Start_IT+0x218>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d01d      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a25      	ldr	r2, [pc, #148]	; (80012ac <HAL_DMA_Start_IT+0x21c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d018      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_DMA_Start_IT+0x220>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d013      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <HAL_DMA_Start_IT+0x224>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00e      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <HAL_DMA_Start_IT+0x228>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d009      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <HAL_DMA_Start_IT+0x22c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d004      	beq.n	800124c <HAL_DMA_Start_IT+0x1bc>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_DMA_Start_IT+0x230>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_DMA_Start_IT+0x1c0>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <HAL_DMA_Start_IT+0x1c2>
 8001250:	2300      	movs	r3, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d036      	beq.n	80012c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 021e 	bic.w	r2, r3, #30
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0216 	orr.w	r2, r2, #22
 8001268:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03e      	beq.n	80012f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0208 	orr.w	r2, r2, #8
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e035      	b.n	80012f0 <HAL_DMA_Start_IT+0x260>
 8001284:	40020010 	.word	0x40020010
 8001288:	40020028 	.word	0x40020028
 800128c:	40020040 	.word	0x40020040
 8001290:	40020058 	.word	0x40020058
 8001294:	40020070 	.word	0x40020070
 8001298:	40020088 	.word	0x40020088
 800129c:	400200a0 	.word	0x400200a0
 80012a0:	400200b8 	.word	0x400200b8
 80012a4:	40020410 	.word	0x40020410
 80012a8:	40020428 	.word	0x40020428
 80012ac:	40020440 	.word	0x40020440
 80012b0:	40020458 	.word	0x40020458
 80012b4:	40020470 	.word	0x40020470
 80012b8:	40020488 	.word	0x40020488
 80012bc:	400204a0 	.word	0x400204a0
 80012c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 020e 	bic.w	r2, r3, #14
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 020a 	orr.w	r2, r2, #10
 80012d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d007      	beq.n	80012f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0204 	orr.w	r2, r2, #4
 80012ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a83      	ldr	r2, [pc, #524]	; (8001504 <HAL_DMA_Start_IT+0x474>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d072      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a82      	ldr	r2, [pc, #520]	; (8001508 <HAL_DMA_Start_IT+0x478>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d06d      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a80      	ldr	r2, [pc, #512]	; (800150c <HAL_DMA_Start_IT+0x47c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d068      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a7f      	ldr	r2, [pc, #508]	; (8001510 <HAL_DMA_Start_IT+0x480>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d063      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a7d      	ldr	r2, [pc, #500]	; (8001514 <HAL_DMA_Start_IT+0x484>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d05e      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7c      	ldr	r2, [pc, #496]	; (8001518 <HAL_DMA_Start_IT+0x488>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d059      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a7a      	ldr	r2, [pc, #488]	; (800151c <HAL_DMA_Start_IT+0x48c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d054      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a79      	ldr	r2, [pc, #484]	; (8001520 <HAL_DMA_Start_IT+0x490>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d04f      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a77      	ldr	r2, [pc, #476]	; (8001524 <HAL_DMA_Start_IT+0x494>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d04a      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a76      	ldr	r2, [pc, #472]	; (8001528 <HAL_DMA_Start_IT+0x498>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d045      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a74      	ldr	r2, [pc, #464]	; (800152c <HAL_DMA_Start_IT+0x49c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d040      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a73      	ldr	r2, [pc, #460]	; (8001530 <HAL_DMA_Start_IT+0x4a0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d03b      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a71      	ldr	r2, [pc, #452]	; (8001534 <HAL_DMA_Start_IT+0x4a4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d036      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a70      	ldr	r2, [pc, #448]	; (8001538 <HAL_DMA_Start_IT+0x4a8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d031      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_DMA_Start_IT+0x4ac>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d02c      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a6d      	ldr	r2, [pc, #436]	; (8001540 <HAL_DMA_Start_IT+0x4b0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d027      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a6b      	ldr	r2, [pc, #428]	; (8001544 <HAL_DMA_Start_IT+0x4b4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d022      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6a      	ldr	r2, [pc, #424]	; (8001548 <HAL_DMA_Start_IT+0x4b8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d01d      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a68      	ldr	r2, [pc, #416]	; (800154c <HAL_DMA_Start_IT+0x4bc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d018      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a67      	ldr	r2, [pc, #412]	; (8001550 <HAL_DMA_Start_IT+0x4c0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d013      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_DMA_Start_IT+0x4c4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00e      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a64      	ldr	r2, [pc, #400]	; (8001558 <HAL_DMA_Start_IT+0x4c8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d009      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a62      	ldr	r2, [pc, #392]	; (800155c <HAL_DMA_Start_IT+0x4cc>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d004      	beq.n	80013e0 <HAL_DMA_Start_IT+0x350>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a61      	ldr	r2, [pc, #388]	; (8001560 <HAL_DMA_Start_IT+0x4d0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_DMA_Start_IT+0x354>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_DMA_Start_IT+0x356>
 80013e4:	2300      	movs	r3, #0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d01a      	beq.n	8001420 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001406:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800141a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800141e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a37      	ldr	r2, [pc, #220]	; (8001504 <HAL_DMA_Start_IT+0x474>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d04a      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a36      	ldr	r2, [pc, #216]	; (8001508 <HAL_DMA_Start_IT+0x478>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d045      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a34      	ldr	r2, [pc, #208]	; (800150c <HAL_DMA_Start_IT+0x47c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d040      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a33      	ldr	r2, [pc, #204]	; (8001510 <HAL_DMA_Start_IT+0x480>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d03b      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a31      	ldr	r2, [pc, #196]	; (8001514 <HAL_DMA_Start_IT+0x484>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d036      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a30      	ldr	r2, [pc, #192]	; (8001518 <HAL_DMA_Start_IT+0x488>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a2e      	ldr	r2, [pc, #184]	; (800151c <HAL_DMA_Start_IT+0x48c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d02c      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <HAL_DMA_Start_IT+0x490>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d027      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <HAL_DMA_Start_IT+0x494>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d022      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <HAL_DMA_Start_IT+0x498>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d01d      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a28      	ldr	r2, [pc, #160]	; (800152c <HAL_DMA_Start_IT+0x49c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d018      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_DMA_Start_IT+0x4a0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d013      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a25      	ldr	r2, [pc, #148]	; (8001534 <HAL_DMA_Start_IT+0x4a4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00e      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a24      	ldr	r2, [pc, #144]	; (8001538 <HAL_DMA_Start_IT+0x4a8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d009      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_DMA_Start_IT+0x4ac>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_Start_IT+0x430>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a21      	ldr	r2, [pc, #132]	; (8001540 <HAL_DMA_Start_IT+0x4b0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d108      	bne.n	80014d2 <HAL_DMA_Start_IT+0x442>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e012      	b.n	80014f8 <HAL_DMA_Start_IT+0x468>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e009      	b.n	80014f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40020010 	.word	0x40020010
 8001508:	40020028 	.word	0x40020028
 800150c:	40020040 	.word	0x40020040
 8001510:	40020058 	.word	0x40020058
 8001514:	40020070 	.word	0x40020070
 8001518:	40020088 	.word	0x40020088
 800151c:	400200a0 	.word	0x400200a0
 8001520:	400200b8 	.word	0x400200b8
 8001524:	40020410 	.word	0x40020410
 8001528:	40020428 	.word	0x40020428
 800152c:	40020440 	.word	0x40020440
 8001530:	40020458 	.word	0x40020458
 8001534:	40020470 	.word	0x40020470
 8001538:	40020488 	.word	0x40020488
 800153c:	400204a0 	.word	0x400204a0
 8001540:	400204b8 	.word	0x400204b8
 8001544:	58025408 	.word	0x58025408
 8001548:	5802541c 	.word	0x5802541c
 800154c:	58025430 	.word	0x58025430
 8001550:	58025444 	.word	0x58025444
 8001554:	58025458 	.word	0x58025458
 8001558:	5802546c 	.word	0x5802546c
 800155c:	58025480 	.word	0x58025480
 8001560:	58025494 	.word	0x58025494

08001564 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001570:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_DMA_IRQHandler+0x1ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a67      	ldr	r2, [pc, #412]	; (8001714 <HAL_DMA_IRQHandler+0x1b0>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a9b      	lsrs	r3, r3, #10
 800157c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5f      	ldr	r2, [pc, #380]	; (8001718 <HAL_DMA_IRQHandler+0x1b4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d04a      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a5d      	ldr	r2, [pc, #372]	; (800171c <HAL_DMA_IRQHandler+0x1b8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d045      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5c      	ldr	r2, [pc, #368]	; (8001720 <HAL_DMA_IRQHandler+0x1bc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d040      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a5a      	ldr	r2, [pc, #360]	; (8001724 <HAL_DMA_IRQHandler+0x1c0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d03b      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a59      	ldr	r2, [pc, #356]	; (8001728 <HAL_DMA_IRQHandler+0x1c4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d036      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a57      	ldr	r2, [pc, #348]	; (800172c <HAL_DMA_IRQHandler+0x1c8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d031      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a56      	ldr	r2, [pc, #344]	; (8001730 <HAL_DMA_IRQHandler+0x1cc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d02c      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a54      	ldr	r2, [pc, #336]	; (8001734 <HAL_DMA_IRQHandler+0x1d0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d027      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a53      	ldr	r2, [pc, #332]	; (8001738 <HAL_DMA_IRQHandler+0x1d4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d022      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <HAL_DMA_IRQHandler+0x1d8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01d      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a50      	ldr	r2, [pc, #320]	; (8001740 <HAL_DMA_IRQHandler+0x1dc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d018      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a4e      	ldr	r2, [pc, #312]	; (8001744 <HAL_DMA_IRQHandler+0x1e0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a4d      	ldr	r2, [pc, #308]	; (8001748 <HAL_DMA_IRQHandler+0x1e4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d00e      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_DMA_IRQHandler+0x1e8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d009      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <HAL_DMA_IRQHandler+0x1ec>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d004      	beq.n	8001636 <HAL_DMA_IRQHandler+0xd2>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a48      	ldr	r2, [pc, #288]	; (8001754 <HAL_DMA_IRQHandler+0x1f0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_DMA_IRQHandler+0xd6>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_DMA_IRQHandler+0xd8>
 800163a:	2300      	movs	r3, #0
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 842b 	beq.w	8001e98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2208      	movs	r2, #8
 800164c:	409a      	lsls	r2, r3
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80a2 	beq.w	800179c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a2e      	ldr	r2, [pc, #184]	; (8001718 <HAL_DMA_IRQHandler+0x1b4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d04a      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a2d      	ldr	r2, [pc, #180]	; (800171c <HAL_DMA_IRQHandler+0x1b8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d045      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2b      	ldr	r2, [pc, #172]	; (8001720 <HAL_DMA_IRQHandler+0x1bc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d040      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <HAL_DMA_IRQHandler+0x1c0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d03b      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <HAL_DMA_IRQHandler+0x1c4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d036      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a27      	ldr	r2, [pc, #156]	; (800172c <HAL_DMA_IRQHandler+0x1c8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d031      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <HAL_DMA_IRQHandler+0x1cc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d02c      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a24      	ldr	r2, [pc, #144]	; (8001734 <HAL_DMA_IRQHandler+0x1d0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d027      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_DMA_IRQHandler+0x1d4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d022      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a21      	ldr	r2, [pc, #132]	; (800173c <HAL_DMA_IRQHandler+0x1d8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d01d      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <HAL_DMA_IRQHandler+0x1dc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d018      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_DMA_IRQHandler+0x1e0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d013      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <HAL_DMA_IRQHandler+0x1e4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00e      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_DMA_IRQHandler+0x1e8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d009      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_DMA_IRQHandler+0x1ec>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d004      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x194>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_DMA_IRQHandler+0x1f0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d12f      	bne.n	8001758 <HAL_DMA_IRQHandler+0x1f4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf14      	ite	ne
 8001706:	2301      	movne	r3, #1
 8001708:	2300      	moveq	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	e02e      	b.n	800176c <HAL_DMA_IRQHandler+0x208>
 800170e:	bf00      	nop
 8001710:	24000408 	.word	0x24000408
 8001714:	1b4e81b5 	.word	0x1b4e81b5
 8001718:	40020010 	.word	0x40020010
 800171c:	40020028 	.word	0x40020028
 8001720:	40020040 	.word	0x40020040
 8001724:	40020058 	.word	0x40020058
 8001728:	40020070 	.word	0x40020070
 800172c:	40020088 	.word	0x40020088
 8001730:	400200a0 	.word	0x400200a0
 8001734:	400200b8 	.word	0x400200b8
 8001738:	40020410 	.word	0x40020410
 800173c:	40020428 	.word	0x40020428
 8001740:	40020440 	.word	0x40020440
 8001744:	40020458 	.word	0x40020458
 8001748:	40020470 	.word	0x40020470
 800174c:	40020488 	.word	0x40020488
 8001750:	400204a0 	.word	0x400204a0
 8001754:	400204b8 	.word	0x400204b8
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d015      	beq.n	800179c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0204 	bic.w	r2, r2, #4
 800177e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	2208      	movs	r2, #8
 800178a:	409a      	lsls	r2, r3
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d06e      	beq.n	8001890 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a69      	ldr	r2, [pc, #420]	; (800195c <HAL_DMA_IRQHandler+0x3f8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04a      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a67      	ldr	r2, [pc, #412]	; (8001960 <HAL_DMA_IRQHandler+0x3fc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d045      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_DMA_IRQHandler+0x400>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d040      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a64      	ldr	r2, [pc, #400]	; (8001968 <HAL_DMA_IRQHandler+0x404>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d03b      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a63      	ldr	r2, [pc, #396]	; (800196c <HAL_DMA_IRQHandler+0x408>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d036      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a61      	ldr	r2, [pc, #388]	; (8001970 <HAL_DMA_IRQHandler+0x40c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a60      	ldr	r2, [pc, #384]	; (8001974 <HAL_DMA_IRQHandler+0x410>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d02c      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <HAL_DMA_IRQHandler+0x414>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d027      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a5d      	ldr	r2, [pc, #372]	; (800197c <HAL_DMA_IRQHandler+0x418>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d022      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a5b      	ldr	r2, [pc, #364]	; (8001980 <HAL_DMA_IRQHandler+0x41c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01d      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a5a      	ldr	r2, [pc, #360]	; (8001984 <HAL_DMA_IRQHandler+0x420>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d018      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a58      	ldr	r2, [pc, #352]	; (8001988 <HAL_DMA_IRQHandler+0x424>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a57      	ldr	r2, [pc, #348]	; (800198c <HAL_DMA_IRQHandler+0x428>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00e      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a55      	ldr	r2, [pc, #340]	; (8001990 <HAL_DMA_IRQHandler+0x42c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a54      	ldr	r2, [pc, #336]	; (8001994 <HAL_DMA_IRQHandler+0x430>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2ee>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_DMA_IRQHandler+0x434>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d10a      	bne.n	8001868 <HAL_DMA_IRQHandler+0x304>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf14      	ite	ne
 8001860:	2301      	movne	r3, #1
 8001862:	2300      	moveq	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	e003      	b.n	8001870 <HAL_DMA_IRQHandler+0x30c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2300      	movs	r3, #0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00d      	beq.n	8001890 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	2201      	movs	r2, #1
 800187e:	409a      	lsls	r2, r3
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001888:	f043 0202 	orr.w	r2, r3, #2
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2204      	movs	r2, #4
 800189a:	409a      	lsls	r2, r3
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 808f 	beq.w	80019c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2c      	ldr	r2, [pc, #176]	; (800195c <HAL_DMA_IRQHandler+0x3f8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d04a      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2a      	ldr	r2, [pc, #168]	; (8001960 <HAL_DMA_IRQHandler+0x3fc>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d045      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a29      	ldr	r2, [pc, #164]	; (8001964 <HAL_DMA_IRQHandler+0x400>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d040      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <HAL_DMA_IRQHandler+0x404>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d03b      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_DMA_IRQHandler+0x408>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d036      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a24      	ldr	r2, [pc, #144]	; (8001970 <HAL_DMA_IRQHandler+0x40c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d031      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a23      	ldr	r2, [pc, #140]	; (8001974 <HAL_DMA_IRQHandler+0x410>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d02c      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a21      	ldr	r2, [pc, #132]	; (8001978 <HAL_DMA_IRQHandler+0x414>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d027      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <HAL_DMA_IRQHandler+0x418>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d022      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_DMA_IRQHandler+0x41c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01d      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_DMA_IRQHandler+0x420>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d018      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_DMA_IRQHandler+0x424>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1a      	ldr	r2, [pc, #104]	; (800198c <HAL_DMA_IRQHandler+0x428>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00e      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_DMA_IRQHandler+0x42c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d009      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_DMA_IRQHandler+0x430>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d004      	beq.n	8001946 <HAL_DMA_IRQHandler+0x3e2>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_DMA_IRQHandler+0x434>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12a      	bne.n	800199c <HAL_DMA_IRQHandler+0x438>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf14      	ite	ne
 8001954:	2301      	movne	r3, #1
 8001956:	2300      	moveq	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	e023      	b.n	80019a4 <HAL_DMA_IRQHandler+0x440>
 800195c:	40020010 	.word	0x40020010
 8001960:	40020028 	.word	0x40020028
 8001964:	40020040 	.word	0x40020040
 8001968:	40020058 	.word	0x40020058
 800196c:	40020070 	.word	0x40020070
 8001970:	40020088 	.word	0x40020088
 8001974:	400200a0 	.word	0x400200a0
 8001978:	400200b8 	.word	0x400200b8
 800197c:	40020410 	.word	0x40020410
 8001980:	40020428 	.word	0x40020428
 8001984:	40020440 	.word	0x40020440
 8001988:	40020458 	.word	0x40020458
 800198c:	40020470 	.word	0x40020470
 8001990:	40020488 	.word	0x40020488
 8001994:	400204a0 	.word	0x400204a0
 8001998:	400204b8 	.word	0x400204b8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2204      	movs	r2, #4
 80019b2:	409a      	lsls	r2, r3
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	f043 0204 	orr.w	r2, r3, #4
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2210      	movs	r2, #16
 80019ce:	409a      	lsls	r2, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80a6 	beq.w	8001b26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a85      	ldr	r2, [pc, #532]	; (8001bf4 <HAL_DMA_IRQHandler+0x690>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04a      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_DMA_IRQHandler+0x694>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d045      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a82      	ldr	r2, [pc, #520]	; (8001bfc <HAL_DMA_IRQHandler+0x698>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d040      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a80      	ldr	r2, [pc, #512]	; (8001c00 <HAL_DMA_IRQHandler+0x69c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d03b      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7f      	ldr	r2, [pc, #508]	; (8001c04 <HAL_DMA_IRQHandler+0x6a0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d036      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7d      	ldr	r2, [pc, #500]	; (8001c08 <HAL_DMA_IRQHandler+0x6a4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d031      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7c      	ldr	r2, [pc, #496]	; (8001c0c <HAL_DMA_IRQHandler+0x6a8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d02c      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_DMA_IRQHandler+0x6ac>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d027      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a79      	ldr	r2, [pc, #484]	; (8001c14 <HAL_DMA_IRQHandler+0x6b0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d022      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <HAL_DMA_IRQHandler+0x6b4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01d      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a76      	ldr	r2, [pc, #472]	; (8001c1c <HAL_DMA_IRQHandler+0x6b8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d018      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a74      	ldr	r2, [pc, #464]	; (8001c20 <HAL_DMA_IRQHandler+0x6bc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a73      	ldr	r2, [pc, #460]	; (8001c24 <HAL_DMA_IRQHandler+0x6c0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a71      	ldr	r2, [pc, #452]	; (8001c28 <HAL_DMA_IRQHandler+0x6c4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a70      	ldr	r2, [pc, #448]	; (8001c2c <HAL_DMA_IRQHandler+0x6c8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d004      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x516>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_DMA_IRQHandler+0x6cc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10a      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x52c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf14      	ite	ne
 8001a88:	2301      	movne	r3, #1
 8001a8a:	2300      	moveq	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	e009      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x540>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d03e      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d018      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d024      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
 8001ae4:	e01f      	b.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01b      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4798      	blx	r3
 8001af6:	e016      	b.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d107      	bne.n	8001b16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0208 	bic.w	r2, r2, #8
 8001b14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2220      	movs	r2, #32
 8001b30:	409a      	lsls	r2, r3
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8110 	beq.w	8001d5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <HAL_DMA_IRQHandler+0x690>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d04a      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <HAL_DMA_IRQHandler+0x694>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d045      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_DMA_IRQHandler+0x698>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d040      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a28      	ldr	r2, [pc, #160]	; (8001c00 <HAL_DMA_IRQHandler+0x69c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d03b      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <HAL_DMA_IRQHandler+0x6a0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d036      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <HAL_DMA_IRQHandler+0x6a4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d031      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <HAL_DMA_IRQHandler+0x6a8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02c      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_DMA_IRQHandler+0x6ac>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d027      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <HAL_DMA_IRQHandler+0x6b0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_DMA_IRQHandler+0x6b4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01d      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_DMA_IRQHandler+0x6b8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_DMA_IRQHandler+0x6bc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_DMA_IRQHandler+0x6c0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_DMA_IRQHandler+0x6c4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_DMA_IRQHandler+0x6c8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x678>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_DMA_IRQHandler+0x6cc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d12b      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x6d0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	e02a      	b.n	8001c48 <HAL_DMA_IRQHandler+0x6e4>
 8001bf2:	bf00      	nop
 8001bf4:	40020010 	.word	0x40020010
 8001bf8:	40020028 	.word	0x40020028
 8001bfc:	40020040 	.word	0x40020040
 8001c00:	40020058 	.word	0x40020058
 8001c04:	40020070 	.word	0x40020070
 8001c08:	40020088 	.word	0x40020088
 8001c0c:	400200a0 	.word	0x400200a0
 8001c10:	400200b8 	.word	0x400200b8
 8001c14:	40020410 	.word	0x40020410
 8001c18:	40020428 	.word	0x40020428
 8001c1c:	40020440 	.word	0x40020440
 8001c20:	40020458 	.word	0x40020458
 8001c24:	40020470 	.word	0x40020470
 8001c28:	40020488 	.word	0x40020488
 8001c2c:	400204a0 	.word	0x400204a0
 8001c30:	400204b8 	.word	0x400204b8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf14      	ite	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	2300      	moveq	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8087 	beq.w	8001d5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2220      	movs	r2, #32
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d139      	bne.n	8001cde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0216 	bic.w	r2, r2, #22
 8001c78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <HAL_DMA_IRQHandler+0x736>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0208 	bic.w	r2, r2, #8
 8001ca8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	223f      	movs	r2, #63	; 0x3f
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 834a 	beq.w	8002368 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
          }
          return;
 8001cdc:	e344      	b.n	8002368 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d018      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d108      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02c      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e027      	b.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
 8001d1c:	e01e      	b.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0210 	bic.w	r2, r2, #16
 8001d3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8306 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8088 	beq.w	8001e84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a7a      	ldr	r2, [pc, #488]	; (8001f6c <HAL_DMA_IRQHandler+0xa08>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d04a      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a79      	ldr	r2, [pc, #484]	; (8001f70 <HAL_DMA_IRQHandler+0xa0c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d045      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a77      	ldr	r2, [pc, #476]	; (8001f74 <HAL_DMA_IRQHandler+0xa10>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d040      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a76      	ldr	r2, [pc, #472]	; (8001f78 <HAL_DMA_IRQHandler+0xa14>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d03b      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a74      	ldr	r2, [pc, #464]	; (8001f7c <HAL_DMA_IRQHandler+0xa18>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d036      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a73      	ldr	r2, [pc, #460]	; (8001f80 <HAL_DMA_IRQHandler+0xa1c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d031      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a71      	ldr	r2, [pc, #452]	; (8001f84 <HAL_DMA_IRQHandler+0xa20>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d02c      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a70      	ldr	r2, [pc, #448]	; (8001f88 <HAL_DMA_IRQHandler+0xa24>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d027      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_DMA_IRQHandler+0xa28>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d022      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6d      	ldr	r2, [pc, #436]	; (8001f90 <HAL_DMA_IRQHandler+0xa2c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d01d      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a6b      	ldr	r2, [pc, #428]	; (8001f94 <HAL_DMA_IRQHandler+0xa30>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d018      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a6a      	ldr	r2, [pc, #424]	; (8001f98 <HAL_DMA_IRQHandler+0xa34>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a68      	ldr	r2, [pc, #416]	; (8001f9c <HAL_DMA_IRQHandler+0xa38>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00e      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <HAL_DMA_IRQHandler+0xa3c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <HAL_DMA_IRQHandler+0xa40>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x8b8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a64      	ldr	r2, [pc, #400]	; (8001fa8 <HAL_DMA_IRQHandler+0xa44>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d108      	bne.n	8001e2e <HAL_DMA_IRQHandler+0x8ca>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e007      	b.n	8001e3e <HAL_DMA_IRQHandler+0x8da>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d307      	bcc.n	8001e5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f2      	bne.n	8001e3e <HAL_DMA_IRQHandler+0x8da>
 8001e58:	e000      	b.n	8001e5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001e5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001e72:	e003      	b.n	8001e7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8272 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
 8001e96:	e26c      	b.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a43      	ldr	r2, [pc, #268]	; (8001fac <HAL_DMA_IRQHandler+0xa48>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d022      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a42      	ldr	r2, [pc, #264]	; (8001fb0 <HAL_DMA_IRQHandler+0xa4c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d01d      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <HAL_DMA_IRQHandler+0xa50>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d018      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a3f      	ldr	r2, [pc, #252]	; (8001fb8 <HAL_DMA_IRQHandler+0xa54>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3d      	ldr	r2, [pc, #244]	; (8001fbc <HAL_DMA_IRQHandler+0xa58>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <HAL_DMA_IRQHandler+0xa5c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a3a      	ldr	r2, [pc, #232]	; (8001fc4 <HAL_DMA_IRQHandler+0xa60>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x984>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a39      	ldr	r2, [pc, #228]	; (8001fc8 <HAL_DMA_IRQHandler+0xa64>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_DMA_IRQHandler+0x988>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_DMA_IRQHandler+0x98a>
 8001eec:	2300      	movs	r3, #0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 823f 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2204      	movs	r2, #4
 8001f06:	409a      	lsls	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80cd 	beq.w	80020ac <HAL_DMA_IRQHandler+0xb48>
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80c7 	beq.w	80020ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2204      	movs	r2, #4
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d049      	beq.n	8001fcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8210 	beq.w	800236c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f54:	e20a      	b.n	800236c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8206 	beq.w	800236c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f68:	e200      	b.n	800236c <HAL_DMA_IRQHandler+0xe08>
 8001f6a:	bf00      	nop
 8001f6c:	40020010 	.word	0x40020010
 8001f70:	40020028 	.word	0x40020028
 8001f74:	40020040 	.word	0x40020040
 8001f78:	40020058 	.word	0x40020058
 8001f7c:	40020070 	.word	0x40020070
 8001f80:	40020088 	.word	0x40020088
 8001f84:	400200a0 	.word	0x400200a0
 8001f88:	400200b8 	.word	0x400200b8
 8001f8c:	40020410 	.word	0x40020410
 8001f90:	40020428 	.word	0x40020428
 8001f94:	40020440 	.word	0x40020440
 8001f98:	40020458 	.word	0x40020458
 8001f9c:	40020470 	.word	0x40020470
 8001fa0:	40020488 	.word	0x40020488
 8001fa4:	400204a0 	.word	0x400204a0
 8001fa8:	400204b8 	.word	0x400204b8
 8001fac:	58025408 	.word	0x58025408
 8001fb0:	5802541c 	.word	0x5802541c
 8001fb4:	58025430 	.word	0x58025430
 8001fb8:	58025444 	.word	0x58025444
 8001fbc:	58025458 	.word	0x58025458
 8001fc0:	5802546c 	.word	0x5802546c
 8001fc4:	58025480 	.word	0x58025480
 8001fc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d160      	bne.n	8002098 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a8c      	ldr	r2, [pc, #560]	; (800220c <HAL_DMA_IRQHandler+0xca8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d04a      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a8a      	ldr	r2, [pc, #552]	; (8002210 <HAL_DMA_IRQHandler+0xcac>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d045      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a89      	ldr	r2, [pc, #548]	; (8002214 <HAL_DMA_IRQHandler+0xcb0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d040      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a87      	ldr	r2, [pc, #540]	; (8002218 <HAL_DMA_IRQHandler+0xcb4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d03b      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a86      	ldr	r2, [pc, #536]	; (800221c <HAL_DMA_IRQHandler+0xcb8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d036      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a84      	ldr	r2, [pc, #528]	; (8002220 <HAL_DMA_IRQHandler+0xcbc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d031      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a83      	ldr	r2, [pc, #524]	; (8002224 <HAL_DMA_IRQHandler+0xcc0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d02c      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a81      	ldr	r2, [pc, #516]	; (8002228 <HAL_DMA_IRQHandler+0xcc4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d027      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a80      	ldr	r2, [pc, #512]	; (800222c <HAL_DMA_IRQHandler+0xcc8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a7e      	ldr	r2, [pc, #504]	; (8002230 <HAL_DMA_IRQHandler+0xccc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01d      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a7d      	ldr	r2, [pc, #500]	; (8002234 <HAL_DMA_IRQHandler+0xcd0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d018      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a7b      	ldr	r2, [pc, #492]	; (8002238 <HAL_DMA_IRQHandler+0xcd4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7a      	ldr	r2, [pc, #488]	; (800223c <HAL_DMA_IRQHandler+0xcd8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00e      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a78      	ldr	r2, [pc, #480]	; (8002240 <HAL_DMA_IRQHandler+0xcdc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d009      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a77      	ldr	r2, [pc, #476]	; (8002244 <HAL_DMA_IRQHandler+0xce0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_IRQHandler+0xb12>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_DMA_IRQHandler+0xce4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <HAL_DMA_IRQHandler+0xb24>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0208 	bic.w	r2, r2, #8
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e007      	b.n	8002098 <HAL_DMA_IRQHandler+0xb34>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8165 	beq.w	800236c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80020aa:	e15f      	b.n	800236c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2202      	movs	r2, #2
 80020b6:	409a      	lsls	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80c5 	beq.w	800224c <HAL_DMA_IRQHandler+0xce8>
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80bf 	beq.w	800224c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2202      	movs	r2, #2
 80020d8:	409a      	lsls	r2, r3
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d018      	beq.n	800211a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 813a 	beq.w	8002370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002104:	e134      	b.n	8002370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8130 	beq.w	8002370 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002118:	e12a      	b.n	8002370 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d168      	bne.n	80021f6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a38      	ldr	r2, [pc, #224]	; (800220c <HAL_DMA_IRQHandler+0xca8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d04a      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a37      	ldr	r2, [pc, #220]	; (8002210 <HAL_DMA_IRQHandler+0xcac>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d045      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a35      	ldr	r2, [pc, #212]	; (8002214 <HAL_DMA_IRQHandler+0xcb0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d040      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_DMA_IRQHandler+0xcb4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d03b      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_DMA_IRQHandler+0xcb8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d036      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a31      	ldr	r2, [pc, #196]	; (8002220 <HAL_DMA_IRQHandler+0xcbc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d031      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2f      	ldr	r2, [pc, #188]	; (8002224 <HAL_DMA_IRQHandler+0xcc0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02c      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <HAL_DMA_IRQHandler+0xcc4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d027      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2c      	ldr	r2, [pc, #176]	; (800222c <HAL_DMA_IRQHandler+0xcc8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d022      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <HAL_DMA_IRQHandler+0xccc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d01d      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a29      	ldr	r2, [pc, #164]	; (8002234 <HAL_DMA_IRQHandler+0xcd0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d018      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a28      	ldr	r2, [pc, #160]	; (8002238 <HAL_DMA_IRQHandler+0xcd4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <HAL_DMA_IRQHandler+0xcd8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00e      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a25      	ldr	r2, [pc, #148]	; (8002240 <HAL_DMA_IRQHandler+0xcdc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a23      	ldr	r2, [pc, #140]	; (8002244 <HAL_DMA_IRQHandler+0xce0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xc60>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_DMA_IRQHandler+0xce4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d108      	bne.n	80021d6 <HAL_DMA_IRQHandler+0xc72>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0214 	bic.w	r2, r2, #20
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e007      	b.n	80021e6 <HAL_DMA_IRQHandler+0xc82>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 020a 	bic.w	r2, r2, #10
 80021e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80b8 	beq.w	8002370 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002208:	e0b2      	b.n	8002370 <HAL_DMA_IRQHandler+0xe0c>
 800220a:	bf00      	nop
 800220c:	40020010 	.word	0x40020010
 8002210:	40020028 	.word	0x40020028
 8002214:	40020040 	.word	0x40020040
 8002218:	40020058 	.word	0x40020058
 800221c:	40020070 	.word	0x40020070
 8002220:	40020088 	.word	0x40020088
 8002224:	400200a0 	.word	0x400200a0
 8002228:	400200b8 	.word	0x400200b8
 800222c:	40020410 	.word	0x40020410
 8002230:	40020428 	.word	0x40020428
 8002234:	40020440 	.word	0x40020440
 8002238:	40020458 	.word	0x40020458
 800223c:	40020470 	.word	0x40020470
 8002240:	40020488 	.word	0x40020488
 8002244:	400204a0 	.word	0x400204a0
 8002248:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2208      	movs	r2, #8
 8002256:	409a      	lsls	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8088 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8082 	beq.w	8002372 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a41      	ldr	r2, [pc, #260]	; (8002378 <HAL_DMA_IRQHandler+0xe14>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d04a      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a3f      	ldr	r2, [pc, #252]	; (800237c <HAL_DMA_IRQHandler+0xe18>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d045      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a3e      	ldr	r2, [pc, #248]	; (8002380 <HAL_DMA_IRQHandler+0xe1c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d040      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3c      	ldr	r2, [pc, #240]	; (8002384 <HAL_DMA_IRQHandler+0xe20>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d03b      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a3b      	ldr	r2, [pc, #236]	; (8002388 <HAL_DMA_IRQHandler+0xe24>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d036      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a39      	ldr	r2, [pc, #228]	; (800238c <HAL_DMA_IRQHandler+0xe28>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d031      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a38      	ldr	r2, [pc, #224]	; (8002390 <HAL_DMA_IRQHandler+0xe2c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d02c      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a36      	ldr	r2, [pc, #216]	; (8002394 <HAL_DMA_IRQHandler+0xe30>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d027      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a35      	ldr	r2, [pc, #212]	; (8002398 <HAL_DMA_IRQHandler+0xe34>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d022      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a33      	ldr	r2, [pc, #204]	; (800239c <HAL_DMA_IRQHandler+0xe38>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01d      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a32      	ldr	r2, [pc, #200]	; (80023a0 <HAL_DMA_IRQHandler+0xe3c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d018      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <HAL_DMA_IRQHandler+0xe40>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_DMA_IRQHandler+0xe44>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00e      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <HAL_DMA_IRQHandler+0xe48>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d009      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2c      	ldr	r2, [pc, #176]	; (80023b0 <HAL_DMA_IRQHandler+0xe4c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_DMA_IRQHandler+0xdaa>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2a      	ldr	r2, [pc, #168]	; (80023b4 <HAL_DMA_IRQHandler+0xe50>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d108      	bne.n	8002320 <HAL_DMA_IRQHandler+0xdbc>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 021c 	bic.w	r2, r2, #28
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e007      	b.n	8002330 <HAL_DMA_IRQHandler+0xdcc>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 020e 	bic.w	r2, r2, #14
 800232e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2201      	movs	r2, #1
 800233a:	409a      	lsls	r2, r3
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
 8002366:	e004      	b.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002368:	bf00      	nop
 800236a:	e002      	b.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800236c:	bf00      	nop
 800236e:	e000      	b.n	8002372 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002370:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40020010 	.word	0x40020010
 800237c:	40020028 	.word	0x40020028
 8002380:	40020040 	.word	0x40020040
 8002384:	40020058 	.word	0x40020058
 8002388:	40020070 	.word	0x40020070
 800238c:	40020088 	.word	0x40020088
 8002390:	400200a0 	.word	0x400200a0
 8002394:	400200b8 	.word	0x400200b8
 8002398:	40020410 	.word	0x40020410
 800239c:	40020428 	.word	0x40020428
 80023a0:	40020440 	.word	0x40020440
 80023a4:	40020458 	.word	0x40020458
 80023a8:	40020470 	.word	0x40020470
 80023ac:	40020488 	.word	0x40020488
 80023b0:	400204a0 	.word	0x400204a0
 80023b4:	400204b8 	.word	0x400204b8

080023b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a84      	ldr	r2, [pc, #528]	; (8002600 <DMA_SetConfig+0x230>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d072      	beq.n	80024da <DMA_SetConfig+0x10a>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a82      	ldr	r2, [pc, #520]	; (8002604 <DMA_SetConfig+0x234>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d06d      	beq.n	80024da <DMA_SetConfig+0x10a>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a81      	ldr	r2, [pc, #516]	; (8002608 <DMA_SetConfig+0x238>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d068      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a7f      	ldr	r2, [pc, #508]	; (800260c <DMA_SetConfig+0x23c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d063      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7e      	ldr	r2, [pc, #504]	; (8002610 <DMA_SetConfig+0x240>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d05e      	beq.n	80024da <DMA_SetConfig+0x10a>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a7c      	ldr	r2, [pc, #496]	; (8002614 <DMA_SetConfig+0x244>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d059      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a7b      	ldr	r2, [pc, #492]	; (8002618 <DMA_SetConfig+0x248>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d054      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a79      	ldr	r2, [pc, #484]	; (800261c <DMA_SetConfig+0x24c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d04f      	beq.n	80024da <DMA_SetConfig+0x10a>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a78      	ldr	r2, [pc, #480]	; (8002620 <DMA_SetConfig+0x250>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d04a      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a76      	ldr	r2, [pc, #472]	; (8002624 <DMA_SetConfig+0x254>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d045      	beq.n	80024da <DMA_SetConfig+0x10a>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a75      	ldr	r2, [pc, #468]	; (8002628 <DMA_SetConfig+0x258>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d040      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a73      	ldr	r2, [pc, #460]	; (800262c <DMA_SetConfig+0x25c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d03b      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a72      	ldr	r2, [pc, #456]	; (8002630 <DMA_SetConfig+0x260>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d036      	beq.n	80024da <DMA_SetConfig+0x10a>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a70      	ldr	r2, [pc, #448]	; (8002634 <DMA_SetConfig+0x264>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d031      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6f      	ldr	r2, [pc, #444]	; (8002638 <DMA_SetConfig+0x268>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d02c      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6d      	ldr	r2, [pc, #436]	; (800263c <DMA_SetConfig+0x26c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d027      	beq.n	80024da <DMA_SetConfig+0x10a>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6c      	ldr	r2, [pc, #432]	; (8002640 <DMA_SetConfig+0x270>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d022      	beq.n	80024da <DMA_SetConfig+0x10a>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6a      	ldr	r2, [pc, #424]	; (8002644 <DMA_SetConfig+0x274>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01d      	beq.n	80024da <DMA_SetConfig+0x10a>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a69      	ldr	r2, [pc, #420]	; (8002648 <DMA_SetConfig+0x278>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d018      	beq.n	80024da <DMA_SetConfig+0x10a>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a67      	ldr	r2, [pc, #412]	; (800264c <DMA_SetConfig+0x27c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <DMA_SetConfig+0x10a>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a66      	ldr	r2, [pc, #408]	; (8002650 <DMA_SetConfig+0x280>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00e      	beq.n	80024da <DMA_SetConfig+0x10a>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a64      	ldr	r2, [pc, #400]	; (8002654 <DMA_SetConfig+0x284>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d009      	beq.n	80024da <DMA_SetConfig+0x10a>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a63      	ldr	r2, [pc, #396]	; (8002658 <DMA_SetConfig+0x288>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d004      	beq.n	80024da <DMA_SetConfig+0x10a>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a61      	ldr	r2, [pc, #388]	; (800265c <DMA_SetConfig+0x28c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <DMA_SetConfig+0x10e>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <DMA_SetConfig+0x110>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00d      	beq.n	8002500 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a3e      	ldr	r2, [pc, #248]	; (8002600 <DMA_SetConfig+0x230>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d04a      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a3d      	ldr	r2, [pc, #244]	; (8002604 <DMA_SetConfig+0x234>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d045      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <DMA_SetConfig+0x238>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d040      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a3a      	ldr	r2, [pc, #232]	; (800260c <DMA_SetConfig+0x23c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d03b      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a38      	ldr	r2, [pc, #224]	; (8002610 <DMA_SetConfig+0x240>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d036      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a37      	ldr	r2, [pc, #220]	; (8002614 <DMA_SetConfig+0x244>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d031      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a35      	ldr	r2, [pc, #212]	; (8002618 <DMA_SetConfig+0x248>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d02c      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a34      	ldr	r2, [pc, #208]	; (800261c <DMA_SetConfig+0x24c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d027      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a32      	ldr	r2, [pc, #200]	; (8002620 <DMA_SetConfig+0x250>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d022      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a31      	ldr	r2, [pc, #196]	; (8002624 <DMA_SetConfig+0x254>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d01d      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a2f      	ldr	r2, [pc, #188]	; (8002628 <DMA_SetConfig+0x258>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d018      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2e      	ldr	r2, [pc, #184]	; (800262c <DMA_SetConfig+0x25c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d013      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <DMA_SetConfig+0x260>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00e      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <DMA_SetConfig+0x264>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d009      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a29      	ldr	r2, [pc, #164]	; (8002638 <DMA_SetConfig+0x268>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <DMA_SetConfig+0x1d0>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a28      	ldr	r2, [pc, #160]	; (800263c <DMA_SetConfig+0x26c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <DMA_SetConfig+0x1d4>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <DMA_SetConfig+0x1d6>
 80025a4:	2300      	movs	r3, #0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d05a      	beq.n	8002660 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	223f      	movs	r2, #63	; 0x3f
 80025b4:	409a      	lsls	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d108      	bne.n	80025ec <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80025ea:	e087      	b.n	80026fc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]
}
 80025fc:	e07e      	b.n	80026fc <DMA_SetConfig+0x32c>
 80025fe:	bf00      	nop
 8002600:	40020010 	.word	0x40020010
 8002604:	40020028 	.word	0x40020028
 8002608:	40020040 	.word	0x40020040
 800260c:	40020058 	.word	0x40020058
 8002610:	40020070 	.word	0x40020070
 8002614:	40020088 	.word	0x40020088
 8002618:	400200a0 	.word	0x400200a0
 800261c:	400200b8 	.word	0x400200b8
 8002620:	40020410 	.word	0x40020410
 8002624:	40020428 	.word	0x40020428
 8002628:	40020440 	.word	0x40020440
 800262c:	40020458 	.word	0x40020458
 8002630:	40020470 	.word	0x40020470
 8002634:	40020488 	.word	0x40020488
 8002638:	400204a0 	.word	0x400204a0
 800263c:	400204b8 	.word	0x400204b8
 8002640:	58025408 	.word	0x58025408
 8002644:	5802541c 	.word	0x5802541c
 8002648:	58025430 	.word	0x58025430
 800264c:	58025444 	.word	0x58025444
 8002650:	58025458 	.word	0x58025458
 8002654:	5802546c 	.word	0x5802546c
 8002658:	58025480 	.word	0x58025480
 800265c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a28      	ldr	r2, [pc, #160]	; (8002708 <DMA_SetConfig+0x338>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d022      	beq.n	80026b0 <DMA_SetConfig+0x2e0>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a27      	ldr	r2, [pc, #156]	; (800270c <DMA_SetConfig+0x33c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d01d      	beq.n	80026b0 <DMA_SetConfig+0x2e0>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a25      	ldr	r2, [pc, #148]	; (8002710 <DMA_SetConfig+0x340>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d018      	beq.n	80026b0 <DMA_SetConfig+0x2e0>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a24      	ldr	r2, [pc, #144]	; (8002714 <DMA_SetConfig+0x344>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d013      	beq.n	80026b0 <DMA_SetConfig+0x2e0>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <DMA_SetConfig+0x348>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00e      	beq.n	80026b0 <DMA_SetConfig+0x2e0>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a21      	ldr	r2, [pc, #132]	; (800271c <DMA_SetConfig+0x34c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d009      	beq.n	80026b0 <DMA_SetConfig+0x2e0>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <DMA_SetConfig+0x350>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d004      	beq.n	80026b0 <DMA_SetConfig+0x2e0>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <DMA_SetConfig+0x354>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d101      	bne.n	80026b4 <DMA_SetConfig+0x2e4>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <DMA_SetConfig+0x2e6>
 80026b4:	2300      	movs	r3, #0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d020      	beq.n	80026fc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2201      	movs	r2, #1
 80026c4:	409a      	lsls	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d108      	bne.n	80026ec <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	60da      	str	r2, [r3, #12]
}
 80026ea:	e007      	b.n	80026fc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]
}
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	58025408 	.word	0x58025408
 800270c:	5802541c 	.word	0x5802541c
 8002710:	58025430 	.word	0x58025430
 8002714:	58025444 	.word	0x58025444
 8002718:	58025458 	.word	0x58025458
 800271c:	5802546c 	.word	0x5802546c
 8002720:	58025480 	.word	0x58025480
 8002724:	58025494 	.word	0x58025494

08002728 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a42      	ldr	r2, [pc, #264]	; (8002840 <DMA_CalcBaseAndBitshift+0x118>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d04a      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a41      	ldr	r2, [pc, #260]	; (8002844 <DMA_CalcBaseAndBitshift+0x11c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d045      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3f      	ldr	r2, [pc, #252]	; (8002848 <DMA_CalcBaseAndBitshift+0x120>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d040      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a3e      	ldr	r2, [pc, #248]	; (800284c <DMA_CalcBaseAndBitshift+0x124>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d03b      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <DMA_CalcBaseAndBitshift+0x128>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d036      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <DMA_CalcBaseAndBitshift+0x12c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d031      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a39      	ldr	r2, [pc, #228]	; (8002858 <DMA_CalcBaseAndBitshift+0x130>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d02c      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a38      	ldr	r2, [pc, #224]	; (800285c <DMA_CalcBaseAndBitshift+0x134>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d027      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a36      	ldr	r2, [pc, #216]	; (8002860 <DMA_CalcBaseAndBitshift+0x138>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d022      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a35      	ldr	r2, [pc, #212]	; (8002864 <DMA_CalcBaseAndBitshift+0x13c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d01d      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a33      	ldr	r2, [pc, #204]	; (8002868 <DMA_CalcBaseAndBitshift+0x140>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d018      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a32      	ldr	r2, [pc, #200]	; (800286c <DMA_CalcBaseAndBitshift+0x144>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a30      	ldr	r2, [pc, #192]	; (8002870 <DMA_CalcBaseAndBitshift+0x148>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00e      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2f      	ldr	r2, [pc, #188]	; (8002874 <DMA_CalcBaseAndBitshift+0x14c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d009      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <DMA_CalcBaseAndBitshift+0x150>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <DMA_CalcBaseAndBitshift+0xa8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2c      	ldr	r2, [pc, #176]	; (800287c <DMA_CalcBaseAndBitshift+0x154>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <DMA_CalcBaseAndBitshift+0xac>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <DMA_CalcBaseAndBitshift+0xae>
 80027d4:	2300      	movs	r3, #0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d024      	beq.n	8002824 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3b10      	subs	r3, #16
 80027e2:	4a27      	ldr	r2, [pc, #156]	; (8002880 <DMA_CalcBaseAndBitshift+0x158>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	4a24      	ldr	r2, [pc, #144]	; (8002884 <DMA_CalcBaseAndBitshift+0x15c>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d908      	bls.n	8002814 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <DMA_CalcBaseAndBitshift+0x160>)
 800280a:	4013      	ands	r3, r2
 800280c:	1d1a      	adds	r2, r3, #4
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	659a      	str	r2, [r3, #88]	; 0x58
 8002812:	e00d      	b.n	8002830 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <DMA_CalcBaseAndBitshift+0x160>)
 800281c:	4013      	ands	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6593      	str	r3, [r2, #88]	; 0x58
 8002822:	e005      	b.n	8002830 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40020010 	.word	0x40020010
 8002844:	40020028 	.word	0x40020028
 8002848:	40020040 	.word	0x40020040
 800284c:	40020058 	.word	0x40020058
 8002850:	40020070 	.word	0x40020070
 8002854:	40020088 	.word	0x40020088
 8002858:	400200a0 	.word	0x400200a0
 800285c:	400200b8 	.word	0x400200b8
 8002860:	40020410 	.word	0x40020410
 8002864:	40020428 	.word	0x40020428
 8002868:	40020440 	.word	0x40020440
 800286c:	40020458 	.word	0x40020458
 8002870:	40020470 	.word	0x40020470
 8002874:	40020488 	.word	0x40020488
 8002878:	400204a0 	.word	0x400204a0
 800287c:	400204b8 	.word	0x400204b8
 8002880:	aaaaaaab 	.word	0xaaaaaaab
 8002884:	08009720 	.word	0x08009720
 8002888:	fffffc00 	.word	0xfffffc00

0800288c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d120      	bne.n	80028e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d858      	bhi.n	800295a <DMA_CheckFifoParam+0xce>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <DMA_CheckFifoParam+0x24>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	080028d3 	.word	0x080028d3
 80028b8:	080028c1 	.word	0x080028c1
 80028bc:	0800295b 	.word	0x0800295b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d048      	beq.n	800295e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80028d0:	e045      	b.n	800295e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028da:	d142      	bne.n	8002962 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80028e0:	e03f      	b.n	8002962 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	d123      	bne.n	8002934 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d838      	bhi.n	8002966 <DMA_CheckFifoParam+0xda>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <DMA_CheckFifoParam+0x70>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	08002913 	.word	0x08002913
 8002904:	0800290d 	.word	0x0800290d
 8002908:	08002925 	.word	0x08002925
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
        break;
 8002910:	e030      	b.n	8002974 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d025      	beq.n	800296a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002922:	e022      	b.n	800296a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800292c:	d11f      	bne.n	800296e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002932:	e01c      	b.n	800296e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	2b02      	cmp	r3, #2
 800293a:	d902      	bls.n	8002942 <DMA_CheckFifoParam+0xb6>
 800293c:	2b03      	cmp	r3, #3
 800293e:	d003      	beq.n	8002948 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002940:	e018      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
        break;
 8002946:	e015      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00e      	beq.n	8002972 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
    break;
 8002958:	e00b      	b.n	8002972 <DMA_CheckFifoParam+0xe6>
        break;
 800295a:	bf00      	nop
 800295c:	e00a      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
        break;
 800295e:	bf00      	nop
 8002960:	e008      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
        break;
 8002962:	bf00      	nop
 8002964:	e006      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
        break;
 8002966:	bf00      	nop
 8002968:	e004      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
        break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
        break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
    break;
 8002972:	bf00      	nop
    }
  }

  return status;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop

08002984 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a36      	ldr	r2, [pc, #216]	; (8002a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01d      	beq.n	80029e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a35      	ldr	r2, [pc, #212]	; (8002a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d018      	beq.n	80029e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00e      	beq.n	80029e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d009      	beq.n	80029e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2d      	ldr	r2, [pc, #180]	; (8002a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01a      	beq.n	8002a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	3b08      	subs	r3, #8
 80029f4:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002a10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2201      	movs	r2, #1
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002a20:	e024      	b.n	8002a6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	3b10      	subs	r3, #16
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d806      	bhi.n	8002a4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d902      	bls.n	8002a4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3308      	adds	r3, #8
 8002a48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	461a      	mov	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002a5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2201      	movs	r2, #1
 8002a66:	409a      	lsls	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58025408 	.word	0x58025408
 8002a7c:	5802541c 	.word	0x5802541c
 8002a80:	58025430 	.word	0x58025430
 8002a84:	58025444 	.word	0x58025444
 8002a88:	58025458 	.word	0x58025458
 8002a8c:	5802546c 	.word	0x5802546c
 8002a90:	58025480 	.word	0x58025480
 8002a94:	58025494 	.word	0x58025494
 8002a98:	cccccccd 	.word	0xcccccccd
 8002a9c:	16009600 	.word	0x16009600
 8002aa0:	58025880 	.word	0x58025880
 8002aa4:	aaaaaaab 	.word	0xaaaaaaab
 8002aa8:	400204b8 	.word	0x400204b8
 8002aac:	4002040f 	.word	0x4002040f
 8002ab0:	10008200 	.word	0x10008200
 8002ab4:	40020880 	.word	0x40020880

08002ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d04a      	beq.n	8002b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d847      	bhi.n	8002b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d022      	beq.n	8002b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d01d      	beq.n	8002b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d018      	beq.n	8002b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00e      	beq.n	8002b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d009      	beq.n	8002b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002b40:	671a      	str	r2, [r3, #112]	; 0x70
 8002b42:	e009      	b.n	8002b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a11      	ldr	r2, [pc, #68]	; (8002b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002b56:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	58025408 	.word	0x58025408
 8002b74:	5802541c 	.word	0x5802541c
 8002b78:	58025430 	.word	0x58025430
 8002b7c:	58025444 	.word	0x58025444
 8002b80:	58025458 	.word	0x58025458
 8002b84:	5802546c 	.word	0x5802546c
 8002b88:	58025480 	.word	0x58025480
 8002b8c:	58025494 	.word	0x58025494
 8002b90:	1600963f 	.word	0x1600963f
 8002b94:	58025940 	.word	0x58025940
 8002b98:	1000823f 	.word	0x1000823f
 8002b9c:	40020940 	.word	0x40020940

08002ba0 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	7a1b      	ldrb	r3, [r3, #8]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d155      	bne.n	8002c66 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4b      	ldr	r2, [pc, #300]	; (8002cec <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d049      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a49      	ldr	r2, [pc, #292]	; (8002cf0 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d044      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a48      	ldr	r2, [pc, #288]	; (8002cf4 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d03f      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a46      	ldr	r2, [pc, #280]	; (8002cf8 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d03a      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a45      	ldr	r2, [pc, #276]	; (8002cfc <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d035      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a43      	ldr	r2, [pc, #268]	; (8002d00 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d030      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a42      	ldr	r2, [pc, #264]	; (8002d04 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d02b      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a40      	ldr	r2, [pc, #256]	; (8002d08 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d026      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a3f      	ldr	r2, [pc, #252]	; (8002d0c <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d021      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3d      	ldr	r2, [pc, #244]	; (8002d10 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01c      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a3c      	ldr	r2, [pc, #240]	; (8002d14 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d017      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a3a      	ldr	r2, [pc, #232]	; (8002d18 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d012      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a39      	ldr	r2, [pc, #228]	; (8002d1c <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00d      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a37      	ldr	r2, [pc, #220]	; (8002d20 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d008      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a36      	ldr	r2, [pc, #216]	; (8002d24 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d003      	beq.n	8002c58 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d131      	bne.n	8002cd6 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e02f      	b.n	8002ce0 <HAL_DMAEx_ConfigMuxSync+0x140>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c92:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8002c96:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	b2d9      	uxtb	r1, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	061a      	lsls	r2, r3, #24
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	04db      	lsls	r3, r3, #19
 8002cac:	431a      	orrs	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	7a1b      	ldrb	r3, [r3, #8]
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	7a5b      	ldrb	r3, [r3, #9]
 8002cbe:	025b      	lsls	r3, r3, #9
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e004      	b.n	8002ce0 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40020010 	.word	0x40020010
 8002cf0:	40020028 	.word	0x40020028
 8002cf4:	40020040 	.word	0x40020040
 8002cf8:	40020058 	.word	0x40020058
 8002cfc:	40020070 	.word	0x40020070
 8002d00:	40020088 	.word	0x40020088
 8002d04:	400200a0 	.word	0x400200a0
 8002d08:	400200b8 	.word	0x400200b8
 8002d0c:	40020410 	.word	0x40020410
 8002d10:	40020428 	.word	0x40020428
 8002d14:	40020440 	.word	0x40020440
 8002d18:	40020458 	.word	0x40020458
 8002d1c:	40020470 	.word	0x40020470
 8002d20:	40020488 	.word	0x40020488
 8002d24:	400204a0 	.word	0x400204a0
 8002d28:	400204b8 	.word	0x400204b8

08002d2c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01a      	beq.n	8002d7a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d022      	beq.n	8002dc8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01a      	beq.n	8002dc8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002daa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dde:	4b86      	ldr	r3, [pc, #536]	; (8002ff8 <HAL_GPIO_Init+0x228>)
 8002de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002de2:	e18c      	b.n	80030fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 817e 	beq.w	80030f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d005      	beq.n	8002e14 <HAL_GPIO_Init+0x44>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d130      	bne.n	8002e76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	f003 0201 	and.w	r2, r3, #1
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d017      	beq.n	8002eb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d123      	bne.n	8002f06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	08da      	lsrs	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3208      	adds	r2, #8
 8002ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	08da      	lsrs	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3208      	adds	r2, #8
 8002f00:	69b9      	ldr	r1, [r7, #24]
 8002f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	2203      	movs	r2, #3
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0203 	and.w	r2, r3, #3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80d8 	beq.w	80030f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f48:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_GPIO_Init+0x22c>)
 8002f4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f4e:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <HAL_GPIO_Init+0x22c>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_GPIO_Init+0x22c>)
 8002f5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f66:	4a26      	ldr	r2, [pc, #152]	; (8003000 <HAL_GPIO_Init+0x230>)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_GPIO_Init+0x234>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d04a      	beq.n	8003028 <HAL_GPIO_Init+0x258>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <HAL_GPIO_Init+0x238>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d02b      	beq.n	8002ff2 <HAL_GPIO_Init+0x222>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1b      	ldr	r2, [pc, #108]	; (800300c <HAL_GPIO_Init+0x23c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d025      	beq.n	8002fee <HAL_GPIO_Init+0x21e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <HAL_GPIO_Init+0x240>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01f      	beq.n	8002fea <HAL_GPIO_Init+0x21a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a19      	ldr	r2, [pc, #100]	; (8003014 <HAL_GPIO_Init+0x244>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d019      	beq.n	8002fe6 <HAL_GPIO_Init+0x216>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <HAL_GPIO_Init+0x248>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_GPIO_Init+0x212>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_GPIO_Init+0x24c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00d      	beq.n	8002fde <HAL_GPIO_Init+0x20e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a16      	ldr	r2, [pc, #88]	; (8003020 <HAL_GPIO_Init+0x250>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <HAL_GPIO_Init+0x20a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <HAL_GPIO_Init+0x254>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_GPIO_Init+0x206>
 8002fd2:	2309      	movs	r3, #9
 8002fd4:	e029      	b.n	800302a <HAL_GPIO_Init+0x25a>
 8002fd6:	230a      	movs	r3, #10
 8002fd8:	e027      	b.n	800302a <HAL_GPIO_Init+0x25a>
 8002fda:	2307      	movs	r3, #7
 8002fdc:	e025      	b.n	800302a <HAL_GPIO_Init+0x25a>
 8002fde:	2306      	movs	r3, #6
 8002fe0:	e023      	b.n	800302a <HAL_GPIO_Init+0x25a>
 8002fe2:	2305      	movs	r3, #5
 8002fe4:	e021      	b.n	800302a <HAL_GPIO_Init+0x25a>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	e01f      	b.n	800302a <HAL_GPIO_Init+0x25a>
 8002fea:	2303      	movs	r3, #3
 8002fec:	e01d      	b.n	800302a <HAL_GPIO_Init+0x25a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e01b      	b.n	800302a <HAL_GPIO_Init+0x25a>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e019      	b.n	800302a <HAL_GPIO_Init+0x25a>
 8002ff6:	bf00      	nop
 8002ff8:	58000080 	.word	0x58000080
 8002ffc:	58024400 	.word	0x58024400
 8003000:	58000400 	.word	0x58000400
 8003004:	58020000 	.word	0x58020000
 8003008:	58020400 	.word	0x58020400
 800300c:	58020800 	.word	0x58020800
 8003010:	58020c00 	.word	0x58020c00
 8003014:	58021000 	.word	0x58021000
 8003018:	58021400 	.word	0x58021400
 800301c:	58021800 	.word	0x58021800
 8003020:	58021c00 	.word	0x58021c00
 8003024:	58022400 	.word	0x58022400
 8003028:	2300      	movs	r3, #0
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	f002 0203 	and.w	r2, r2, #3
 8003030:	0092      	lsls	r2, r2, #2
 8003032:	4093      	lsls	r3, r2
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800303a:	4938      	ldr	r1, [pc, #224]	; (800311c <HAL_GPIO_Init+0x34c>)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	3302      	adds	r3, #2
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800306e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800309c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	f47f ae6b 	bne.w	8002de4 <HAL_GPIO_Init+0x14>
  }
}
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	3724      	adds	r7, #36	; 0x24
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	58000400 	.word	0x58000400

08003120 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003128:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	2b06      	cmp	r3, #6
 8003132:	d00a      	beq.n	800314a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e03f      	b.n	80031c6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e03d      	b.n	80031c6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800314a:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003152:	491f      	ldr	r1, [pc, #124]	; (80031d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4313      	orrs	r3, r2
 8003158:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800315a:	f7fd fa39 	bl	80005d0 <HAL_GetTick>
 800315e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003160:	e009      	b.n	8003176 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003162:	f7fd fa35 	bl	80005d0 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003170:	d901      	bls.n	8003176 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e027      	b.n	80031c6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	d1ee      	bne.n	8003162 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b1e      	cmp	r3, #30
 8003188:	d008      	beq.n	800319c <HAL_PWREx_ConfigSupply+0x7c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b2e      	cmp	r3, #46	; 0x2e
 800318e:	d005      	beq.n	800319c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b1d      	cmp	r3, #29
 8003194:	d002      	beq.n	800319c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b2d      	cmp	r3, #45	; 0x2d
 800319a:	d113      	bne.n	80031c4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800319c:	f7fd fa18 	bl	80005d0 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031a2:	e009      	b.n	80031b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031a4:	f7fd fa14 	bl	80005d0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b2:	d901      	bls.n	80031b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e006      	b.n	80031c6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0311 	and.w	r3, r3, #17
 80031c0:	2b11      	cmp	r3, #17
 80031c2:	d1ef      	bne.n	80031a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	58024800 	.word	0x58024800

080031d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e397      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8087 	beq.w	8003302 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f4:	4b9e      	ldr	r3, [pc, #632]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031fe:	4b9c      	ldr	r3, [pc, #624]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	2b10      	cmp	r3, #16
 8003208:	d007      	beq.n	800321a <HAL_RCC_OscConfig+0x46>
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2b18      	cmp	r3, #24
 800320e:	d110      	bne.n	8003232 <HAL_RCC_OscConfig+0x5e>
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d10b      	bne.n	8003232 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321a:	4b95      	ldr	r3, [pc, #596]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d06c      	beq.n	8003300 <HAL_RCC_OscConfig+0x12c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d168      	bne.n	8003300 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e371      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323a:	d106      	bne.n	800324a <HAL_RCC_OscConfig+0x76>
 800323c:	4b8c      	ldr	r3, [pc, #560]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a8b      	ldr	r2, [pc, #556]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	e02e      	b.n	80032a8 <HAL_RCC_OscConfig+0xd4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0x98>
 8003252:	4b87      	ldr	r3, [pc, #540]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a86      	ldr	r2, [pc, #536]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b84      	ldr	r3, [pc, #528]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a83      	ldr	r2, [pc, #524]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e01d      	b.n	80032a8 <HAL_RCC_OscConfig+0xd4>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0xbc>
 8003276:	4b7e      	ldr	r3, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7d      	ldr	r2, [pc, #500]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7a      	ldr	r2, [pc, #488]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0xd4>
 8003290:	4b77      	ldr	r3, [pc, #476]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a76      	ldr	r2, [pc, #472]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b74      	ldr	r3, [pc, #464]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a73      	ldr	r2, [pc, #460]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80032a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d013      	beq.n	80032d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fd f98e 	bl	80005d0 <HAL_GetTick>
 80032b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd f98a 	bl	80005d0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e325      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ca:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0xe4>
 80032d6:	e014      	b.n	8003302 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd f97a 	bl	80005d0 <HAL_GetTick>
 80032dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fd f976 	bl	80005d0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e311      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x10c>
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 808a 	beq.w	8003424 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003310:	4b57      	ldr	r3, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003318:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_RCC_OscConfig+0x162>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	2b18      	cmp	r3, #24
 800332a:	d137      	bne.n	800339c <HAL_RCC_OscConfig+0x1c8>
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d132      	bne.n	800339c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003336:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x17a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e2e3      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800334e:	4b48      	ldr	r3, [pc, #288]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0219 	bic.w	r2, r3, #25
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4945      	ldr	r1, [pc, #276]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003360:	f7fd f936 	bl	80005d0 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003368:	f7fd f932 	bl	80005d0 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e2cd      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	4936      	ldr	r1, [pc, #216]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339a:	e043      	b.n	8003424 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d026      	beq.n	80033f2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 0219 	bic.w	r2, r3, #25
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	492f      	ldr	r1, [pc, #188]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fd f90b 	bl	80005d0 <HAL_GetTick>
 80033ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033be:	f7fd f907 	bl	80005d0 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e2a2      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033dc:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	4921      	ldr	r1, [pc, #132]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
 80033f0:	e018      	b.n	8003424 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fd f8e7 	bl	80005d0 <HAL_GetTick>
 8003402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003406:	f7fd f8e3 	bl	80005d0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e27e      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d06d      	beq.n	800350c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003438:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b08      	cmp	r3, #8
 8003444:	d007      	beq.n	8003456 <HAL_RCC_OscConfig+0x282>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b18      	cmp	r3, #24
 800344a:	d11e      	bne.n	800348a <HAL_RCC_OscConfig+0x2b6>
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d119      	bne.n	800348a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_OscConfig+0x29c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_RCC_OscConfig+0x2a0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b80      	cmp	r3, #128	; 0x80
 8003468:	d004      	beq.n	8003474 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e253      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
 800346e:	bf00      	nop
 8003470:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003474:	4ba3      	ldr	r3, [pc, #652]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	49a0      	ldr	r1, [pc, #640]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003484:	4313      	orrs	r3, r2
 8003486:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003488:	e040      	b.n	800350c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d023      	beq.n	80034da <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003492:	4b9c      	ldr	r3, [pc, #624]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a9b      	ldr	r2, [pc, #620]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fd f897 	bl	80005d0 <HAL_GetTick>
 80034a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034a6:	f7fd f893 	bl	80005d0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e22e      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034b8:	4b92      	ldr	r3, [pc, #584]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034c4:	4b8f      	ldr	r3, [pc, #572]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	498c      	ldr	r1, [pc, #560]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60cb      	str	r3, [r1, #12]
 80034d8:	e018      	b.n	800350c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034da:	4b8a      	ldr	r3, [pc, #552]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a89      	ldr	r2, [pc, #548]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80034e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fd f873 	bl	80005d0 <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034ee:	f7fd f86f 	bl	80005d0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e20a      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003500:	4b80      	ldr	r3, [pc, #512]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d036      	beq.n	8003586 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003520:	4b78      	ldr	r3, [pc, #480]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	4a77      	ldr	r2, [pc, #476]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fd f850 	bl	80005d0 <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003534:	f7fd f84c 	bl	80005d0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1e7      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003546:	4b6f      	ldr	r3, [pc, #444]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x360>
 8003552:	e018      	b.n	8003586 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003554:	4b6b      	ldr	r3, [pc, #428]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	4a6a      	ldr	r2, [pc, #424]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd f836 	bl	80005d0 <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003568:	f7fd f832 	bl	80005d0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1cd      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800357a:	4b62      	ldr	r3, [pc, #392]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d019      	beq.n	80035ce <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800359a:	4b5a      	ldr	r3, [pc, #360]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a59      	ldr	r2, [pc, #356]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035a6:	f7fd f813 	bl	80005d0 <HAL_GetTick>
 80035aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035ae:	f7fd f80f 	bl	80005d0 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1aa      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x3da>
 80035cc:	e018      	b.n	8003600 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ce:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a4c      	ldr	r2, [pc, #304]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035da:	f7fc fff9 	bl	80005d0 <HAL_GetTick>
 80035de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035e2:	f7fc fff5 	bl	80005d0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e190      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035f4:	4b43      	ldr	r3, [pc, #268]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8085 	beq.w	8003718 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_RCC_OscConfig+0x534>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <HAL_RCC_OscConfig+0x534>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800361a:	f7fc ffd9 	bl	80005d0 <HAL_GetTick>
 800361e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fc ffd5 	bl	80005d0 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b64      	cmp	r3, #100	; 0x64
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e170      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003634:	4b34      	ldr	r3, [pc, #208]	; (8003708 <HAL_RCC_OscConfig+0x534>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x482>
 8003648:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a2d      	ldr	r2, [pc, #180]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	e02d      	b.n	80036b2 <HAL_RCC_OscConfig+0x4de>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x4a4>
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	4a28      	ldr	r2, [pc, #160]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
 800366a:	4b26      	ldr	r3, [pc, #152]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a25      	ldr	r2, [pc, #148]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	e01c      	b.n	80036b2 <HAL_RCC_OscConfig+0x4de>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d10c      	bne.n	800369a <HAL_RCC_OscConfig+0x4c6>
 8003680:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	e00b      	b.n	80036b2 <HAL_RCC_OscConfig+0x4de>
 800369a:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a16      	ldr	r2, [pc, #88]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fc ff89 	bl	80005d0 <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fc ff85 	bl	80005d0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e11e      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_RCC_OscConfig+0x530>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RCC_OscConfig+0x4ee>
 80036e4:	e018      	b.n	8003718 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fc ff73 	bl	80005d0 <HAL_GetTick>
 80036ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fc ff6f 	bl	80005d0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d905      	bls.n	800370c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e108      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
 8003704:	58024400 	.word	0x58024400
 8003708:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800370c:	4b84      	ldr	r3, [pc, #528]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80f9 	beq.w	8003914 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003722:	4b7f      	ldr	r3, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800372a:	2b18      	cmp	r3, #24
 800372c:	f000 80b4 	beq.w	8003898 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2b02      	cmp	r3, #2
 8003736:	f040 8095 	bne.w	8003864 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b79      	ldr	r3, [pc, #484]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a78      	ldr	r2, [pc, #480]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fc ff43 	bl	80005d0 <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374e:	f7fc ff3f 	bl	80005d0 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0da      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003760:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376c:	4b6c      	ldr	r3, [pc, #432]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800376e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003770:	4b6c      	ldr	r3, [pc, #432]	; (8003924 <HAL_RCC_OscConfig+0x750>)
 8003772:	4013      	ands	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	430a      	orrs	r2, r1
 8003780:	4967      	ldr	r1, [pc, #412]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	628b      	str	r3, [r1, #40]	; 0x28
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	3b01      	subs	r3, #1
 800378c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	3b01      	subs	r3, #1
 8003796:	025b      	lsls	r3, r3, #9
 8003798:	b29b      	uxth	r3, r3
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	3b01      	subs	r3, #1
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	3b01      	subs	r3, #1
 80037b0:	061b      	lsls	r3, r3, #24
 80037b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037b6:	495a      	ldr	r1, [pc, #360]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80037bc:	4b58      	ldr	r3, [pc, #352]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	4a57      	ldr	r2, [pc, #348]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037c8:	4b55      	ldr	r3, [pc, #340]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037cc:	4b56      	ldr	r3, [pc, #344]	; (8003928 <HAL_RCC_OscConfig+0x754>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037d4:	00d2      	lsls	r2, r2, #3
 80037d6:	4952      	ldr	r1, [pc, #328]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037dc:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	f023 020c 	bic.w	r2, r3, #12
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	494d      	ldr	r1, [pc, #308]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037ee:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f023 0202 	bic.w	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4949      	ldr	r1, [pc, #292]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003800:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a46      	ldr	r2, [pc, #280]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380c:	4b44      	ldr	r3, [pc, #272]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	4a43      	ldr	r2, [pc, #268]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003818:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	4a40      	ldr	r2, [pc, #256]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800381e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003824:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	4a3d      	ldr	r2, [pc, #244]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003830:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3a      	ldr	r2, [pc, #232]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fc fec8 	bl	80005d0 <HAL_GetTick>
 8003840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003844:	f7fc fec4 	bl	80005d0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e05f      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003856:	4b32      	ldr	r3, [pc, #200]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x670>
 8003862:	e057      	b.n	8003914 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fc feae 	bl	80005d0 <HAL_GetTick>
 8003874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003878:	f7fc feaa 	bl	80005d0 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e045      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800388a:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x6a4>
 8003896:	e03d      	b.n	8003914 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003898:	4b21      	ldr	r3, [pc, #132]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_OscConfig+0x74c>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d031      	beq.n	8003910 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f003 0203 	and.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d12a      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d122      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d11a      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	0a5b      	lsrs	r3, r3, #9
 80038de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d111      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d108      	bne.n	8003910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	0e1b      	lsrs	r3, r3, #24
 8003902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3730      	adds	r7, #48	; 0x30
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	58024400 	.word	0x58024400
 8003924:	fffffc0c 	.word	0xfffffc0c
 8003928:	ffff0007 	.word	0xffff0007

0800392c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e19c      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b8a      	ldr	r3, [pc, #552]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d910      	bls.n	8003970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b87      	ldr	r3, [pc, #540]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 020f 	bic.w	r2, r3, #15
 8003956:	4985      	ldr	r1, [pc, #532]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b83      	ldr	r3, [pc, #524]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e184      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003988:	429a      	cmp	r2, r3
 800398a:	d908      	bls.n	800399e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800398c:	4b78      	ldr	r3, [pc, #480]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	4975      	ldr	r1, [pc, #468]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 800399a:	4313      	orrs	r3, r2
 800399c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	4b70      	ldr	r3, [pc, #448]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d908      	bls.n	80039cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039ba:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	496a      	ldr	r1, [pc, #424]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d908      	bls.n	80039fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039e8:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	495e      	ldr	r1, [pc, #376]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	4b59      	ldr	r3, [pc, #356]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d908      	bls.n	8003a28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a16:	4b56      	ldr	r3, [pc, #344]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4953      	ldr	r1, [pc, #332]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d908      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f023 020f 	bic.w	r2, r3, #15
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4947      	ldr	r1, [pc, #284]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d055      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a62:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4940      	ldr	r1, [pc, #256]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a7c:	4b3c      	ldr	r3, [pc, #240]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d121      	bne.n	8003acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0f6      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d115      	bne.n	8003acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0ea      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003aac:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0de      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003abc:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0d6      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f023 0207 	bic.w	r2, r3, #7
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4925      	ldr	r1, [pc, #148]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fc fd77 	bl	80005d0 <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae6:	f7fc fd73 	bl	80005d0 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0be      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d1eb      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d208      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f023 020f 	bic.w	r2, r3, #15
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	490e      	ldr	r1, [pc, #56]	; (8003b70 <HAL_RCC_ClockConfig+0x244>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d214      	bcs.n	8003b74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 020f 	bic.w	r2, r3, #15
 8003b52:	4906      	ldr	r1, [pc, #24]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <HAL_RCC_ClockConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e086      	b.n	8003c7a <HAL_RCC_ClockConfig+0x34e>
 8003b6c:	52002000 	.word	0x52002000
 8003b70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d208      	bcs.n	8003ba2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b90:	4b3c      	ldr	r3, [pc, #240]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	4939      	ldr	r1, [pc, #228]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d010      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d208      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bbe:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	492e      	ldr	r1, [pc, #184]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d208      	bcs.n	8003bfe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bec:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4922      	ldr	r1, [pc, #136]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d208      	bcs.n	8003c2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	4917      	ldr	r1, [pc, #92]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c2c:	f000 f834 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	4912      	ldr	r1, [pc, #72]	; (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
 8003c48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x358>)
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	4a0d      	ldr	r2, [pc, #52]	; (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c54:	5cd3      	ldrb	r3, [r2, r3]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <HAL_RCC_ClockConfig+0x360>)
 8003c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c64:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <HAL_RCC_ClockConfig+0x364>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_RCC_ClockConfig+0x368>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fc64 	bl	800053c <HAL_InitTick>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	58024400 	.word	0x58024400
 8003c88:	08009728 	.word	0x08009728
 8003c8c:	2400040c 	.word	0x2400040c
 8003c90:	24000408 	.word	0x24000408
 8003c94:	24000400 	.word	0x24000400

08003c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c9e:	4bb3      	ldr	r3, [pc, #716]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca6:	2b18      	cmp	r3, #24
 8003ca8:	f200 8155 	bhi.w	8003f56 <HAL_RCC_GetSysClockFreq+0x2be>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003d19 	.word	0x08003d19
 8003cb8:	08003f57 	.word	0x08003f57
 8003cbc:	08003f57 	.word	0x08003f57
 8003cc0:	08003f57 	.word	0x08003f57
 8003cc4:	08003f57 	.word	0x08003f57
 8003cc8:	08003f57 	.word	0x08003f57
 8003ccc:	08003f57 	.word	0x08003f57
 8003cd0:	08003f57 	.word	0x08003f57
 8003cd4:	08003d3f 	.word	0x08003d3f
 8003cd8:	08003f57 	.word	0x08003f57
 8003cdc:	08003f57 	.word	0x08003f57
 8003ce0:	08003f57 	.word	0x08003f57
 8003ce4:	08003f57 	.word	0x08003f57
 8003ce8:	08003f57 	.word	0x08003f57
 8003cec:	08003f57 	.word	0x08003f57
 8003cf0:	08003f57 	.word	0x08003f57
 8003cf4:	08003d45 	.word	0x08003d45
 8003cf8:	08003f57 	.word	0x08003f57
 8003cfc:	08003f57 	.word	0x08003f57
 8003d00:	08003f57 	.word	0x08003f57
 8003d04:	08003f57 	.word	0x08003f57
 8003d08:	08003f57 	.word	0x08003f57
 8003d0c:	08003f57 	.word	0x08003f57
 8003d10:	08003f57 	.word	0x08003f57
 8003d14:	08003d4b 	.word	0x08003d4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d18:	4b94      	ldr	r3, [pc, #592]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d24:	4b91      	ldr	r3, [pc, #580]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	4a90      	ldr	r2, [pc, #576]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
 8003d34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d36:	e111      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d38:	4b8d      	ldr	r3, [pc, #564]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d3a:	61bb      	str	r3, [r7, #24]
    break;
 8003d3c:	e10e      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d3e:	4b8d      	ldr	r3, [pc, #564]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d40:	61bb      	str	r3, [r7, #24]
    break;
 8003d42:	e10b      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d44:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d46:	61bb      	str	r3, [r7, #24]
    break;
 8003d48:	e108      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d4a:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d54:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d60:	4b82      	ldr	r3, [pc, #520]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d6a:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	08db      	lsrs	r3, r3, #3
 8003d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80e1 	beq.w	8003f50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	f000 8083 	beq.w	8003e9c <HAL_RCC_GetSysClockFreq+0x204>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	f200 80a1 	bhi.w	8003ee0 <HAL_RCC_GetSysClockFreq+0x248>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x114>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d056      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003daa:	e099      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dac:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02d      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003db8:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	08db      	lsrs	r3, r3, #3
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	4a6b      	ldr	r2, [pc, #428]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de2:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e12:	e087      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e26:	4b51      	ldr	r3, [pc, #324]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e56:	e065      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6a:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e9a:	e043      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eae:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ede:	e021      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f24:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	0a5b      	lsrs	r3, r3, #9
 8003f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2e:	3301      	adds	r3, #1
 8003f30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f48:	ee17 3a90 	vmov	r3, s15
 8003f4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f4e:	e005      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61bb      	str	r3, [r7, #24]
    break;
 8003f54:	e002      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f58:	61bb      	str	r3, [r7, #24]
    break;
 8003f5a:	bf00      	nop
  }

  return sysclockfreq;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3724      	adds	r7, #36	; 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	58024400 	.word	0x58024400
 8003f70:	03d09000 	.word	0x03d09000
 8003f74:	003d0900 	.word	0x003d0900
 8003f78:	017d7840 	.word	0x017d7840
 8003f7c:	46000000 	.word	0x46000000
 8003f80:	4c742400 	.word	0x4c742400
 8003f84:	4a742400 	.word	0x4a742400
 8003f88:	4bbebc20 	.word	0x4bbebc20

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f92:	f7ff fe81 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <HAL_RCC_GetHCLKFreq+0x50>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	490f      	ldr	r1, [pc, #60]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	fa22 f303 	lsr.w	r3, r2, r3
 8003fae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RCC_GetHCLKFreq+0x50>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fba:	5cd3      	ldrb	r3, [r2, r3]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc6:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fca:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	08009728 	.word	0x08009728
 8003fe4:	2400040c 	.word	0x2400040c
 8003fe8:	24000408 	.word	0x24000408

08003fec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d03f      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004010:	d02a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004012:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004016:	d824      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800401c:	d018      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800401e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004022:	d81e      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402c:	d007      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800402e:	e018      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004030:	4bab      	ldr	r3, [pc, #684]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	4aaa      	ldr	r2, [pc, #680]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800403c:	e015      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	2102      	movs	r1, #2
 8004044:	4618      	mov	r0, r3
 8004046:	f001 feff 	bl	8005e48 <RCCEx_PLL2_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800404e:	e00c      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3324      	adds	r3, #36	; 0x24
 8004054:	2102      	movs	r1, #2
 8004056:	4618      	mov	r0, r3
 8004058:	f001 ffa8 	bl	8005fac <RCCEx_PLL3_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	75fb      	strb	r3, [r7, #23]
      break;
 8004066:	e000      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004070:	4b9b      	ldr	r3, [pc, #620]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407c:	4998      	ldr	r1, [pc, #608]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	650b      	str	r3, [r1, #80]	; 0x50
 8004082:	e001      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d03d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	2b04      	cmp	r3, #4
 800409a:	d826      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040b9 	.word	0x080040b9
 80040a8:	080040c7 	.word	0x080040c7
 80040ac:	080040d9 	.word	0x080040d9
 80040b0:	080040f1 	.word	0x080040f1
 80040b4:	080040f1 	.word	0x080040f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b8:	4b89      	ldr	r3, [pc, #548]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4a88      	ldr	r2, [pc, #544]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040c4:	e015      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 febb 	bl	8005e48 <RCCEx_PLL2_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040d6:	e00c      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3324      	adds	r3, #36	; 0x24
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 ff64 	bl	8005fac <RCCEx_PLL3_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040e8:	e003      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
      break;
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80040f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040f8:	4b79      	ldr	r3, [pc, #484]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	f023 0207 	bic.w	r2, r3, #7
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	4976      	ldr	r1, [pc, #472]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	650b      	str	r3, [r1, #80]	; 0x50
 800410a:	e001      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d051      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004122:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004126:	d036      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004128:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800412c:	d830      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800412e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004132:	d032      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004134:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004138:	d82a      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800413a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800413e:	d02e      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004140:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004144:	d824      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800414a:	d018      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800414c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004150:	d81e      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800415a:	d007      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800415c:	e018      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415e:	4b60      	ldr	r3, [pc, #384]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	4a5f      	ldr	r2, [pc, #380]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004168:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800416a:	e019      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fe68 	bl	8005e48 <RCCEx_PLL2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800417c:	e010      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3324      	adds	r3, #36	; 0x24
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f001 ff11 	bl	8005fac <RCCEx_PLL3_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800418e:	e007      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	75fb      	strb	r3, [r7, #23]
      break;
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800419e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80041a6:	4b4e      	ldr	r3, [pc, #312]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041b4:	494a      	ldr	r1, [pc, #296]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	658b      	str	r3, [r1, #88]	; 0x58
 80041ba:	e001      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d051      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041d2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80041d6:	d036      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80041d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80041dc:	d830      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80041de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041e2:	d032      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80041e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041e8:	d82a      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80041ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041ee:	d02e      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x262>
 80041f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041f4:	d824      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80041f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041fa:	d018      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x242>
 80041fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004200:	d81e      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004206:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800420a:	d007      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800420c:	e018      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420e:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	4a33      	ldr	r2, [pc, #204]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800421a:	e019      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f001 fe10 	bl	8005e48 <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800422c:	e010      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3324      	adds	r3, #36	; 0x24
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f001 feb9 	bl	8005fac <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800423e:	e007      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800424e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004264:	491e      	ldr	r1, [pc, #120]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	658b      	str	r3, [r1, #88]	; 0x58
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d035      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	2b30      	cmp	r3, #48	; 0x30
 8004282:	d01c      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d817      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004288:	2b20      	cmp	r3, #32
 800428a:	d00c      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d813      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d016      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004294:	2b10      	cmp	r3, #16
 8004296:	d10f      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800429e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80042a4:	e00e      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3304      	adds	r3, #4
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 fdcb 	bl	8005e48 <RCCEx_PLL2_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80042b6:	e005      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
      break;
 80042bc:	e002      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80042c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	4902      	ldr	r1, [pc, #8]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042dc:	e004      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80042de:	bf00      	nop
 80042e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d047      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042fc:	d030      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80042fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004302:	d82a      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004304:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004308:	d02c      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800430a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800430e:	d824      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004314:	d018      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431a:	d81e      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004324:	d007      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004326:	e018      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004328:	4bac      	ldr	r3, [pc, #688]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	4aab      	ldr	r2, [pc, #684]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800432e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004332:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004334:	e017      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3304      	adds	r3, #4
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f001 fd83 	bl	8005e48 <RCCEx_PLL2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004346:	e00e      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3324      	adds	r3, #36	; 0x24
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f001 fe2c 	bl	8005fac <RCCEx_PLL3_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004358:	e005      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
      break;
 800435e:	e002      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004366:	7dfb      	ldrb	r3, [r7, #23]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800436c:	4b9b      	ldr	r3, [pc, #620]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004370:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	4998      	ldr	r1, [pc, #608]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800437a:	4313      	orrs	r3, r2
 800437c:	650b      	str	r3, [r1, #80]	; 0x50
 800437e:	e001      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d049      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004398:	d02e      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800439a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800439e:	d828      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043a4:	d02a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80043a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043aa:	d822      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043b0:	d026      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80043b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043b6:	d81c      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043bc:	d010      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80043be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043c2:	d816      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01d      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d111      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2101      	movs	r1, #1
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 fd37 	bl	8005e48 <RCCEx_PLL2_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80043de:	e012      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3324      	adds	r3, #36	; 0x24
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 fde0 	bl	8005fac <RCCEx_PLL3_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80043f0:	e009      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	75fb      	strb	r3, [r7, #23]
      break;
 80043f6:	e006      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80043f8:	bf00      	nop
 80043fa:	e004      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80043fc:	bf00      	nop
 80043fe:	e002      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004400:	bf00      	nop
 8004402:	e000      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004406:	7dfb      	ldrb	r3, [r7, #23]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800440c:	4b73      	ldr	r3, [pc, #460]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004410:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004418:	4970      	ldr	r1, [pc, #448]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	650b      	str	r3, [r1, #80]	; 0x50
 800441e:	e001      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d04b      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800443a:	d02e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800443c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004440:	d828      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d02a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d822      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800444e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004452:	d026      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004454:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004458:	d81c      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800445a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445e:	d010      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004464:	d816      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01d      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800446a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800446e:	d111      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f001 fce6 	bl	8005e48 <RCCEx_PLL2_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004480:	e012      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3324      	adds	r3, #36	; 0x24
 8004486:	2101      	movs	r1, #1
 8004488:	4618      	mov	r0, r3
 800448a:	f001 fd8f 	bl	8005fac <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004492:	e009      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
      break;
 8004498:	e006      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800449a:	bf00      	nop
 800449c:	e004      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800449e:	bf00      	nop
 80044a0:	e002      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044ae:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044bc:	4947      	ldr	r1, [pc, #284]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	658b      	str	r3, [r1, #88]	; 0x58
 80044c2:	e001      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d02f      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044dc:	d00e      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x510>
 80044de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e2:	d814      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d015      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80044e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ec:	d10f      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	4a3a      	ldr	r2, [pc, #232]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80044fa:	e00c      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	2101      	movs	r1, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f001 fca0 	bl	8005e48 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800450c:	e003      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
      break;
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800451c:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004528:	492c      	ldr	r1, [pc, #176]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800452a:	4313      	orrs	r3, r2
 800452c:	650b      	str	r3, [r1, #80]	; 0x50
 800452e:	e001      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d032      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	2b03      	cmp	r3, #3
 8004546:	d81b      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004587 	.word	0x08004587
 8004554:	08004561 	.word	0x08004561
 8004558:	0800456f 	.word	0x0800456f
 800455c:	08004587 	.word	0x08004587
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004560:	4b1e      	ldr	r3, [pc, #120]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800456c:	e00c      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2102      	movs	r1, #2
 8004574:	4618      	mov	r0, r3
 8004576:	f001 fc67 	bl	8005e48 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
      break;
 8004584:	e000      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	f023 0203 	bic.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	4910      	ldr	r1, [pc, #64]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045a0:	e001      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 808a 	beq.w	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045c0:	f7fc f806 	bl	80005d0 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045c6:	e00d      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c8:	f7fc f802 	bl	80005d0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	; 0x64
 80045d4:	d906      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	75fb      	strb	r3, [r7, #23]
        break;
 80045da:	e009      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80045dc:	58024400 	.word	0x58024400
 80045e0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e4:	4bb9      	ldr	r3, [pc, #740]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0eb      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d166      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045f6:	4bb6      	ldr	r3, [pc, #728]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004600:	4053      	eors	r3, r2
 8004602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004606:	2b00      	cmp	r3, #0
 8004608:	d013      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800460a:	4bb1      	ldr	r3, [pc, #708]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004614:	4bae      	ldr	r3, [pc, #696]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	4aad      	ldr	r2, [pc, #692]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004620:	4bab      	ldr	r3, [pc, #684]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4aaa      	ldr	r2, [pc, #680]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800462c:	4aa8      	ldr	r2, [pc, #672]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463c:	d115      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463e:	f7fb ffc7 	bl	80005d0 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004644:	e00b      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fb ffc3 	bl	80005d0 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	; 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d902      	bls.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	75fb      	strb	r3, [r7, #23]
            break;
 800465c:	e005      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800465e:	4b9c      	ldr	r3, [pc, #624]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ed      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d126      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467e:	d10d      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004680:	4b93      	ldr	r3, [pc, #588]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800468e:	0919      	lsrs	r1, r3, #4
 8004690:	4b90      	ldr	r3, [pc, #576]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004692:	400b      	ands	r3, r1
 8004694:	498e      	ldr	r1, [pc, #568]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	610b      	str	r3, [r1, #16]
 800469a:	e005      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800469c:	4b8c      	ldr	r3, [pc, #560]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	4a8b      	ldr	r2, [pc, #556]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046a6:	6113      	str	r3, [r2, #16]
 80046a8:	4b89      	ldr	r3, [pc, #548]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b6:	4986      	ldr	r1, [pc, #536]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	670b      	str	r3, [r1, #112]	; 0x70
 80046bc:	e004      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	75bb      	strb	r3, [r7, #22]
 80046c2:	e001      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d07e      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d8:	2b28      	cmp	r3, #40	; 0x28
 80046da:	d867      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080047b3 	.word	0x080047b3
 80046e8:	080047ad 	.word	0x080047ad
 80046ec:	080047ad 	.word	0x080047ad
 80046f0:	080047ad 	.word	0x080047ad
 80046f4:	080047ad 	.word	0x080047ad
 80046f8:	080047ad 	.word	0x080047ad
 80046fc:	080047ad 	.word	0x080047ad
 8004700:	080047ad 	.word	0x080047ad
 8004704:	08004789 	.word	0x08004789
 8004708:	080047ad 	.word	0x080047ad
 800470c:	080047ad 	.word	0x080047ad
 8004710:	080047ad 	.word	0x080047ad
 8004714:	080047ad 	.word	0x080047ad
 8004718:	080047ad 	.word	0x080047ad
 800471c:	080047ad 	.word	0x080047ad
 8004720:	080047ad 	.word	0x080047ad
 8004724:	0800479b 	.word	0x0800479b
 8004728:	080047ad 	.word	0x080047ad
 800472c:	080047ad 	.word	0x080047ad
 8004730:	080047ad 	.word	0x080047ad
 8004734:	080047ad 	.word	0x080047ad
 8004738:	080047ad 	.word	0x080047ad
 800473c:	080047ad 	.word	0x080047ad
 8004740:	080047ad 	.word	0x080047ad
 8004744:	080047b3 	.word	0x080047b3
 8004748:	080047ad 	.word	0x080047ad
 800474c:	080047ad 	.word	0x080047ad
 8004750:	080047ad 	.word	0x080047ad
 8004754:	080047ad 	.word	0x080047ad
 8004758:	080047ad 	.word	0x080047ad
 800475c:	080047ad 	.word	0x080047ad
 8004760:	080047ad 	.word	0x080047ad
 8004764:	080047b3 	.word	0x080047b3
 8004768:	080047ad 	.word	0x080047ad
 800476c:	080047ad 	.word	0x080047ad
 8004770:	080047ad 	.word	0x080047ad
 8004774:	080047ad 	.word	0x080047ad
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080047ad 	.word	0x080047ad
 8004780:	080047ad 	.word	0x080047ad
 8004784:	080047b3 	.word	0x080047b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	2101      	movs	r1, #1
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fb5a 	bl	8005e48 <RCCEx_PLL2_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004798:	e00c      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3324      	adds	r3, #36	; 0x24
 800479e:	2101      	movs	r1, #1
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 fc03 	bl	8005fac <RCCEx_PLL3_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80047aa:	e003      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	75fb      	strb	r3, [r7, #23]
      break;
 80047b0:	e000      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80047b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047ba:	4b45      	ldr	r3, [pc, #276]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c6:	4942      	ldr	r1, [pc, #264]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	654b      	str	r3, [r1, #84]	; 0x54
 80047cc:	e001      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d037      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d820      	bhi.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80047e6:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	0800482f 	.word	0x0800482f
 80047f0:	08004805 	.word	0x08004805
 80047f4:	08004817 	.word	0x08004817
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800482f 	.word	0x0800482f
 8004800:	0800482f 	.word	0x0800482f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f001 fb1c 	bl	8005e48 <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004814:	e00c      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3324      	adds	r3, #36	; 0x24
 800481a:	2101      	movs	r1, #1
 800481c:	4618      	mov	r0, r3
 800481e:	f001 fbc5 	bl	8005fac <RCCEx_PLL3_Config>
 8004822:	4603      	mov	r3, r0
 8004824:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
      break;
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800482e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004836:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	f023 0207 	bic.w	r2, r3, #7
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	4923      	ldr	r1, [pc, #140]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004844:	4313      	orrs	r3, r2
 8004846:	654b      	str	r3, [r1, #84]	; 0x54
 8004848:	e001      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d040      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004860:	2b05      	cmp	r3, #5
 8004862:	d821      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	080048af 	.word	0x080048af
 8004870:	08004885 	.word	0x08004885
 8004874:	08004897 	.word	0x08004897
 8004878:	080048af 	.word	0x080048af
 800487c:	080048af 	.word	0x080048af
 8004880:	080048af 	.word	0x080048af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	2101      	movs	r1, #1
 800488a:	4618      	mov	r0, r3
 800488c:	f001 fadc 	bl	8005e48 <RCCEx_PLL2_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004894:	e00c      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3324      	adds	r3, #36	; 0x24
 800489a:	2101      	movs	r1, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f001 fb85 	bl	8005fac <RCCEx_PLL3_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048a6:	e003      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
      break;
 80048ac:	e000      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80048ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d110      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	f023 0207 	bic.w	r2, r3, #7
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c4:	4902      	ldr	r1, [pc, #8]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	658b      	str	r3, [r1, #88]	; 0x58
 80048ca:	e007      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80048cc:	58024800 	.word	0x58024800
 80048d0:	58024400 	.word	0x58024400
 80048d4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d04b      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048f2:	d02e      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80048f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048f8:	d828      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80048fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fe:	d02a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004904:	d822      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004906:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800490a:	d026      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800490c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004910:	d81c      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004916:	d010      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800491c:	d816      	bhi.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01d      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004926:	d111      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f001 fa8a 	bl	8005e48 <RCCEx_PLL2_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004938:	e012      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3324      	adds	r3, #36	; 0x24
 800493e:	2102      	movs	r1, #2
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fb33 	bl	8005fac <RCCEx_PLL3_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800494a:	e009      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
      break;
 8004950:	e006      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004952:	bf00      	nop
 8004954:	e004      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800495e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004966:	4bb2      	ldr	r3, [pc, #712]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004974:	49ae      	ldr	r1, [pc, #696]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004976:	4313      	orrs	r3, r2
 8004978:	654b      	str	r3, [r1, #84]	; 0x54
 800497a:	e001      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d04b      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004992:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004996:	d02e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004998:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800499c:	d828      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a2:	d02a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	d822      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80049aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ae:	d026      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80049b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b4:	d81c      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80049b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ba:	d010      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80049bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c0:	d816      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01d      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ca:	d111      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	2100      	movs	r1, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 fa38 	bl	8005e48 <RCCEx_PLL2_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80049dc:	e012      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3324      	adds	r3, #36	; 0x24
 80049e2:	2102      	movs	r1, #2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 fae1 	bl	8005fac <RCCEx_PLL3_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80049ee:	e009      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
      break;
 80049f4:	e006      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80049f6:	bf00      	nop
 80049f8:	e004      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a0a:	4b89      	ldr	r3, [pc, #548]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a18:	4985      	ldr	r1, [pc, #532]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a1e:	e001      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d04b      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a3a:	d02e      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004a3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a40:	d828      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a46:	d02a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4c:	d822      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a52:	d026      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004a54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a58:	d81c      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a5e:	d010      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a64:	d816      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01d      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6e:	d111      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	2100      	movs	r1, #0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f9e6 	bl	8005e48 <RCCEx_PLL2_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a80:	e012      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3324      	adds	r3, #36	; 0x24
 8004a86:	2102      	movs	r1, #2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fa8f 	bl	8005fac <RCCEx_PLL3_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a92:	e009      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	75fb      	strb	r3, [r7, #23]
      break;
 8004a98:	e006      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e004      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004aae:	4b60      	ldr	r3, [pc, #384]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004abc:	495c      	ldr	r1, [pc, #368]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	658b      	str	r3, [r1, #88]	; 0x58
 8004ac2:	e001      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d018      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004adc:	d10a      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3324      	adds	r3, #36	; 0x24
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 fa61 	bl	8005fac <RCCEx_PLL3_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004af4:	4b4e      	ldr	r3, [pc, #312]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b00:	494b      	ldr	r1, [pc, #300]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1c:	d10a      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3324      	adds	r3, #36	; 0x24
 8004b22:	2102      	movs	r1, #2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 fa41 	bl	8005fac <RCCEx_PLL3_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b34:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	493b      	ldr	r1, [pc, #236]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d034      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b5e:	d01d      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b64:	d817      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6e:	d009      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b70:	e011      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 f965 	bl	8005e48 <RCCEx_PLL2_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b82:	e00c      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3324      	adds	r3, #36	; 0x24
 8004b88:	2102      	movs	r1, #2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 fa0e 	bl	8005fac <RCCEx_PLL3_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b94:	e003      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9a:	e000      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ba4:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bb2:	491f      	ldr	r1, [pc, #124]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	658b      	str	r3, [r1, #88]	; 0x58
 8004bb8:	e001      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d036      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bd4:	d01c      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004bd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bda:	d816      	bhi.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be0:	d003      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004be6:	d007      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004be8:	e00f      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004bf6:	e00c      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3324      	adds	r3, #36	; 0x24
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 f9d4 	bl	8005fac <RCCEx_PLL3_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c08:	e003      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c0e:	e000      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10d      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c26:	4902      	ldr	r1, [pc, #8]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	654b      	str	r3, [r1, #84]	; 0x54
 8004c2c:	e004      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004c2e:	bf00      	nop
 8004c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d029      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d007      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004c52:	e00f      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c54:	4b61      	ldr	r3, [pc, #388]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	4a60      	ldr	r2, [pc, #384]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c60:	e00b      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	2102      	movs	r1, #2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 f8ed 	bl	8005e48 <RCCEx_PLL2_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
      break;
 8004c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c80:	4b56      	ldr	r3, [pc, #344]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8c:	4953      	ldr	r1, [pc, #332]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c92:	e001      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	2102      	movs	r1, #2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 f97e 	bl	8005fac <RCCEx_PLL3_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d030      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cce:	d017      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd4:	d811      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cda:	d013      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce0:	d80b      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d010      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cea:	d106      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cec:	4b3b      	ldr	r3, [pc, #236]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4a3a      	ldr	r2, [pc, #232]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004cf8:	e007      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfe:	e004      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d00:	bf00      	nop
 8004d02:	e002      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d04:	bf00      	nop
 8004d06:	e000      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d10:	4b32      	ldr	r3, [pc, #200]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d1c:	492f      	ldr	r1, [pc, #188]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	654b      	str	r3, [r1, #84]	; 0x54
 8004d22:	e001      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d34:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d40:	4926      	ldr	r1, [pc, #152]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d52:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d5e:	491f      	ldr	r1, [pc, #124]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00d      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d70:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d7a:	6113      	str	r3, [r2, #16]
 8004d7c:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d86:	4915      	ldr	r1, [pc, #84]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da08      	bge.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da0:	490e      	ldr	r1, [pc, #56]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc0:	4906      	ldr	r1, [pc, #24]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004dc6:	7dbb      	ldrb	r3, [r7, #22]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e000      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	58024400 	.word	0x58024400

08004de0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b090      	sub	sp, #64	; 0x40
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dee:	f040 8089 	bne.w	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004df2:	4b95      	ldr	r3, [pc, #596]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d87d      	bhi.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e1d 	.word	0x08004e1d
 8004e0c:	08004e41 	.word	0x08004e41
 8004e10:	08004e65 	.word	0x08004e65
 8004e14:	08004ef9 	.word	0x08004ef9
 8004e18:	08004e89 	.word	0x08004e89

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e1c:	4b8a      	ldr	r3, [pc, #552]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e28:	d107      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 feb8 	bl	8005ba4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e38:	e3ed      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e3e:	e3ea      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e40:	4b81      	ldr	r3, [pc, #516]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e4e:	f107 0318 	add.w	r3, r7, #24
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fbfe 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e5c:	e3db      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e62:	e3d8      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e64:	4b78      	ldr	r3, [pc, #480]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e70:	d107      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e72:	f107 030c 	add.w	r3, r7, #12
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fd40 	bl	80058fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e80:	e3c9      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e86:	e3c6      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e88:	4b6f      	ldr	r3, [pc, #444]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e90:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e92:	4b6d      	ldr	r3, [pc, #436]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d109      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ea4:	4b68      	ldr	r3, [pc, #416]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	08db      	lsrs	r3, r3, #3
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	4a67      	ldr	r2, [pc, #412]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb6:	e01e      	b.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004eb8:	4b63      	ldr	r3, [pc, #396]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec4:	d106      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ecc:	d102      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ece:	4b60      	ldr	r3, [pc, #384]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed2:	e010      	b.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ed4:	4b5c      	ldr	r3, [pc, #368]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee8:	d102      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004eea:	4b5a      	ldr	r3, [pc, #360]	; (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eee:	e002      	b.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ef4:	e38f      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004ef6:	e38e      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ef8:	4b57      	ldr	r3, [pc, #348]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004efc:	e38b      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f02:	e388      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0a:	f040 80a7 	bne.w	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004f0e:	4b4e      	ldr	r3, [pc, #312]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f1e:	d054      	beq.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f26:	f200 808b 	bhi.w	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f30:	f000 8083 	beq.w	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f3a:	f200 8081 	bhi.w	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f44:	d02f      	beq.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f4c:	d878      	bhi.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f5a:	d012      	beq.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004f5c:	e070      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f5e:	4b3a      	ldr	r3, [pc, #232]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fe17 	bl	8005ba4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f7a:	e34c      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f80:	e349      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f82:	4b31      	ldr	r3, [pc, #196]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f90:	f107 0318 	add.w	r3, r7, #24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fb5d 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f9e:	e33a      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa4:	e337      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fa6:	4b28      	ldr	r3, [pc, #160]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fb4:	f107 030c 	add.w	r3, r7, #12
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fc9f 	bl	80058fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fc2:	e328      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc8:	e325      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004fca:	4b1f      	ldr	r3, [pc, #124]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fd4:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d10c      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fe6:	4b18      	ldr	r3, [pc, #96]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	08db      	lsrs	r3, r3, #3
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	4a16      	ldr	r2, [pc, #88]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ff8:	e01e      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005006:	d106      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800500e:	d102      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005014:	e010      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005016:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005022:	d106      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502a:	d102      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005036:	e2ee      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005038:	e2ed      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800503a:	4b07      	ldr	r3, [pc, #28]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800503c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800503e:	e2ea      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005044:	e2e7      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005046:	bf00      	nop
 8005048:	58024400 	.word	0x58024400
 800504c:	03d09000 	.word	0x03d09000
 8005050:	003d0900 	.word	0x003d0900
 8005054:	017d7840 	.word	0x017d7840
 8005058:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005062:	f040 809c 	bne.w	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005066:	4b9e      	ldr	r3, [pc, #632]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800506e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005076:	d054      	beq.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800507e:	f200 808b 	bhi.w	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005088:	f000 8083 	beq.w	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005092:	f200 8081 	bhi.w	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800509c:	d02f      	beq.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050a4:	d878      	bhi.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050b2:	d012      	beq.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80050b4:	e070      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050b6:	4b8a      	ldr	r3, [pc, #552]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050c2:	d107      	bne.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fd6b 	bl	8005ba4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050d2:	e2a0      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050d8:	e29d      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050da:	4b81      	ldr	r3, [pc, #516]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e6:	d107      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050e8:	f107 0318 	add.w	r3, r7, #24
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fab1 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80050f6:	e28e      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050fc:	e28b      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050fe:	4b78      	ldr	r3, [pc, #480]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510a:	d107      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800510c:	f107 030c 	add.w	r3, r7, #12
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fbf3 	bl	80058fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800511a:	e27c      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005120:	e279      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005122:	4b6f      	ldr	r3, [pc, #444]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800512a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800512c:	4b6c      	ldr	r3, [pc, #432]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b04      	cmp	r3, #4
 8005136:	d10c      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800513e:	4b68      	ldr	r3, [pc, #416]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	08db      	lsrs	r3, r3, #3
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	4a66      	ldr	r2, [pc, #408]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800514a:	fa22 f303 	lsr.w	r3, r2, r3
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005150:	e01e      	b.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005152:	4b63      	ldr	r3, [pc, #396]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515e:	d106      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005166:	d102      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005168:	4b5f      	ldr	r3, [pc, #380]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800516c:	e010      	b.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800516e:	4b5c      	ldr	r3, [pc, #368]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800517a:	d106      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800517c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005182:	d102      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005184:	4b59      	ldr	r3, [pc, #356]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005188:	e002      	b.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800518e:	e242      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005190:	e241      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005192:	4b57      	ldr	r3, [pc, #348]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005196:	e23e      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800519c:	e23b      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a4:	f040 80a6 	bne.w	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80051a8:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b8:	d054      	beq.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051c0:	f200 808b 	bhi.w	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051ca:	f000 8083 	beq.w	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051d4:	f200 8081 	bhi.w	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051de:	d02f      	beq.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80051e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e6:	d878      	bhi.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d004      	beq.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f4:	d012      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80051f6:	e070      	b.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051f8:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005204:	d107      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fcca 	bl	8005ba4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005214:	e1ff      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800521a:	e1fc      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800521c:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005228:	d107      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800522a:	f107 0318 	add.w	r3, r7, #24
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fa10 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005238:	e1ed      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800523e:	e1ea      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005240:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800524c:	d107      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800524e:	f107 030c 	add.w	r3, r7, #12
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fb52 	bl	80058fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800525c:	e1db      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005262:	e1d8      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005264:	4b1e      	ldr	r3, [pc, #120]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800526c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800526e:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b04      	cmp	r3, #4
 8005278:	d10c      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005280:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	08db      	lsrs	r3, r3, #3
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005292:	e01e      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005294:	4b12      	ldr	r3, [pc, #72]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a0:	d106      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052a8:	d102      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ae:	e010      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052bc:	d106      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80052be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c4:	d102      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80052c6:	4b09      	ldr	r3, [pc, #36]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ca:	e002      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80052d0:	e1a1      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80052d2:	e1a0      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80052d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052d8:	e19d      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052de:	e19a      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80052e0:	58024400 	.word	0x58024400
 80052e4:	03d09000 	.word	0x03d09000
 80052e8:	003d0900 	.word	0x003d0900
 80052ec:	017d7840 	.word	0x017d7840
 80052f0:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052fa:	d173      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80052fc:	4b9a      	ldr	r3, [pc, #616]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005304:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800530c:	d02f      	beq.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005314:	d863      	bhi.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005322:	d012      	beq.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8005324:	e05b      	b.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005326:	4b90      	ldr	r3, [pc, #576]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005332:	d107      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005334:	f107 0318 	add.w	r3, r7, #24
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f98b 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005342:	e168      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005348:	e165      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800534a:	4b87      	ldr	r3, [pc, #540]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005356:	d107      	bne.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4618      	mov	r0, r3
 800535e:	f000 facd 	bl	80058fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005366:	e156      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800536c:	e153      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800536e:	4b7e      	ldr	r3, [pc, #504]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005372:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005376:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005378:	4b7b      	ldr	r3, [pc, #492]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b04      	cmp	r3, #4
 8005382:	d10c      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800538a:	4b77      	ldr	r3, [pc, #476]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	08db      	lsrs	r3, r3, #3
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	4a75      	ldr	r2, [pc, #468]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005396:	fa22 f303 	lsr.w	r3, r2, r3
 800539a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800539c:	e01e      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800539e:	4b72      	ldr	r3, [pc, #456]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	d106      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053b2:	d102      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80053b4:	4b6e      	ldr	r3, [pc, #440]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b8:	e010      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053ba:	4b6b      	ldr	r3, [pc, #428]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053c6:	d106      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ce:	d102      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80053d0:	4b68      	ldr	r3, [pc, #416]	; (8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d4:	e002      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80053da:	e11c      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80053dc:	e11b      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053e2:	e118      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ea:	d133      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80053ec:	4b5e      	ldr	r3, [pc, #376]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005402:	d012      	beq.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005404:	e023      	b.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005406:	4b58      	ldr	r3, [pc, #352]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005412:	d107      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fbc3 	bl	8005ba4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005422:	e0f8      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005428:	e0f5      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800542a:	4b4f      	ldr	r3, [pc, #316]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005436:	d107      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005438:	f107 0318 	add.w	r3, r7, #24
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f909 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005446:	e0e6      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800544c:	e0e3      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005452:	e0e0      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800545a:	f040 808d 	bne.w	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800545e:	4b42      	ldr	r3, [pc, #264]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800546e:	d06b      	beq.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005476:	d874      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547e:	d056      	beq.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005486:	d86c      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800548e:	d03b      	beq.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005496:	d864      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800549e:	d021      	beq.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a6:	d85c      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054b4:	d004      	beq.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80054b6:	e054      	b.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80054b8:	f000 f8b6 	bl	8005628 <HAL_RCCEx_GetD3PCLK1Freq>
 80054bc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80054be:	e0aa      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054c0:	4b29      	ldr	r3, [pc, #164]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054cc:	d107      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ce:	f107 0318 	add.w	r3, r7, #24
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f8be 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054dc:	e09b      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054e2:	e098      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054e4:	4b20      	ldr	r3, [pc, #128]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f0:	d107      	bne.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054f2:	f107 030c 	add.w	r3, r7, #12
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fa00 	bl	80058fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005500:	e089      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005506:	e086      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005508:	4b17      	ldr	r3, [pc, #92]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b04      	cmp	r3, #4
 8005512:	d109      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	08db      	lsrs	r3, r3, #3
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005526:	e076      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800552c:	e073      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800552e:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553a:	d102      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005540:	e069      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005546:	e066      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005554:	d102      	bne.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8005556:	4b07      	ldr	r3, [pc, #28]	; (8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800555a:	e05c      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005560:	e059      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005566:	e056      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005568:	58024400 	.word	0x58024400
 800556c:	03d09000 	.word	0x03d09000
 8005570:	003d0900 	.word	0x003d0900
 8005574:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557e:	d148      	bne.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005588:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005590:	d02a      	beq.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005598:	d838      	bhi.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055a6:	d00d      	beq.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80055a8:	e030      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055aa:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b6:	d102      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80055b8:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055bc:	e02b      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055c2:	e028      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055c4:	4b16      	ldr	r3, [pc, #88]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055d0:	d107      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fae4 	bl	8005ba4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055e0:	e019      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055e6:	e016      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055e8:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f4:	d107      	bne.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f6:	f107 0318 	add.w	r3, r7, #24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f82a 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005604:	e007      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005606:	2300      	movs	r3, #0
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800560a:	e004      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005610:	e001      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005618:	4618      	mov	r0, r3
 800561a:	3740      	adds	r7, #64	; 0x40
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	58024400 	.word	0x58024400
 8005624:	017d7840 	.word	0x017d7840

08005628 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800562c:	f7fe fcae 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8005630:	4602      	mov	r2, r0
 8005632:	4b06      	ldr	r3, [pc, #24]	; (800564c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	091b      	lsrs	r3, r3, #4
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	4904      	ldr	r1, [pc, #16]	; (8005650 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800563e:	5ccb      	ldrb	r3, [r1, r3]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	58024400 	.word	0x58024400
 8005650:	08009728 	.word	0x08009728

08005654 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	; 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800565c:	4ba1      	ldr	r3, [pc, #644]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005666:	4b9f      	ldr	r3, [pc, #636]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	0b1b      	lsrs	r3, r3, #12
 800566c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005670:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005672:	4b9c      	ldr	r3, [pc, #624]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	091b      	lsrs	r3, r3, #4
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800567e:	4b99      	ldr	r3, [pc, #612]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	08db      	lsrs	r3, r3, #3
 8005684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8111 	beq.w	80058c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	f000 8083 	beq.w	80057b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	f200 80a1 	bhi.w	80057f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d056      	beq.n	800576c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80056be:	e099      	b.n	80057f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c0:	4b88      	ldr	r3, [pc, #544]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d02d      	beq.n	8005728 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056cc:	4b85      	ldr	r3, [pc, #532]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	08db      	lsrs	r3, r3, #3
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	4a84      	ldr	r2, [pc, #528]	; (80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f6:	4b7b      	ldr	r3, [pc, #492]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005706:	ed97 6a03 	vldr	s12, [r7, #12]
 800570a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800570e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005726:	e087      	b.n	8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005732:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573a:	4b6a      	ldr	r3, [pc, #424]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a03 	vldr	s12, [r7, #12]
 800574e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800576a:	e065      	b.n	8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800577a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577e:	4b59      	ldr	r3, [pc, #356]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005792:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ae:	e043      	b.n	8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80058f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80057be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c2:	4b48      	ldr	r3, [pc, #288]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057f2:	e021      	b.n	8005838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b37      	ldr	r3, [pc, #220]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a03 	vldr	s12, [r7, #12]
 800581a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005836:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005838:	4b2a      	ldr	r3, [pc, #168]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	0a5b      	lsrs	r3, r3, #9
 800583e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800584e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005852:	edd7 6a07 	vldr	s13, [r7, #28]
 8005856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800585a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800585e:	ee17 2a90 	vmov	r2, s15
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005866:	4b1f      	ldr	r3, [pc, #124]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	0c1b      	lsrs	r3, r3, #16
 800586c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800587c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005880:	edd7 6a07 	vldr	s13, [r7, #28]
 8005884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800588c:	ee17 2a90 	vmov	r2, s15
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	0e1b      	lsrs	r3, r3, #24
 800589a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ba:	ee17 2a90 	vmov	r2, s15
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058c2:	e008      	b.n	80058d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	609a      	str	r2, [r3, #8]
}
 80058d6:	bf00      	nop
 80058d8:	3724      	adds	r7, #36	; 0x24
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	58024400 	.word	0x58024400
 80058e8:	03d09000 	.word	0x03d09000
 80058ec:	46000000 	.word	0x46000000
 80058f0:	4c742400 	.word	0x4c742400
 80058f4:	4a742400 	.word	0x4a742400
 80058f8:	4bbebc20 	.word	0x4bbebc20

080058fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	; 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005904:	4ba1      	ldr	r3, [pc, #644]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800590e:	4b9f      	ldr	r3, [pc, #636]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	0d1b      	lsrs	r3, r3, #20
 8005914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005918:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800591a:	4b9c      	ldr	r3, [pc, #624]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	0a1b      	lsrs	r3, r3, #8
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005926:	4b99      	ldr	r3, [pc, #612]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	08db      	lsrs	r3, r3, #3
 800592c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8111 	beq.w	8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b02      	cmp	r3, #2
 800594e:	f000 8083 	beq.w	8005a58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b02      	cmp	r3, #2
 8005956:	f200 80a1 	bhi.w	8005a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d056      	beq.n	8005a14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005966:	e099      	b.n	8005a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005968:	4b88      	ldr	r3, [pc, #544]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d02d      	beq.n	80059d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005974:	4b85      	ldr	r3, [pc, #532]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	08db      	lsrs	r3, r3, #3
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	4a84      	ldr	r2, [pc, #528]	; (8005b90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
 8005984:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	ee07 3a90 	vmov	s15, r3
 800598c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599e:	4b7b      	ldr	r3, [pc, #492]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80059ce:	e087      	b.n	8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80059de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e2:	4b6a      	ldr	r3, [pc, #424]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a12:	e065      	b.n	8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a26:	4b59      	ldr	r3, [pc, #356]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a56:	e043      	b.n	8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6a:	4b48      	ldr	r3, [pc, #288]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a9a:	e021      	b.n	8005ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aae:	4b37      	ldr	r3, [pc, #220]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ada:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ade:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005ae0:	4b2a      	ldr	r3, [pc, #168]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	0a5b      	lsrs	r3, r3, #9
 8005ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b06:	ee17 2a90 	vmov	r2, s15
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005b0e:	4b1f      	ldr	r3, [pc, #124]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	0c1b      	lsrs	r3, r3, #16
 8005b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b34:	ee17 2a90 	vmov	r2, s15
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005b3c:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	0e1b      	lsrs	r3, r3, #24
 8005b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b62:	ee17 2a90 	vmov	r2, s15
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b6a:	e008      	b.n	8005b7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	609a      	str	r2, [r3, #8]
}
 8005b7e:	bf00      	nop
 8005b80:	3724      	adds	r7, #36	; 0x24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	03d09000 	.word	0x03d09000
 8005b94:	46000000 	.word	0x46000000
 8005b98:	4c742400 	.word	0x4c742400
 8005b9c:	4a742400 	.word	0x4a742400
 8005ba0:	4bbebc20 	.word	0x4bbebc20

08005ba4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b089      	sub	sp, #36	; 0x24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bac:	4ba0      	ldr	r3, [pc, #640]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005bb6:	4b9e      	ldr	r3, [pc, #632]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005bc2:	4b9b      	ldr	r3, [pc, #620]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005bcc:	4b98      	ldr	r3, [pc, #608]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	08db      	lsrs	r3, r3, #3
 8005bd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	fb02 f303 	mul.w	r3, r2, r3
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8111 	beq.w	8005e12 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	f000 8083 	beq.w	8005cfe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	f200 80a1 	bhi.w	8005d42 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d056      	beq.n	8005cba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005c0c:	e099      	b.n	8005d42 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c0e:	4b88      	ldr	r3, [pc, #544]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d02d      	beq.n	8005c76 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c1a:	4b85      	ldr	r3, [pc, #532]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	08db      	lsrs	r3, r3, #3
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	4a83      	ldr	r2, [pc, #524]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005c26:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c44:	4b7a      	ldr	r3, [pc, #488]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c54:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c58:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005e38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c70:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c74:	e087      	b.n	8005d86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c80:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005e3c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c88:	4b69      	ldr	r3, [pc, #420]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c90:	ee07 3a90 	vmov	s15, r3
 8005c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c98:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c9c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005e38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb8:	e065      	b.n	8005d86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	ee07 3a90 	vmov	s15, r3
 8005cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ccc:	4b58      	ldr	r3, [pc, #352]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005e38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cfc:	e043      	b.n	8005d86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d08:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d10:	4b47      	ldr	r3, [pc, #284]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d20:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d24:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005e38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d40:	e021      	b.n	8005d86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005e3c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d54:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d64:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d68:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005e38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d84:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005d86:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	0a5b      	lsrs	r3, r3, #9
 8005d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dac:	ee17 2a90 	vmov	r2, s15
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005db4:	4b1e      	ldr	r3, [pc, #120]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dda:	ee17 2a90 	vmov	r2, s15
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005de2:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	0e1b      	lsrs	r3, r3, #24
 8005de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dec:	ee07 3a90 	vmov	s15, r3
 8005df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e08:	ee17 2a90 	vmov	r2, s15
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e10:	e008      	b.n	8005e24 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	bf00      	nop
 8005e26:	3724      	adds	r7, #36	; 0x24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	58024400 	.word	0x58024400
 8005e34:	03d09000 	.word	0x03d09000
 8005e38:	46000000 	.word	0x46000000
 8005e3c:	4c742400 	.word	0x4c742400
 8005e40:	4a742400 	.word	0x4a742400
 8005e44:	4bbebc20 	.word	0x4bbebc20

08005e48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e56:	4b53      	ldr	r3, [pc, #332]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d101      	bne.n	8005e66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e099      	b.n	8005f9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e66:	4b4f      	ldr	r3, [pc, #316]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a4e      	ldr	r2, [pc, #312]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e72:	f7fa fbad 	bl	80005d0 <HAL_GetTick>
 8005e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e78:	e008      	b.n	8005e8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e7a:	f7fa fba9 	bl	80005d0 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e086      	b.n	8005f9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e8c:	4b45      	ldr	r3, [pc, #276]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f0      	bne.n	8005e7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e98:	4b42      	ldr	r3, [pc, #264]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	493f      	ldr	r1, [pc, #252]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	628b      	str	r3, [r1, #40]	; 0x28
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	025b      	lsls	r3, r3, #9
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	041b      	lsls	r3, r3, #16
 8005eca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	061b      	lsls	r3, r3, #24
 8005ed8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005edc:	4931      	ldr	r1, [pc, #196]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ee2:	4b30      	ldr	r3, [pc, #192]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	492d      	ldr	r1, [pc, #180]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ef4:	4b2b      	ldr	r3, [pc, #172]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	f023 0220 	bic.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	4928      	ldr	r1, [pc, #160]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f06:	4b27      	ldr	r3, [pc, #156]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	4a26      	ldr	r2, [pc, #152]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f0c:	f023 0310 	bic.w	r3, r3, #16
 8005f10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <RCCEx_PLL2_Config+0x160>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	69d2      	ldr	r2, [r2, #28]
 8005f1e:	00d2      	lsls	r2, r2, #3
 8005f20:	4920      	ldr	r1, [pc, #128]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f26:	4b1f      	ldr	r3, [pc, #124]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	4a1e      	ldr	r2, [pc, #120]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f2c:	f043 0310 	orr.w	r3, r3, #16
 8005f30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f38:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f44:	e00f      	b.n	8005f66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d106      	bne.n	8005f5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f4c:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f58:	e005      	b.n	8005f66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	4a11      	ldr	r2, [pc, #68]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f66:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a0e      	ldr	r2, [pc, #56]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f72:	f7fa fb2d 	bl	80005d0 <HAL_GetTick>
 8005f76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f78:	e008      	b.n	8005f8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f7a:	f7fa fb29 	bl	80005d0 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e006      	b.n	8005f9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <RCCEx_PLL2_Config+0x15c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0f0      	beq.n	8005f7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	58024400 	.word	0x58024400
 8005fa8:	ffff0007 	.word	0xffff0007

08005fac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fba:	4b53      	ldr	r3, [pc, #332]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d101      	bne.n	8005fca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e099      	b.n	80060fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005fca:	4b4f      	ldr	r3, [pc, #316]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a4e      	ldr	r2, [pc, #312]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd6:	f7fa fafb 	bl	80005d0 <HAL_GetTick>
 8005fda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fdc:	e008      	b.n	8005ff0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005fde:	f7fa faf7 	bl	80005d0 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e086      	b.n	80060fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ff0:	4b45      	ldr	r3, [pc, #276]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f0      	bne.n	8005fde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ffc:	4b42      	ldr	r3, [pc, #264]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	051b      	lsls	r3, r3, #20
 800600a:	493f      	ldr	r1, [pc, #252]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800600c:	4313      	orrs	r3, r2
 800600e:	628b      	str	r3, [r1, #40]	; 0x28
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	3b01      	subs	r3, #1
 8006016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	3b01      	subs	r3, #1
 8006020:	025b      	lsls	r3, r3, #9
 8006022:	b29b      	uxth	r3, r3
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	3b01      	subs	r3, #1
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	3b01      	subs	r3, #1
 800603a:	061b      	lsls	r3, r3, #24
 800603c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006040:	4931      	ldr	r1, [pc, #196]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006042:	4313      	orrs	r3, r2
 8006044:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006046:	4b30      	ldr	r3, [pc, #192]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	492d      	ldr	r1, [pc, #180]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006054:	4313      	orrs	r3, r2
 8006056:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006058:	4b2b      	ldr	r3, [pc, #172]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	4928      	ldr	r1, [pc, #160]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800606a:	4b27      	ldr	r3, [pc, #156]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	4a26      	ldr	r2, [pc, #152]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006076:	4b24      	ldr	r3, [pc, #144]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607a:	4b24      	ldr	r3, [pc, #144]	; (800610c <RCCEx_PLL3_Config+0x160>)
 800607c:	4013      	ands	r3, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	69d2      	ldr	r2, [r2, #28]
 8006082:	00d2      	lsls	r2, r2, #3
 8006084:	4920      	ldr	r1, [pc, #128]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006086:	4313      	orrs	r3, r2
 8006088:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800608a:	4b1f      	ldr	r3, [pc, #124]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800609c:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	4a19      	ldr	r2, [pc, #100]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060a8:	e00f      	b.n	80060ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d106      	bne.n	80060be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80060b0:	4b15      	ldr	r3, [pc, #84]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060bc:	e005      	b.n	80060ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	4a11      	ldr	r2, [pc, #68]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a0e      	ldr	r2, [pc, #56]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d6:	f7fa fa7b 	bl	80005d0 <HAL_GetTick>
 80060da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060dc:	e008      	b.n	80060f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80060de:	f7fa fa77 	bl	80005d0 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e006      	b.n	80060fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <RCCEx_PLL3_Config+0x15c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f0      	beq.n	80060de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400
 800610c:	ffff0007 	.word	0xffff0007

08006110 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d904      	bls.n	800612e <HAL_SAI_InitProtocol+0x1e>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	3b03      	subs	r3, #3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d812      	bhi.n	8006152 <HAL_SAI_InitProtocol+0x42>
 800612c:	e008      	b.n	8006140 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fb1f 	bl	8006778 <SAI_InitI2S>
 800613a:	4603      	mov	r3, r0
 800613c:	75fb      	strb	r3, [r7, #23]
      break;
 800613e:	e00b      	b.n	8006158 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fbc8 	bl	80068dc <SAI_InitPCM>
 800614c:	4603      	mov	r3, r0
 800614e:	75fb      	strb	r3, [r7, #23]
      break;
 8006150:	e002      	b.n	8006158 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	75fb      	strb	r3, [r7, #23]
      break;
 8006156:	bf00      	nop
  }

  if (status == HAL_OK)
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f808 	bl	8006174 <HAL_SAI_Init>
 8006164:	4603      	mov	r3, r0
 8006166:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006168:	7dfb      	ldrb	r3, [r7, #23]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e224      	b.n	80065d0 <HAL_SAI_Init+0x45c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800618c:	2b01      	cmp	r3, #1
 800618e:	d113      	bne.n	80061b8 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4aa1      	ldr	r2, [pc, #644]	; (800641c <HAL_SAI_Init+0x2a8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <HAL_SAI_Init+0x30>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4aa0      	ldr	r2, [pc, #640]	; (8006420 <HAL_SAI_Init+0x2ac>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d107      	bne.n	80061b4 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d103      	bne.n	80061b4 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e20b      	b.n	80065d0 <HAL_SAI_Init+0x45c>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a97      	ldr	r2, [pc, #604]	; (800641c <HAL_SAI_Init+0x2a8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <HAL_SAI_Init+0x58>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a97      	ldr	r2, [pc, #604]	; (8006424 <HAL_SAI_Init+0x2b0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d102      	bne.n	80061d2 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 80061cc:	4b96      	ldr	r3, [pc, #600]	; (8006428 <HAL_SAI_Init+0x2b4>)
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e00e      	b.n	80061f0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a92      	ldr	r2, [pc, #584]	; (8006420 <HAL_SAI_Init+0x2ac>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d004      	beq.n	80061e6 <HAL_SAI_Init+0x72>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a92      	ldr	r2, [pc, #584]	; (800642c <HAL_SAI_Init+0x2b8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d102      	bne.n	80061ec <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 80061e6:	4b92      	ldr	r3, [pc, #584]	; (8006430 <HAL_SAI_Init+0x2bc>)
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e001      	b.n	80061f0 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e1ef      	b.n	80065d0 <HAL_SAI_Init+0x45c>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d125      	bne.n	8006248 <HAL_SAI_Init+0xd4>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    /* Reset callback pointers to the weak predefined callbacks */
    hsai->RxCpltCallback     = HAL_SAI_RxCpltCallback;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a8b      	ldr	r2, [pc, #556]	; (8006434 <HAL_SAI_Init+0x2c0>)
 8006208:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hsai->RxHalfCpltCallback = HAL_SAI_RxHalfCpltCallback;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a8a      	ldr	r2, [pc, #552]	; (8006438 <HAL_SAI_Init+0x2c4>)
 8006210:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    hsai->TxCpltCallback     = HAL_SAI_TxCpltCallback;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a89      	ldr	r2, [pc, #548]	; (800643c <HAL_SAI_Init+0x2c8>)
 8006218:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hsai->TxHalfCpltCallback = HAL_SAI_TxHalfCpltCallback;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a88      	ldr	r2, [pc, #544]	; (8006440 <HAL_SAI_Init+0x2cc>)
 8006220:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hsai->ErrorCallback      = HAL_SAI_ErrorCallback;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a87      	ldr	r2, [pc, #540]	; (8006444 <HAL_SAI_Init+0x2d0>)
 8006228:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    if (hsai->MspInitCallback == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <HAL_SAI_Init+0xca>
    {
      hsai->MspInitCallback = HAL_SAI_MspInit;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a83      	ldr	r2, [pc, #524]	; (8006448 <HAL_SAI_Init+0x2d4>)
 800623a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }
    hsai->MspInitCallback(hsai);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	4798      	blx	r3
    HAL_SAI_MspInit(hsai);
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fc01 	bl	8006a50 <SAI_Disable>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_SAI_Init+0xe4>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e1bb      	b.n	80065d0 <HAL_SAI_Init+0x45c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d00c      	beq.n	8006282 <HAL_SAI_Init+0x10e>
 8006268:	2b02      	cmp	r3, #2
 800626a:	d80d      	bhi.n	8006288 <HAL_SAI_Init+0x114>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_SAI_Init+0x102>
 8006270:	2b01      	cmp	r3, #1
 8006272:	d003      	beq.n	800627c <HAL_SAI_Init+0x108>
 8006274:	e008      	b.n	8006288 <HAL_SAI_Init+0x114>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800627a:	e008      	b.n	800628e <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800627c:	2310      	movs	r3, #16
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006280:	e005      	b.n	800628e <HAL_SAI_Init+0x11a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006282:	2320      	movs	r3, #32
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006286:	e002      	b.n	800628e <HAL_SAI_Init+0x11a>
    default:
      tmpregisterGCR = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800628c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b05      	cmp	r3, #5
 8006294:	d821      	bhi.n	80062da <HAL_SAI_Init+0x166>
 8006296:	a201      	add	r2, pc, #4	; (adr r2, 800629c <HAL_SAI_Init+0x128>)
 8006298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629c:	080062b5 	.word	0x080062b5
 80062a0:	080062bb 	.word	0x080062bb
 80062a4:	080062c3 	.word	0x080062c3
 80062a8:	080062db 	.word	0x080062db
 80062ac:	080062db 	.word	0x080062db
 80062b0:	080062cb 	.word	0x080062cb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61fb      	str	r3, [r7, #28]
      break;
 80062b8:	e012      	b.n	80062e0 <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80062ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062be:	61fb      	str	r3, [r7, #28]
      break;
 80062c0:	e00e      	b.n	80062e0 <HAL_SAI_Init+0x16c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062c6:	61fb      	str	r3, [r7, #28]
      break;
 80062c8:	e00a      	b.n	80062e0 <HAL_SAI_Init+0x16c>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062ce:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	f043 0303 	orr.w	r3, r3, #3
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80062d8:	e002      	b.n	80062e0 <HAL_SAI_Init+0x16c>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
      break;
 80062de:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8084 	beq.w	80063f8 <HAL_SAI_Init+0x284>
  {
    uint32_t freq = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a48      	ldr	r2, [pc, #288]	; (800641c <HAL_SAI_Init+0x2a8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_SAI_Init+0x194>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a48      	ldr	r2, [pc, #288]	; (8006424 <HAL_SAI_Init+0x2b0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d104      	bne.n	8006312 <HAL_SAI_Init+0x19e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006308:	f44f 7080 	mov.w	r0, #256	; 0x100
 800630c:	f7fe fd68 	bl	8004de0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006310:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a42      	ldr	r2, [pc, #264]	; (8006420 <HAL_SAI_Init+0x2ac>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d104      	bne.n	8006326 <HAL_SAI_Init+0x1b2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800631c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006320:	f7fe fd5e 	bl	8004de0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006324:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a40      	ldr	r2, [pc, #256]	; (800642c <HAL_SAI_Init+0x2b8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d104      	bne.n	800633a <HAL_SAI_Init+0x1c6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006330:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006334:	f7fe fd54 	bl	8004de0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006338:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006342:	d120      	bne.n	8006386 <HAL_SAI_Init+0x212>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006348:	2b04      	cmp	r3, #4
 800634a:	d102      	bne.n	8006352 <HAL_SAI_Init+0x1de>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800634c:	2340      	movs	r3, #64	; 0x40
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e00a      	b.n	8006368 <HAL_SAI_Init+0x1f4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006356:	2b08      	cmp	r3, #8
 8006358:	d103      	bne.n	8006362 <HAL_SAI_Init+0x1ee>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800635a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e002      	b.n	8006368 <HAL_SAI_Init+0x1f4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006366:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4619      	mov	r1, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	fb02 f303 	mul.w	r3, r2, r3
 800637e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	e017      	b.n	80063b6 <HAL_SAI_Init+0x242>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800638e:	d101      	bne.n	8006394 <HAL_SAI_Init+0x220>
 8006390:	2302      	movs	r3, #2
 8006392:	e000      	b.n	8006396 <HAL_SAI_Init+0x222>
 8006394:	2301      	movs	r3, #1
 8006396:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	4619      	mov	r1, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80063b4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4a24      	ldr	r2, [pc, #144]	; (800644c <HAL_SAI_Init+0x2d8>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	08da      	lsrs	r2, r3, #3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80063c4:	6939      	ldr	r1, [r7, #16]
 80063c6:	4b21      	ldr	r3, [pc, #132]	; (800644c <HAL_SAI_Init+0x2d8>)
 80063c8:	fba3 2301 	umull	r2, r3, r3, r1
 80063cc:	08da      	lsrs	r2, r3, #3
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	1aca      	subs	r2, r1, r3
 80063d8:	2a08      	cmp	r2, #8
 80063da:	d904      	bls.n	80063e6 <HAL_SAI_Init+0x272>
    {
      hsai->Init.Mckdiv += 1U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d104      	bne.n	80063f8 <HAL_SAI_Init+0x284>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	085a      	lsrs	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_SAI_Init+0x294>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d123      	bne.n	8006450 <HAL_SAI_Init+0x2dc>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_SAI_Init+0x2a0>
 8006410:	2300      	movs	r3, #0
 8006412:	e001      	b.n	8006418 <HAL_SAI_Init+0x2a4>
 8006414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006418:	623b      	str	r3, [r7, #32]
 800641a:	e022      	b.n	8006462 <HAL_SAI_Init+0x2ee>
 800641c:	40015804 	.word	0x40015804
 8006420:	58005404 	.word	0x58005404
 8006424:	40015824 	.word	0x40015824
 8006428:	40015800 	.word	0x40015800
 800642c:	58005424 	.word	0x58005424
 8006430:	58005400 	.word	0x58005400
 8006434:	0800673d 	.word	0x0800673d
 8006438:	08006751 	.word	0x08006751
 800643c:	08006715 	.word	0x08006715
 8006440:	08006729 	.word	0x08006729
 8006444:	08006765 	.word	0x08006765
 8006448:	080070b5 	.word	0x080070b5
 800644c:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006454:	2b01      	cmp	r3, #1
 8006456:	d102      	bne.n	800645e <HAL_SAI_Init+0x2ea>
 8006458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800645c:	e000      	b.n	8006460 <HAL_SAI_Init+0x2ec>
 800645e:	2300      	movs	r3, #0
 8006460:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6819      	ldr	r1, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b5a      	ldr	r3, [pc, #360]	; (80065d8 <HAL_SAI_Init+0x464>)
 800646e:	400b      	ands	r3, r1
 8006470:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6819      	ldr	r1, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006480:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006486:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648c:	431a      	orrs	r2, r3
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800649a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064a6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	051b      	lsls	r3, r3, #20
 80064ae:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064b4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b43      	ldr	r3, [pc, #268]	; (80065dc <HAL_SAI_Init+0x468>)
 80064d0:	400b      	ands	r3, r1
 80064d2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69da      	ldr	r2, [r3, #28]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6899      	ldr	r1, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4b38      	ldr	r3, [pc, #224]	; (80065e0 <HAL_SAI_Init+0x46c>)
 80064fe:	400b      	ands	r3, r1
 8006500:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6899      	ldr	r1, [r3, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006512:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006518:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800651e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006524:	3b01      	subs	r3, #1
 8006526:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006528:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68d9      	ldr	r1, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006540:	400b      	ands	r3, r1
 8006542:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68d9      	ldr	r1, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006552:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006558:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800655a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006560:	3b01      	subs	r3, #1
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <HAL_SAI_Init+0x470>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_SAI_Init+0x40e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1a      	ldr	r2, [pc, #104]	; (80065e8 <HAL_SAI_Init+0x474>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d119      	bne.n	80065b6 <HAL_SAI_Init+0x442>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	f023 0201 	bic.w	r2, r3, #1
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006594:	2b01      	cmp	r3, #1
 8006596:	d10e      	bne.n	80065b6 <HAL_SAI_Init+0x442>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a0:	3b01      	subs	r3, #1
 80065a2:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80065a4:	431a      	orrs	r2, r3
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	f043 0201 	orr.w	r2, r3, #1
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3728      	adds	r7, #40	; 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	f005c010 	.word	0xf005c010
 80065dc:	ffff1ff0 	.word	0xffff1ff0
 80065e0:	fff88000 	.word	0xfff88000
 80065e4:	40015804 	.word	0x40015804
 80065e8:	58005404 	.word	0x58005404

080065ec <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_SAI_Receive_DMA+0x1a>
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e079      	b.n	80066fe <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b01      	cmp	r3, #1
 8006614:	d172      	bne.n	80066fc <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_SAI_Receive_DMA+0x38>
 8006620:	2302      	movs	r3, #2
 8006622:	e06c      	b.n	80066fe <HAL_SAI_Receive_DMA+0x112>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2222      	movs	r2, #34	; 0x22
 800664e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006658:	4a2b      	ldr	r2, [pc, #172]	; (8006708 <HAL_SAI_Receive_DMA+0x11c>)
 800665a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006662:	4a2a      	ldr	r2, [pc, #168]	; (800670c <HAL_SAI_Receive_DMA+0x120>)
 8006664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666c:	4a28      	ldr	r2, [pc, #160]	; (8006710 <HAL_SAI_Receive_DMA+0x124>)
 800666e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006676:	2200      	movs	r2, #0
 8006678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	331c      	adds	r3, #28
 8006686:	4619      	mov	r1, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800668c:	461a      	mov	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006694:	f7fa fcfc 	bl	8001090 <HAL_DMA_Start_IT>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e029      	b.n	80066fe <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80066aa:	2100      	movs	r1, #0
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f997 	bl	80069e0 <SAI_InterruptFlag>
 80066b2:	4601      	mov	r1, r0
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80066d0:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d107      	bne.n	80066f0 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066ee:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e000      	b.n	80066fe <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80066fc:	2302      	movs	r3, #2
  }
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	08006b29 	.word	0x08006b29
 800670c:	08006ac5 	.word	0x08006ac5
 8006710:	08006b49 	.word	0x08006b49

08006714 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <SAI_InitI2S+0x2e>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d103      	bne.n	80067ae <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	651a      	str	r2, [r3, #80]	; 0x50
 80067ac:	e002      	b.n	80067b4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067ba:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067c2:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e077      	b.n	80068ce <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d107      	bne.n	80067f4 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80067f0:	665a      	str	r2, [r3, #100]	; 0x64
 80067f2:	e006      	b.n	8006802 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067fa:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	665a      	str	r2, [r3, #100]	; 0x64
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b03      	cmp	r3, #3
 8006806:	d84f      	bhi.n	80068a8 <SAI_InitI2S+0x130>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <SAI_InitI2S+0x98>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006821 	.word	0x08006821
 8006814:	08006843 	.word	0x08006843
 8006818:	08006865 	.word	0x08006865
 800681c:	08006887 	.word	0x08006887

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2280      	movs	r2, #128	; 0x80
 8006824:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	011a      	lsls	r2, r3, #4
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2240      	movs	r2, #64	; 0x40
 800683e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006840:	e035      	b.n	80068ae <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2280      	movs	r2, #128	; 0x80
 8006846:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	019a      	lsls	r2, r3, #6
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	085b      	lsrs	r3, r3, #1
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2280      	movs	r2, #128	; 0x80
 8006860:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006862:	e024      	b.n	80068ae <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	22c0      	movs	r2, #192	; 0xc0
 8006868:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	019a      	lsls	r2, r3, #6
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2280      	movs	r2, #128	; 0x80
 8006882:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006884:	e013      	b.n	80068ae <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	22e0      	movs	r2, #224	; 0xe0
 800688a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	019a      	lsls	r2, r3, #6
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2280      	movs	r2, #128	; 0x80
 80068a4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80068a6:	e002      	b.n	80068ae <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	75fb      	strb	r3, [r7, #23]
      break;
 80068ac:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d10b      	bne.n	80068cc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d102      	bne.n	80068c0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2210      	movs	r2, #16
 80068be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d102      	bne.n	80068cc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2208      	movs	r2, #8
 80068ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop

080068dc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <SAI_InitPCM+0x2e>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d103      	bne.n	8006912 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	651a      	str	r2, [r3, #80]	; 0x50
 8006910:	e002      	b.n	8006918 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006924:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800692c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006940:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b04      	cmp	r3, #4
 8006946:	d103      	bne.n	8006950 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	659a      	str	r2, [r3, #88]	; 0x58
 800694e:	e002      	b.n	8006956 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	220d      	movs	r2, #13
 8006954:	659a      	str	r2, [r3, #88]	; 0x58
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b03      	cmp	r3, #3
 800695a:	d837      	bhi.n	80069cc <SAI_InitPCM+0xf0>
 800695c:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <SAI_InitPCM+0x88>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	08006975 	.word	0x08006975
 8006968:	0800698b 	.word	0x0800698b
 800696c:	080069a1 	.word	0x080069a1
 8006970:	080069b7 	.word	0x080069b7
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2280      	movs	r2, #128	; 0x80
 8006978:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	011a      	lsls	r2, r3, #4
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2240      	movs	r2, #64	; 0x40
 8006986:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8006988:	e023      	b.n	80069d2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2280      	movs	r2, #128	; 0x80
 800698e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2280      	movs	r2, #128	; 0x80
 800699c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800699e:	e018      	b.n	80069d2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	22c0      	movs	r2, #192	; 0xc0
 80069a4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2280      	movs	r2, #128	; 0x80
 80069b2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80069b4:	e00d      	b.n	80069d2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	22e0      	movs	r2, #224	; 0xe0
 80069ba:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2280      	movs	r2, #128	; 0x80
 80069c8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80069ca:	e002      	b.n	80069d2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	bf00      	nop
  }

  return status;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d103      	bne.n	80069fe <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f043 0308 	orr.w	r3, r3, #8
 80069fc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d10b      	bne.n	8006a1e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d003      	beq.n	8006a16 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d103      	bne.n	8006a1e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f043 0310 	orr.w	r3, r3, #16
 8006a1c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d003      	beq.n	8006a2e <SAI_InterruptFlag+0x4e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d104      	bne.n	8006a38 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	e003      	b.n	8006a40 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f043 0304 	orr.w	r3, r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006a40:	68fb      	ldr	r3, [r7, #12]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
	...

08006a50 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006a58:	4b18      	ldr	r3, [pc, #96]	; (8006abc <SAI_Disable+0x6c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a18      	ldr	r2, [pc, #96]	; (8006ac0 <SAI_Disable+0x70>)
 8006a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a62:	0b1b      	lsrs	r3, r3, #12
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a7a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	72fb      	strb	r3, [r7, #11]
      break;
 8006a96:	e009      	b.n	8006aac <SAI_Disable+0x5c>
    }
    count--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e7      	bne.n	8006a7c <SAI_Disable+0x2c>

  return status;
 8006aac:	7afb      	ldrb	r3, [r7, #11]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	24000408 	.word	0x24000408
 8006ac0:	95cbec1b 	.word	0x95cbec1b

08006ac4 <SAI_DMARxCplt>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
// TODO: Add a function for when it's complete
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ada:	d01c      	beq.n	8006b16 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006aea:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006af4:	2100      	movs	r1, #0
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff ff72 	bl	80069e0 <SAI_InterruptFlag>
 8006afc:	4603      	mov	r3, r0
 8006afe:	43d9      	mvns	r1, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	400a      	ands	r2, r1
 8006b0c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	4798      	blx	r3
#else
  HAL_SAI_RxCpltCallback(hsai);
#endif
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	4798      	blx	r3
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
#endif
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fb fc2e 	bl	80023b8 <HAL_DMA_GetError>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d01f      	beq.n	8006ba2 <SAI_DMAError+0x5a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006b80:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff ff64 	bl	8006a50 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	4798      	blx	r3
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8006bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006bb4:	f7f9 fc86 	bl	80004c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006bb8:	f000 f83c 	bl	8006c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006bbc:	f000 f9f0 	bl	8006fa0 <MX_GPIO_Init>
  MX_SAI4_Init();
 8006bc0:	f000 f91e 	bl	8006e00 <MX_SAI4_Init>
  MX_BDMA_Init();
 8006bc4:	f000 f99c 	bl	8006f00 <MX_BDMA_Init>
  MX_CRC_Init();
 8006bc8:	f000 f8a2 	bl	8006d10 <MX_CRC_Init>
  MX_DMA_Init();
 8006bcc:	f000 f9c0 	bl	8006f50 <MX_DMA_Init>
  if (HAL_SAI_Init(&haudio_in_sai[AUDIO_IN_INSTANCE]) != HAL_OK)
 8006bd0:	4816      	ldr	r0, [pc, #88]	; (8006c2c <main+0x80>)
 8006bd2:	f7ff facf 	bl	8006174 <HAL_SAI_Init>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <main+0x34>
  {
    Error_Handler();
 8006bdc:	f000 fa28 	bl	8007030 <Error_Handler>
  }
  //MX_PDM2PCM_Init();
  //MX_DFSDM1_Init();
  MX_SAI1_Init();
 8006be0:	f000 f8d8 	bl	8006d94 <MX_SAI1_Init>



  // @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM

  Audio_In_Ctx[AUDIO_IN_INSTANCE].Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 8006be4:	4b12      	ldr	r3, [pc, #72]	; (8006c30 <main+0x84>)
 8006be6:	2230      	movs	r2, #48	; 0x30
 8006be8:	635a      	str	r2, [r3, #52]	; 0x34
  Audio_In_Ctx[AUDIO_IN_INSTANCE].ChannelsNbr = 0;
 8006bea:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <main+0x84>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	641a      	str	r2, [r3, #64]	; 0x40
  Audio_In_Ctx[AUDIO_IN_INSTANCE].SampleRate = SAI_AUDIO_FREQUENCY_48K;
 8006bf0:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <main+0x84>)
 8006bf2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
  Audio_In_Ctx[AUDIO_IN_INSTANCE].BitsPerSample = AUDIO_RESOLUTION_8B;
 8006bf8:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <main+0x84>)
 8006bfa:	2208      	movs	r2, #8
 8006bfc:	63da      	str	r2, [r3, #60]	; 0x3c
  Audio_In_Ctx[AUDIO_IN_INSTANCE].Volume = 80;
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <main+0x84>)
 8006c00:	2250      	movs	r2, #80	; 0x50
 8006c02:	651a      	str	r2, [r3, #80]	; 0x50

  // initialize audio instance: (NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U)
  // needs to be HAL_OK = 0
  // 64 bytes / mic_buffer[AUDIO_IN_INSTANCE].16bits/sample / 8
  int32_t status_init = BSP_AUDIO_IN_PDMToPCM_Init(AUDIO_IN_INSTANCE, SAI_AUDIO_FREQUENCY_16K, 1, 1);
 8006c04:	2301      	movs	r3, #1
 8006c06:	2201      	movs	r2, #1
 8006c08:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	f7f9 fb7f 	bl	8000310 <BSP_AUDIO_IN_PDMToPCM_Init>
 8006c12:	f8c7 0504 	str.w	r0, [r7, #1284]	; 0x504
  int32_t status_record = BSP_AUDIO_IN_RecordPDM(AUDIO_IN_INSTANCE, mic_buffer, 64);
 8006c16:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006c1a:	2240      	movs	r2, #64	; 0x40
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	2001      	movs	r0, #1
 8006c20:	f7f9 fc1a 	bl	8000458 <BSP_AUDIO_IN_RecordPDM>
 8006c24:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8006c28:	e7fe      	b.n	8006c28 <main+0x7c>
 8006c2a:	bf00      	nop
 8006c2c:	24000548 	.word	0x24000548
 8006c30:	240008fc 	.word	0x240008fc

08006c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b09c      	sub	sp, #112	; 0x70
 8006c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c3e:	224c      	movs	r2, #76	; 0x4c
 8006c40:	2100      	movs	r1, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f002 fb78 	bl	8009338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c48:	1d3b      	adds	r3, r7, #4
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f002 fb72 	bl	8009338 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8006c54:	2004      	movs	r0, #4
 8006c56:	f7fc fa63 	bl	8003120 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	603b      	str	r3, [r7, #0]
 8006c5e:	4b2b      	ldr	r3, [pc, #172]	; (8006d0c <SystemClock_Config+0xd8>)
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	4a2a      	ldr	r2, [pc, #168]	; (8006d0c <SystemClock_Config+0xd8>)
 8006c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c68:	6193      	str	r3, [r2, #24]
 8006c6a:	4b28      	ldr	r3, [pc, #160]	; (8006d0c <SystemClock_Config+0xd8>)
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006c76:	bf00      	nop
 8006c78:	4b24      	ldr	r3, [pc, #144]	; (8006d0c <SystemClock_Config+0xd8>)
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c84:	d1f8      	bne.n	8006c78 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c86:	2302      	movs	r3, #2
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c8e:	2340      	movs	r3, #64	; 0x40
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c92:	2302      	movs	r3, #2
 8006c94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c96:	2300      	movs	r3, #0
 8006c98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006c9a:	2304      	movs	r3, #4
 8006c9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8006c9e:	2318      	movs	r3, #24
 8006ca0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 125;
 8006ca6:	237d      	movs	r3, #125	; 0x7d
 8006ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006caa:	2302      	movs	r3, #2
 8006cac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006cae:	230c      	movs	r3, #12
 8006cb0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fc fa88 	bl	80031d4 <HAL_RCC_OscConfig>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006cca:	f000 f9b1 	bl	8007030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006cce:	233f      	movs	r3, #63	; 0x3f
 8006cd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006cda:	2308      	movs	r3, #8
 8006cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006cde:	2340      	movs	r3, #64	; 0x40
 8006ce0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006ce2:	2340      	movs	r3, #64	; 0x40
 8006ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006cec:	2340      	movs	r3, #64	; 0x40
 8006cee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fc fe19 	bl	800392c <HAL_RCC_ClockConfig>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006d00:	f000 f996 	bl	8007030 <Error_Handler>
  }
}
 8006d04:	bf00      	nop
 8006d06:	3770      	adds	r7, #112	; 0x70
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	58024800 	.word	0x58024800

08006d10 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006d16:	4b1c      	ldr	r3, [pc, #112]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d18:	4a1c      	ldr	r2, [pc, #112]	; (8006d8c <MX_CRC_Init+0x7c>)
 8006d1a:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8006d22:	4b19      	ldr	r3, [pc, #100]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006d28:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006d2e:	4b16      	ldr	r3, [pc, #88]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006d3a:	4813      	ldr	r0, [pc, #76]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d3c:	f7f9 fd64 	bl	8000808 <HAL_CRC_Init>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <MX_CRC_Init+0x3a>
  {
    Error_Handler();
 8006d46:	f000 f973 	bl	8007030 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <MX_CRC_Init+0x80>)
 8006d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d60:	4a0b      	ldr	r2, [pc, #44]	; (8006d90 <MX_CRC_Init+0x80>)
 8006d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <MX_CRC_Init+0x80>)
 8006d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d74:	607b      	str	r3, [r7, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
  HAL_CRC_MspInit(&hcrc);
 8006d78:	4803      	ldr	r0, [pc, #12]	; (8006d88 <MX_CRC_Init+0x78>)
 8006d7a:	f000 f979 	bl	8007070 <HAL_CRC_MspInit>

  /* USER CODE END CRC_Init 2 */

}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	24000990 	.word	0x24000990
 8006d8c:	58024c00 	.word	0x58024c00
 8006d90:	58024400 	.word	0x58024400

08006d94 <MX_SAI1_Init>:
//  * @brief SAI1 Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_SAI1_Init(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006d98:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <MX_SAI1_Init+0x64>)
 8006d9c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8006d9e:	4b15      	ldr	r3, [pc, #84]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8006da4:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006daa:	4b12      	ldr	r3, [pc, #72]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006db0:	4b10      	ldr	r3, [pc, #64]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006db6:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006dbe:	4a0f      	ldr	r2, [pc, #60]	; (8006dfc <MX_SAI1_Init+0x68>)
 8006dc0:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006dc2:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006dce:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006dd4:	4b07      	ldr	r3, [pc, #28]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8006dda:	2302      	movs	r3, #2
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2100      	movs	r1, #0
 8006de0:	4804      	ldr	r0, [pc, #16]	; (8006df4 <MX_SAI1_Init+0x60>)
 8006de2:	f7ff f995 	bl	8006110 <HAL_SAI_InitProtocol>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8006dec:	f000 f920 	bl	8007030 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8006df0:	bf00      	nop
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	240009b4 	.word	0x240009b4
 8006df8:	40015824 	.word	0x40015824
 8006dfc:	0002ee00 	.word	0x0002ee00

08006e00 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */

  /* USER CODE BEGIN SAI4_Init 2 */
  haudio_in_sai[AUDIO_IN_INSTANCE].Instance = AUDIO_IN_SAI_PDMx;
 8006e04:	4b3c      	ldr	r3, [pc, #240]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e06:	4a3d      	ldr	r2, [pc, #244]	; (8006efc <MX_SAI4_Init+0xfc>)
 8006e08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Protocol = SAI_FREE_PROTOCOL;
 8006e0c:	4b3a      	ldr	r3, [pc, #232]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioMode = SAI_MODEMASTER_RX;
 8006e14:	4b38      	ldr	r3, [pc, #224]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.DataSize = SAI_DATASIZE_16;
 8006e1c:	4b36      	ldr	r3, [pc, #216]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e1e:	2280      	movs	r2, #128	; 0x80
 8006e20:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006e24:	4b34      	ldr	r3, [pc, #208]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006e2c:	4b32      	ldr	r3, [pc, #200]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.Synchro = SAI_ASYNCHRONOUS;
 8006e34:	4b30      	ldr	r3, [pc, #192]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006e3c:	4b2e      	ldr	r3, [pc, #184]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006e44:	4b2c      	ldr	r3, [pc, #176]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8006e4c:	4b2a      	ldr	r3, [pc, #168]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006e54:	4b28      	ldr	r3, [pc, #160]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e56:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006e5a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.MonoStereoMode = SAI_STEREOMODE;
 8006e5e:	4b26      	ldr	r3, [pc, #152]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.CompandingMode = SAI_NOCOMPANDING;
 8006e66:	4b24      	ldr	r3, [pc, #144]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.Activation = ENABLE;
 8006e6e:	4b22      	ldr	r3, [pc, #136]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.MicPairsNbr = 0;
 8006e76:	4b20      	ldr	r3, [pc, #128]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e84:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FrameLength = 16;
 8006e88:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e8a:	2210      	movs	r2, #16
 8006e8c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.ActiveFrameLength = 1;
 8006e90:	4b19      	ldr	r3, [pc, #100]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8006e98:	4b17      	ldr	r3, [pc, #92]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006ea0:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  haudio_in_sai[AUDIO_IN_INSTANCE].FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8006ea8:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.FirstBitOffset = 0;
 8006eb0:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotNumber = 0;
 8006ec0:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  haudio_in_sai[AUDIO_IN_INSTANCE].SlotInit.SlotActive = 0x0000FFFF;
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ece:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.Activation = ENABLE;
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.MicPairsNbr = 1;
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  haudio_in_sai[AUDIO_IN_INSTANCE].Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <MX_SAI4_Init+0xf8>)
 8006ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  // 6.144 mhz bit clk frequency
  // 384khz frame sync frequency
  // 0 slots, 16 bits per frame
  /* USER CODE END SAI4_Init 2 */

}
 8006eec:	bf00      	nop
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	24000494 	.word	0x24000494
 8006efc:	58005404 	.word	0x58005404

08006f00 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8006f06:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <MX_BDMA_Init+0x4c>)
 8006f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f0c:	4a0f      	ldr	r2, [pc, #60]	; (8006f4c <MX_BDMA_Init+0x4c>)
 8006f0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <MX_BDMA_Init+0x4c>)
 8006f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMAMUX2_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX2_OVR_IRQn, 0, 0);
 8006f24:	2200      	movs	r2, #0
 8006f26:	2100      	movs	r1, #0
 8006f28:	2080      	movs	r0, #128	; 0x80
 8006f2a:	f7f9 fc38 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX2_OVR_IRQn);
 8006f2e:	2080      	movs	r0, #128	; 0x80
 8006f30:	f7f9 fc4f 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8006f34:	2200      	movs	r2, #0
 8006f36:	2100      	movs	r1, #0
 8006f38:	2081      	movs	r0, #129	; 0x81
 8006f3a:	f7f9 fc30 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8006f3e:	2081      	movs	r0, #129	; 0x81
 8006f40:	f7f9 fc47 	bl	80007d2 <HAL_NVIC_EnableIRQ>

}
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	58024400 	.word	0x58024400

08006f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f56:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <MX_DMA_Init+0x4c>)
 8006f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f5c:	4a0f      	ldr	r2, [pc, #60]	; (8006f9c <MX_DMA_Init+0x4c>)
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f66:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <MX_DMA_Init+0x4c>)
 8006f68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	607b      	str	r3, [r7, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006f74:	2200      	movs	r2, #0
 8006f76:	2100      	movs	r1, #0
 8006f78:	200c      	movs	r0, #12
 8006f7a:	f7f9 fc10 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006f7e:	200c      	movs	r0, #12
 8006f80:	f7f9 fc27 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	2066      	movs	r0, #102	; 0x66
 8006f8a:	f7f9 fc08 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8006f8e:	2066      	movs	r0, #102	; 0x66
 8006f90:	f7f9 fc1f 	bl	80007d2 <HAL_NVIC_EnableIRQ>

}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	58024400 	.word	0x58024400

08006fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fa6:	4b21      	ldr	r3, [pc, #132]	; (800702c <MX_GPIO_Init+0x8c>)
 8006fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fac:	4a1f      	ldr	r2, [pc, #124]	; (800702c <MX_GPIO_Init+0x8c>)
 8006fae:	f043 0301 	orr.w	r3, r3, #1
 8006fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <MX_GPIO_Init+0x8c>)
 8006fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fc4:	4b19      	ldr	r3, [pc, #100]	; (800702c <MX_GPIO_Init+0x8c>)
 8006fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fca:	4a18      	ldr	r2, [pc, #96]	; (800702c <MX_GPIO_Init+0x8c>)
 8006fcc:	f043 0310 	orr.w	r3, r3, #16
 8006fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fd4:	4b15      	ldr	r3, [pc, #84]	; (800702c <MX_GPIO_Init+0x8c>)
 8006fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fda:	f003 0310 	and.w	r3, r3, #16
 8006fde:	60bb      	str	r3, [r7, #8]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fe2:	4b12      	ldr	r3, [pc, #72]	; (800702c <MX_GPIO_Init+0x8c>)
 8006fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fe8:	4a10      	ldr	r2, [pc, #64]	; (800702c <MX_GPIO_Init+0x8c>)
 8006fea:	f043 0308 	orr.w	r3, r3, #8
 8006fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ff2:	4b0e      	ldr	r3, [pc, #56]	; (800702c <MX_GPIO_Init+0x8c>)
 8006ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	607b      	str	r3, [r7, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007000:	4b0a      	ldr	r3, [pc, #40]	; (800702c <MX_GPIO_Init+0x8c>)
 8007002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007006:	4a09      	ldr	r2, [pc, #36]	; (800702c <MX_GPIO_Init+0x8c>)
 8007008:	f043 0320 	orr.w	r3, r3, #32
 800700c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <MX_GPIO_Init+0x8c>)
 8007012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	683b      	ldr	r3, [r7, #0]

}
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	58024400 	.word	0x58024400

08007030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007034:	b672      	cpsid	i
}
 8007036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007038:	e7fe      	b.n	8007038 <Error_Handler+0x8>
	...

0800703c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <HAL_MspInit+0x30>)
 8007044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007048:	4a08      	ldr	r2, [pc, #32]	; (800706c <HAL_MspInit+0x30>)
 800704a:	f043 0302 	orr.w	r3, r3, #2
 800704e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <HAL_MspInit+0x30>)
 8007054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	58024400 	.word	0x58024400

08007070 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a0b      	ldr	r2, [pc, #44]	; (80070ac <HAL_CRC_MspInit+0x3c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d10e      	bne.n	80070a0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007082:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <HAL_CRC_MspInit+0x40>)
 8007084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <HAL_CRC_MspInit+0x40>)
 800708a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800708e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <HAL_CRC_MspInit+0x40>)
 8007094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	58024c00 	.word	0x58024c00
 80070b0:	58024400 	.word	0x58024400

080070b4 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b0ba      	sub	sp, #232	; 0xe8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80070bc:	f107 0310 	add.w	r3, r7, #16
 80070c0:	22b4      	movs	r2, #180	; 0xb4
 80070c2:	2100      	movs	r1, #0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f002 f937 	bl	8009338 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4aa9      	ldr	r2, [pc, #676]	; (8007374 <HAL_SAI_MspInit+0x2c0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	f040 80a5 	bne.w	8007220 <HAL_SAI_MspInit+0x16c>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80070d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070da:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80070dc:	2300      	movs	r3, #0
 80070de:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80070e0:	f107 0310 	add.w	r3, r7, #16
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fc ff81 	bl	8003fec <HAL_RCCEx_PeriphCLKConfig>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 80070f0:	f7ff ff9e 	bl	8007030 <Error_Handler>
    }

      if (SAI1_client == 0)
 80070f4:	4ba0      	ldr	r3, [pc, #640]	; (8007378 <HAL_SAI_MspInit+0x2c4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10e      	bne.n	800711a <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80070fc:	4b9f      	ldr	r3, [pc, #636]	; (800737c <HAL_SAI_MspInit+0x2c8>)
 80070fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007102:	4a9e      	ldr	r2, [pc, #632]	; (800737c <HAL_SAI_MspInit+0x2c8>)
 8007104:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007108:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800710c:	4b9b      	ldr	r3, [pc, #620]	; (800737c <HAL_SAI_MspInit+0x2c8>)
 800710e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800711a:	4b97      	ldr	r3, [pc, #604]	; (8007378 <HAL_SAI_MspInit+0x2c4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	4a95      	ldr	r2, [pc, #596]	; (8007378 <HAL_SAI_MspInit+0x2c4>)
 8007122:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007124:	2308      	movs	r3, #8
 8007126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800712a:	2302      	movs	r3, #2
 800712c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007130:	2300      	movs	r3, #0
 8007132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007136:	2300      	movs	r3, #0
 8007138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800713c:	2306      	movs	r3, #6
 800713e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007142:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007146:	4619      	mov	r1, r3
 8007148:	488d      	ldr	r0, [pc, #564]	; (8007380 <HAL_SAI_MspInit+0x2cc>)
 800714a:	f7fb fe41 	bl	8002dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
 800714e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8007152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007156:	2302      	movs	r3, #2
 8007158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800715c:	2300      	movs	r3, #0
 800715e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007162:	2300      	movs	r3, #0
 8007164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007168:	2306      	movs	r3, #6
 800716a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800716e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007172:	4619      	mov	r1, r3
 8007174:	4883      	ldr	r0, [pc, #524]	; (8007384 <HAL_SAI_MspInit+0x2d0>)
 8007176:	f7fb fe2b 	bl	8002dd0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream1;
 800717a:	4b83      	ldr	r3, [pc, #524]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 800717c:	4a83      	ldr	r2, [pc, #524]	; (800738c <HAL_SAI_MspInit+0x2d8>)
 800717e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8007180:	4b81      	ldr	r3, [pc, #516]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 8007182:	2258      	movs	r2, #88	; 0x58
 8007184:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007186:	4b80      	ldr	r3, [pc, #512]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 8007188:	2240      	movs	r2, #64	; 0x40
 800718a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800718c:	4b7e      	ldr	r3, [pc, #504]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 800718e:	2200      	movs	r2, #0
 8007190:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8007192:	4b7d      	ldr	r3, [pc, #500]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 8007194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007198:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800719a:	4b7b      	ldr	r3, [pc, #492]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 800719c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a0:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80071a2:	4b79      	ldr	r3, [pc, #484]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 80071a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80071a8:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80071aa:	4b77      	ldr	r3, [pc, #476]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 80071ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071b0:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 80071b2:	4b75      	ldr	r3, [pc, #468]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 80071b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071b8:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071ba:	4b73      	ldr	r3, [pc, #460]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 80071bc:	2200      	movs	r2, #0
 80071be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80071c0:	4871      	ldr	r0, [pc, #452]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 80071c2:	f7f9 fc0b 	bl	80009dc <HAL_DMA_Init>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80071cc:	f7ff ff30 	bl	8007030 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80071d0:	2306      	movs	r3, #6
 80071d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80071d6:	2300      	movs	r3, #0
 80071d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 80071e8:	2301      	movs	r3, #1
 80071ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_b, &pSyncConfig) != HAL_OK)
 80071ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071f2:	4619      	mov	r1, r3
 80071f4:	4864      	ldr	r0, [pc, #400]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 80071f6:	f7fb fcd3 	bl	8002ba0 <HAL_DMAEx_ConfigMuxSync>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_SAI_MspInit+0x150>
    {
      Error_Handler();
 8007200:	f7ff ff16 	bl	8007030 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a60      	ldr	r2, [pc, #384]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 8007208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800720c:	4a5e      	ldr	r2, [pc, #376]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a5c      	ldr	r2, [pc, #368]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 8007216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800721a:	4a5b      	ldr	r2, [pc, #364]	; (8007388 <HAL_SAI_MspInit+0x2d4>)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6393      	str	r3, [r2, #56]	; 0x38
    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a5a      	ldr	r2, [pc, #360]	; (8007390 <HAL_SAI_MspInit+0x2dc>)
 8007226:	4293      	cmp	r3, r2
 8007228:	f040 80a0 	bne.w	800736c <HAL_SAI_MspInit+0x2b8>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800722c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007230:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8007232:	2300      	movs	r3, #0
 8007234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007238:	f107 0310 	add.w	r3, r7, #16
 800723c:	4618      	mov	r0, r3
 800723e:	f7fc fed5 	bl	8003fec <HAL_RCCEx_PeriphCLKConfig>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_SAI_MspInit+0x198>
    {
      Error_Handler();
 8007248:	f7ff fef2 	bl	8007030 <Error_Handler>
    }

    if (SAI4_client == 0)
 800724c:	4b51      	ldr	r3, [pc, #324]	; (8007394 <HAL_SAI_MspInit+0x2e0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10e      	bne.n	8007272 <HAL_SAI_MspInit+0x1be>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8007254:	4b49      	ldr	r3, [pc, #292]	; (800737c <HAL_SAI_MspInit+0x2c8>)
 8007256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800725a:	4a48      	ldr	r2, [pc, #288]	; (800737c <HAL_SAI_MspInit+0x2c8>)
 800725c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007260:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007264:	4b45      	ldr	r3, [pc, #276]	; (800737c <HAL_SAI_MspInit+0x2c8>)
 8007266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800726a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800726e:	60bb      	str	r3, [r7, #8]
 8007270:	68bb      	ldr	r3, [r7, #8]
    }
    SAI4_client ++;
 8007272:	4b48      	ldr	r3, [pc, #288]	; (8007394 <HAL_SAI_MspInit+0x2e0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	4a46      	ldr	r2, [pc, #280]	; (8007394 <HAL_SAI_MspInit+0x2e0>)
 800727a:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PE4     ------> SAI4_D2
    PE5     ------> SAI4_CK2
    PD6     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800727c:	2330      	movs	r3, #48	; 0x30
 800727e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007282:	2302      	movs	r3, #2
 8007284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007288:	2300      	movs	r3, #0
 800728a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800728e:	2300      	movs	r3, #0
 8007290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8007294:	230a      	movs	r3, #10
 8007296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800729a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800729e:	4619      	mov	r1, r3
 80072a0:	4837      	ldr	r0, [pc, #220]	; (8007380 <HAL_SAI_MspInit+0x2cc>)
 80072a2:	f7fb fd95 	bl	8002dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80072a6:	2340      	movs	r3, #64	; 0x40
 80072a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ac:	2302      	movs	r3, #2
 80072ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_SAI4;
 80072be:	2301      	movs	r3, #1
 80072c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80072c8:	4619      	mov	r1, r3
 80072ca:	4833      	ldr	r0, [pc, #204]	; (8007398 <HAL_SAI_MspInit+0x2e4>)
 80072cc:	f7fb fd80 	bl	8002dd0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 80072d0:	4b32      	ldr	r3, [pc, #200]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 80072d2:	4a33      	ldr	r2, [pc, #204]	; (80073a0 <HAL_SAI_MspInit+0x2ec>)
 80072d4:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 80072d6:	4b31      	ldr	r3, [pc, #196]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 80072d8:	220f      	movs	r2, #15
 80072da:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072dc:	4b2f      	ldr	r3, [pc, #188]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 80072de:	2200      	movs	r2, #0
 80072e0:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80072e2:	4b2e      	ldr	r3, [pc, #184]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 80072e8:	4b2c      	ldr	r3, [pc, #176]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 80072ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072ee:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072f0:	4b2a      	ldr	r3, [pc, #168]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072f6:	4b29      	ldr	r3, [pc, #164]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 80072fc:	4b27      	ldr	r3, [pc, #156]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 80072fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007302:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8007304:	4b25      	ldr	r3, [pc, #148]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 8007306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800730a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800730c:	4823      	ldr	r0, [pc, #140]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 800730e:	f7f9 fb65 	bl	80009dc <HAL_DMA_Init>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <HAL_SAI_MspInit+0x268>
    {
      Error_Handler();
 8007318:	f7ff fe8a 	bl	8007030 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800731c:	230e      	movs	r3, #14
 800731e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8007322:	2300      	movs	r3, #0
 8007324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    pSyncConfig.SyncEnable = DISABLE;
 8007328:	2300      	movs	r3, #0
 800732a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    pSyncConfig.EventEnable = ENABLE;
 800732e:	2301      	movs	r3, #1
 8007330:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    pSyncConfig.RequestNumber = 1;
 8007334:	2301      	movs	r3, #1
 8007336:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 800733a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800733e:	4619      	mov	r1, r3
 8007340:	4816      	ldr	r0, [pc, #88]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 8007342:	f7fb fc2d 	bl	8002ba0 <HAL_DMAEx_ConfigMuxSync>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <HAL_SAI_MspInit+0x29c>
    {
      Error_Handler();
 800734c:	f7ff fe70 	bl	8007030 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a12      	ldr	r2, [pc, #72]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 8007354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007358:	4a10      	ldr	r2, [pc, #64]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a0e      	ldr	r2, [pc, #56]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 8007362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007366:	4a0d      	ldr	r2, [pc, #52]	; (800739c <HAL_SAI_MspInit+0x2e8>)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 800736c:	bf00      	nop
 800736e:	37e8      	adds	r7, #232	; 0xe8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	40015824 	.word	0x40015824
 8007378:	240006a0 	.word	0x240006a0
 800737c:	58024400 	.word	0x58024400
 8007380:	58021000 	.word	0x58021000
 8007384:	58021400 	.word	0x58021400
 8007388:	24000b94 	.word	0x24000b94
 800738c:	40020028 	.word	0x40020028
 8007390:	58005404 	.word	0x58005404
 8007394:	240006a4 	.word	0x240006a4
 8007398:	58020c00 	.word	0x58020c00
 800739c:	24000b1c 	.word	0x24000b1c
 80073a0:	58025408 	.word	0x58025408

080073a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80073a8:	e7fe      	b.n	80073a8 <NMI_Handler+0x4>

080073aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073aa:	b480      	push	{r7}
 80073ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073ae:	e7fe      	b.n	80073ae <HardFault_Handler+0x4>

080073b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073b4:	e7fe      	b.n	80073b4 <MemManage_Handler+0x4>

080073b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073b6:	b480      	push	{r7}
 80073b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073ba:	e7fe      	b.n	80073ba <BusFault_Handler+0x4>

080073bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073c0:	e7fe      	b.n	80073c0 <UsageFault_Handler+0x4>

080073c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073c2:	b480      	push	{r7}
 80073c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073c6:	bf00      	nop
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073de:	b480      	push	{r7}
 80073e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073e2:	bf00      	nop
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073f0:	f7f9 f8da 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073f4:	bf00      	nop
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80073fc:	4802      	ldr	r0, [pc, #8]	; (8007408 <DMA1_Stream1_IRQHandler+0x10>)
 80073fe:	f7fa f8b1 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007402:	bf00      	nop
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	24000b94 	.word	0x24000b94

0800740c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_b);
 8007410:	4802      	ldr	r0, [pc, #8]	; (800741c <DMAMUX1_OVR_IRQHandler+0x10>)
 8007412:	f7fb fc8b 	bl	8002d2c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	24000b94 	.word	0x24000b94

08007420 <DMAMUX2_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX2 overrun interrupt.
  */
void DMAMUX2_OVR_IRQHandler(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 0 */

  /* USER CODE END DMAMUX2_OVR_IRQn 0 */
  // Handle BDMA_Channel0
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai4_a);
 8007424:	4802      	ldr	r0, [pc, #8]	; (8007430 <DMAMUX2_OVR_IRQHandler+0x10>)
 8007426:	f7fb fc81 	bl	8002d2c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX2_OVR_IRQn 1 */

  /* USER CODE END DMAMUX2_OVR_IRQn 1 */
}
 800742a:	bf00      	nop
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	24000b1c 	.word	0x24000b1c

08007434 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8007438:	4802      	ldr	r0, [pc, #8]	; (8007444 <BDMA_Channel0_IRQHandler+0x10>)
 800743a:	f7fa f893 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800743e:	bf00      	nop
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	24000b1c 	.word	0x24000b1c

08007448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800744c:	4b32      	ldr	r3, [pc, #200]	; (8007518 <SystemInit+0xd0>)
 800744e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007452:	4a31      	ldr	r2, [pc, #196]	; (8007518 <SystemInit+0xd0>)
 8007454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800745c:	4b2f      	ldr	r3, [pc, #188]	; (800751c <SystemInit+0xd4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	2b06      	cmp	r3, #6
 8007466:	d807      	bhi.n	8007478 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007468:	4b2c      	ldr	r3, [pc, #176]	; (800751c <SystemInit+0xd4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f023 030f 	bic.w	r3, r3, #15
 8007470:	4a2a      	ldr	r2, [pc, #168]	; (800751c <SystemInit+0xd4>)
 8007472:	f043 0307 	orr.w	r3, r3, #7
 8007476:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007478:	4b29      	ldr	r3, [pc, #164]	; (8007520 <SystemInit+0xd8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a28      	ldr	r2, [pc, #160]	; (8007520 <SystemInit+0xd8>)
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007484:	4b26      	ldr	r3, [pc, #152]	; (8007520 <SystemInit+0xd8>)
 8007486:	2200      	movs	r2, #0
 8007488:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800748a:	4b25      	ldr	r3, [pc, #148]	; (8007520 <SystemInit+0xd8>)
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	4924      	ldr	r1, [pc, #144]	; (8007520 <SystemInit+0xd8>)
 8007490:	4b24      	ldr	r3, [pc, #144]	; (8007524 <SystemInit+0xdc>)
 8007492:	4013      	ands	r3, r2
 8007494:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007496:	4b21      	ldr	r3, [pc, #132]	; (800751c <SystemInit+0xd4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80074a2:	4b1e      	ldr	r3, [pc, #120]	; (800751c <SystemInit+0xd4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f023 030f 	bic.w	r3, r3, #15
 80074aa:	4a1c      	ldr	r2, [pc, #112]	; (800751c <SystemInit+0xd4>)
 80074ac:	f043 0307 	orr.w	r3, r3, #7
 80074b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80074b2:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <SystemInit+0xd8>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80074b8:	4b19      	ldr	r3, [pc, #100]	; (8007520 <SystemInit+0xd8>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80074be:	4b18      	ldr	r3, [pc, #96]	; (8007520 <SystemInit+0xd8>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80074c4:	4b16      	ldr	r3, [pc, #88]	; (8007520 <SystemInit+0xd8>)
 80074c6:	4a18      	ldr	r2, [pc, #96]	; (8007528 <SystemInit+0xe0>)
 80074c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80074ca:	4b15      	ldr	r3, [pc, #84]	; (8007520 <SystemInit+0xd8>)
 80074cc:	4a17      	ldr	r2, [pc, #92]	; (800752c <SystemInit+0xe4>)
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80074d0:	4b13      	ldr	r3, [pc, #76]	; (8007520 <SystemInit+0xd8>)
 80074d2:	4a17      	ldr	r2, [pc, #92]	; (8007530 <SystemInit+0xe8>)
 80074d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80074d6:	4b12      	ldr	r3, [pc, #72]	; (8007520 <SystemInit+0xd8>)
 80074d8:	2200      	movs	r2, #0
 80074da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80074dc:	4b10      	ldr	r3, [pc, #64]	; (8007520 <SystemInit+0xd8>)
 80074de:	4a14      	ldr	r2, [pc, #80]	; (8007530 <SystemInit+0xe8>)
 80074e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80074e2:	4b0f      	ldr	r3, [pc, #60]	; (8007520 <SystemInit+0xd8>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80074e8:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <SystemInit+0xd8>)
 80074ea:	4a11      	ldr	r2, [pc, #68]	; (8007530 <SystemInit+0xe8>)
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80074ee:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <SystemInit+0xd8>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80074f4:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <SystemInit+0xd8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a09      	ldr	r2, [pc, #36]	; (8007520 <SystemInit+0xd8>)
 80074fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <SystemInit+0xd8>)
 8007502:	2200      	movs	r2, #0
 8007504:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007506:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <SystemInit+0xec>)
 8007508:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800750c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800750e:	bf00      	nop
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	e000ed00 	.word	0xe000ed00
 800751c:	52002000 	.word	0x52002000
 8007520:	58024400 	.word	0x58024400
 8007524:	eaf6ed7f 	.word	0xeaf6ed7f
 8007528:	02020200 	.word	0x02020200
 800752c:	01ff0000 	.word	0x01ff0000
 8007530:	01010280 	.word	0x01010280
 8007534:	52004000 	.word	0x52004000

08007538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007570 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800753c:	f7ff ff84 	bl	8007448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007540:	480c      	ldr	r0, [pc, #48]	; (8007574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007542:	490d      	ldr	r1, [pc, #52]	; (8007578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007544:	4a0d      	ldr	r2, [pc, #52]	; (800757c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007548:	e002      	b.n	8007550 <LoopCopyDataInit>

0800754a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800754a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800754c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800754e:	3304      	adds	r3, #4

08007550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007554:	d3f9      	bcc.n	800754a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007556:	4a0a      	ldr	r2, [pc, #40]	; (8007580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007558:	4c0a      	ldr	r4, [pc, #40]	; (8007584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800755a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800755c:	e001      	b.n	8007562 <LoopFillZerobss>

0800755e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800755e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007560:	3204      	adds	r2, #4

08007562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007564:	d3fb      	bcc.n	800755e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007566:	f001 fec3 	bl	80092f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800756a:	f7ff fb1f 	bl	8006bac <main>
  bx  lr
 800756e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007570:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8007574:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007578:	24000474 	.word	0x24000474
  ldr r2, =_sidata
 800757c:	080099b0 	.word	0x080099b0
  ldr r2, =_sbss
 8007580:	24000474 	.word	0x24000474
  ldr r4, =_ebss
 8007584:	24000c0c 	.word	0x24000c0c

08007588 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007588:	e7fe      	b.n	8007588 <ADC3_IRQHandler>
	...

0800758c <D16_GENERIC>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	b089      	sub	sp, #36	; 0x24
 8007592:	6993      	ldr	r3, [r2, #24]
 8007594:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007596:	9103      	str	r1, [sp, #12]
 8007598:	9307      	str	r3, [sp, #28]
 800759a:	69d3      	ldr	r3, [r2, #28]
 800759c:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 80075a0:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80075a4:	9106      	str	r1, [sp, #24]
 80075a6:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 80075aa:	2d00      	cmp	r5, #0
 80075ac:	d063      	beq.n	8007676 <D16_GENERIC+0xea>
 80075ae:	f001 0520 	and.w	r5, r1, #32
 80075b2:	f001 0110 	and.w	r1, r1, #16
 80075b6:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8007698 <D16_GENERIC+0x10c>
 80075ba:	46c1      	mov	r9, r8
 80075bc:	9104      	str	r1, [sp, #16]
 80075be:	2100      	movs	r1, #0
 80075c0:	9505      	str	r5, [sp, #20]
 80075c2:	e04d      	b.n	8007660 <D16_GENERIC+0xd4>
 80075c4:	5d87      	ldrb	r7, [r0, r6]
 80075c6:	7805      	ldrb	r5, [r0, #0]
 80075c8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80075cc:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 80075d0:	b2fe      	uxtb	r6, r7
 80075d2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80075d6:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 80075da:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 80075de:	441d      	add	r5, r3
 80075e0:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80075e4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80075e8:	f3c3 0609 	ubfx	r6, r3, #0, #10
 80075ec:	0a9b      	lsrs	r3, r3, #10
 80075ee:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80075f2:	4d27      	ldr	r5, [pc, #156]	; (8007690 <D16_GENERIC+0x104>)
 80075f4:	fb26 c505 	smlad	r5, r6, r5, ip
 80075f8:	4f26      	ldr	r7, [pc, #152]	; (8007694 <D16_GENERIC+0x108>)
 80075fa:	fb26 fc07 	smuad	ip, r6, r7
 80075fe:	9e04      	ldr	r6, [sp, #16]
 8007600:	f101 0801 	add.w	r8, r1, #1
 8007604:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8007608:	b1ae      	cbz	r6, 8007636 <D16_GENERIC+0xaa>
 800760a:	442c      	add	r4, r5
 800760c:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8007610:	eba4 040a 	sub.w	r4, r4, sl
 8007614:	46aa      	mov	sl, r5
 8007616:	17e7      	asrs	r7, r4, #31
 8007618:	fba4 450b 	umull	r4, r5, r4, fp
 800761c:	e9cd 4500 	strd	r4, r5, [sp]
 8007620:	fb0b 5407 	mla	r4, fp, r7, r5
 8007624:	9401      	str	r4, [sp, #4]
 8007626:	e9dd 4500 	ldrd	r4, r5, [sp]
 800762a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800762e:	f145 0500 	adc.w	r5, r5, #0
 8007632:	006c      	lsls	r4, r5, #1
 8007634:	4625      	mov	r5, r4
 8007636:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800763a:	042d      	lsls	r5, r5, #16
 800763c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007640:	2700      	movs	r7, #0
 8007642:	fb01 fb0b 	mul.w	fp, r1, fp
 8007646:	fa1f f188 	uxth.w	r1, r8
 800764a:	fbc9 6705 	smlal	r6, r7, r9, r5
 800764e:	9e03      	ldr	r6, [sp, #12]
 8007650:	10bd      	asrs	r5, r7, #2
 8007652:	f305 050f 	ssat	r5, #16, r5
 8007656:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800765a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800765c:	428d      	cmp	r5, r1
 800765e:	d90a      	bls.n	8007676 <D16_GENERIC+0xea>
 8007660:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007662:	2d01      	cmp	r5, #1
 8007664:	b2ee      	uxtb	r6, r5
 8007666:	d1ad      	bne.n	80075c4 <D16_GENERIC+0x38>
 8007668:	9d05      	ldr	r5, [sp, #20]
 800766a:	f850 7b02 	ldr.w	r7, [r0], #2
 800766e:	2d00      	cmp	r5, #0
 8007670:	d0ae      	beq.n	80075d0 <D16_GENERIC+0x44>
 8007672:	ba7f      	rev16	r7, r7
 8007674:	e7ac      	b.n	80075d0 <D16_GENERIC+0x44>
 8007676:	2000      	movs	r0, #0
 8007678:	9906      	ldr	r1, [sp, #24]
 800767a:	61d3      	str	r3, [r2, #28]
 800767c:	9b07      	ldr	r3, [sp, #28]
 800767e:	f8c2 c008 	str.w	ip, [r2, #8]
 8007682:	60d1      	str	r1, [r2, #12]
 8007684:	6193      	str	r3, [r2, #24]
 8007686:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 800768a:	b009      	add	sp, #36	; 0x24
 800768c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007690:	00030001 	.word	0x00030001
 8007694:	00010003 	.word	0x00010003
 8007698:	24000000 	.word	0x24000000

0800769c <D24_GENERIC>:
 800769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a0:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80076a4:	b089      	sub	sp, #36	; 0x24
 80076a6:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	6993      	ldr	r3, [r2, #24]
 80076ac:	9104      	str	r1, [sp, #16]
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	69d1      	ldr	r1, [r2, #28]
 80076b2:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80076b6:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 80076ba:	2e00      	cmp	r6, #0
 80076bc:	f000 8088 	beq.w	80077d0 <D24_GENERIC+0x134>
 80076c0:	f005 0620 	and.w	r6, r5, #32
 80076c4:	f005 0510 	and.w	r5, r5, #16
 80076c8:	f04f 0c00 	mov.w	ip, #0
 80076cc:	f8df e140 	ldr.w	lr, [pc, #320]	; 8007810 <D24_GENERIC+0x174>
 80076d0:	9606      	str	r6, [sp, #24]
 80076d2:	9505      	str	r5, [sp, #20]
 80076d4:	e064      	b.n	80077a0 <D24_GENERIC+0x104>
 80076d6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80076da:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80076de:	f810 b007 	ldrb.w	fp, [r0, r7]
 80076e2:	042d      	lsls	r5, r5, #16
 80076e4:	19f0      	adds	r0, r6, r7
 80076e6:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 80076ea:	44a9      	add	r9, r5
 80076ec:	fa5f f689 	uxtb.w	r6, r9
 80076f0:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80076f4:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80076f8:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80076fc:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8007700:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8007704:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8007708:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800770c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007710:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8007714:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007718:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800771c:	4d3a      	ldr	r5, [pc, #232]	; (8007808 <D24_GENERIC+0x16c>)
 800771e:	fb26 8705 	smlad	r7, r6, r5, r8
 8007722:	4d3a      	ldr	r5, [pc, #232]	; (800780c <D24_GENERIC+0x170>)
 8007724:	fb26 3805 	smlad	r8, r6, r5, r3
 8007728:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800772c:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8007730:	2301      	movs	r3, #1
 8007732:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8007736:	fb26 f603 	smuad	r6, r6, r3
 800773a:	eb0c 0903 	add.w	r9, ip, r3
 800773e:	eb0b 0306 	add.w	r3, fp, r6
 8007742:	9e05      	ldr	r6, [sp, #20]
 8007744:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8007748:	b1ae      	cbz	r6, 8007776 <D24_GENERIC+0xda>
 800774a:	442c      	add	r4, r5
 800774c:	9e03      	ldr	r6, [sp, #12]
 800774e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8007752:	1ba4      	subs	r4, r4, r6
 8007754:	9503      	str	r5, [sp, #12]
 8007756:	17e7      	asrs	r7, r4, #31
 8007758:	fba4 450b 	umull	r4, r5, r4, fp
 800775c:	e9cd 4500 	strd	r4, r5, [sp]
 8007760:	fb0b 5407 	mla	r4, fp, r7, r5
 8007764:	9401      	str	r4, [sp, #4]
 8007766:	e9dd 4500 	ldrd	r4, r5, [sp]
 800776a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800776e:	f145 0500 	adc.w	r5, r5, #0
 8007772:	006c      	lsls	r4, r5, #1
 8007774:	4625      	mov	r5, r4
 8007776:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800777a:	03ad      	lsls	r5, r5, #14
 800777c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007780:	2700      	movs	r7, #0
 8007782:	fb0c fb0b 	mul.w	fp, ip, fp
 8007786:	fa1f fc89 	uxth.w	ip, r9
 800778a:	fbca 6705 	smlal	r6, r7, sl, r5
 800778e:	9e04      	ldr	r6, [sp, #16]
 8007790:	10bd      	asrs	r5, r7, #2
 8007792:	f305 050f 	ssat	r5, #16, r5
 8007796:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800779a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800779c:	4565      	cmp	r5, ip
 800779e:	d917      	bls.n	80077d0 <D24_GENERIC+0x134>
 80077a0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80077a2:	f890 9000 	ldrb.w	r9, [r0]
 80077a6:	b2ef      	uxtb	r7, r5
 80077a8:	2d01      	cmp	r5, #1
 80077aa:	b23e      	sxth	r6, r7
 80077ac:	d193      	bne.n	80076d6 <D24_GENERIC+0x3a>
 80077ae:	9d06      	ldr	r5, [sp, #24]
 80077b0:	b1dd      	cbz	r5, 80077ea <D24_GENERIC+0x14e>
 80077b2:	78c7      	ldrb	r7, [r0, #3]
 80077b4:	ea4f 2609 	mov.w	r6, r9, lsl #8
 80077b8:	f01c 0f01 	tst.w	ip, #1
 80077bc:	ea4f 2507 	mov.w	r5, r7, lsl #8
 80077c0:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 80077c4:	d11a      	bne.n	80077fc <D24_GENERIC+0x160>
 80077c6:	f890 9001 	ldrb.w	r9, [r0, #1]
 80077ca:	3002      	adds	r0, #2
 80077cc:	44b1      	add	r9, r6
 80077ce:	e78d      	b.n	80076ec <D24_GENERIC+0x50>
 80077d0:	6093      	str	r3, [r2, #8]
 80077d2:	2000      	movs	r0, #0
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	f8c2 800c 	str.w	r8, [r2, #12]
 80077da:	6153      	str	r3, [r2, #20]
 80077dc:	9b07      	ldr	r3, [sp, #28]
 80077de:	61d1      	str	r1, [r2, #28]
 80077e0:	6114      	str	r4, [r2, #16]
 80077e2:	6193      	str	r3, [r2, #24]
 80077e4:	b009      	add	sp, #36	; 0x24
 80077e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ea:	7845      	ldrb	r5, [r0, #1]
 80077ec:	3003      	adds	r0, #3
 80077ee:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80077f2:	022d      	lsls	r5, r5, #8
 80077f4:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80077f8:	44a9      	add	r9, r5
 80077fa:	e777      	b.n	80076ec <D24_GENERIC+0x50>
 80077fc:	7886      	ldrb	r6, [r0, #2]
 80077fe:	3004      	adds	r0, #4
 8007800:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8007804:	44a9      	add	r9, r5
 8007806:	e771      	b.n	80076ec <D24_GENERIC+0x50>
 8007808:	00030001 	.word	0x00030001
 800780c:	00060007 	.word	0x00060007
 8007810:	24000000 	.word	0x24000000

08007814 <D32_GENERIC>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 800781c:	b089      	sub	sp, #36	; 0x24
 800781e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007820:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007822:	9302      	str	r3, [sp, #8]
 8007824:	6993      	ldr	r3, [r2, #24]
 8007826:	9104      	str	r1, [sp, #16]
 8007828:	9307      	str	r3, [sp, #28]
 800782a:	9503      	str	r5, [sp, #12]
 800782c:	69d1      	ldr	r1, [r2, #28]
 800782e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007830:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8007834:	2e00      	cmp	r6, #0
 8007836:	f000 8097 	beq.w	8007968 <D32_GENERIC+0x154>
 800783a:	f005 0620 	and.w	r6, r5, #32
 800783e:	f005 0510 	and.w	r5, r5, #16
 8007842:	f04f 0e00 	mov.w	lr, #0
 8007846:	f8df c150 	ldr.w	ip, [pc, #336]	; 8007998 <D32_GENERIC+0x184>
 800784a:	9606      	str	r6, [sp, #24]
 800784c:	9505      	str	r5, [sp, #20]
 800784e:	e079      	b.n	8007944 <D32_GENERIC+0x130>
 8007850:	783d      	ldrb	r5, [r7, #0]
 8007852:	f810 b009 	ldrb.w	fp, [r0, r9]
 8007856:	042d      	lsls	r5, r5, #16
 8007858:	f810 a006 	ldrb.w	sl, [r0, r6]
 800785c:	f890 9000 	ldrb.w	r9, [r0]
 8007860:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8007864:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8007868:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800786c:	44a9      	add	r9, r5
 800786e:	fa5f f789 	uxtb.w	r7, r9
 8007872:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8007876:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800787a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800787e:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007882:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8007886:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800788a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800788e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8007892:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8007896:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800789a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800789e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80078a2:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 80078a6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80078aa:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 80078ae:	f3c1 0509 	ubfx	r5, r1, #0, #10
 80078b2:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80078b6:	4d34      	ldr	r5, [pc, #208]	; (8007988 <D32_GENERIC+0x174>)
 80078b8:	fb29 8805 	smlad	r8, r9, r5, r8
 80078bc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80078c0:	fb26 8705 	smlad	r7, r6, r5, r8
 80078c4:	4d31      	ldr	r5, [pc, #196]	; (800798c <D32_GENERIC+0x178>)
 80078c6:	fb29 3305 	smlad	r3, r9, r5, r3
 80078ca:	4d31      	ldr	r5, [pc, #196]	; (8007990 <D32_GENERIC+0x17c>)
 80078cc:	fb26 3805 	smlad	r8, r6, r5, r3
 80078d0:	2301      	movs	r3, #1
 80078d2:	fb29 f903 	smuad	r9, r9, r3
 80078d6:	4b2f      	ldr	r3, [pc, #188]	; (8007994 <D32_GENERIC+0x180>)
 80078d8:	fb26 9303 	smlad	r3, r6, r3, r9
 80078dc:	9e05      	ldr	r6, [sp, #20]
 80078de:	f10e 0901 	add.w	r9, lr, #1
 80078e2:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 80078e6:	b1ae      	cbz	r6, 8007914 <D32_GENERIC+0x100>
 80078e8:	442c      	add	r4, r5
 80078ea:	9e02      	ldr	r6, [sp, #8]
 80078ec:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80078f0:	1ba4      	subs	r4, r4, r6
 80078f2:	9502      	str	r5, [sp, #8]
 80078f4:	17e7      	asrs	r7, r4, #31
 80078f6:	fba4 450a 	umull	r4, r5, r4, sl
 80078fa:	e9cd 4500 	strd	r4, r5, [sp]
 80078fe:	fb0a 5407 	mla	r4, sl, r7, r5
 8007902:	9401      	str	r4, [sp, #4]
 8007904:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007908:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800790c:	f145 0500 	adc.w	r5, r5, #0
 8007910:	006c      	lsls	r4, r5, #1
 8007912:	4625      	mov	r5, r4
 8007914:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8007918:	036d      	lsls	r5, r5, #13
 800791a:	9f03      	ldr	r7, [sp, #12]
 800791c:	fb0e fb0a 	mul.w	fp, lr, sl
 8007920:	fa1f fe89 	uxth.w	lr, r9
 8007924:	f04f 0a00 	mov.w	sl, #0
 8007928:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800792c:	9e04      	ldr	r6, [sp, #16]
 800792e:	fbc7 9a05 	smlal	r9, sl, r7, r5
 8007932:	4657      	mov	r7, sl
 8007934:	10bd      	asrs	r5, r7, #2
 8007936:	f305 050f 	ssat	r5, #16, r5
 800793a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800793e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007940:	4575      	cmp	r5, lr
 8007942:	d911      	bls.n	8007968 <D32_GENERIC+0x154>
 8007944:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007946:	b2ee      	uxtb	r6, r5
 8007948:	2d01      	cmp	r5, #1
 800794a:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 800794e:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8007952:	f47f af7d 	bne.w	8007850 <D32_GENERIC+0x3c>
 8007956:	1d05      	adds	r5, r0, #4
 8007958:	f8d0 9000 	ldr.w	r9, [r0]
 800795c:	9806      	ldr	r0, [sp, #24]
 800795e:	b180      	cbz	r0, 8007982 <D32_GENERIC+0x16e>
 8007960:	fa99 f999 	rev16.w	r9, r9
 8007964:	4628      	mov	r0, r5
 8007966:	e782      	b.n	800786e <D32_GENERIC+0x5a>
 8007968:	6093      	str	r3, [r2, #8]
 800796a:	2000      	movs	r0, #0
 800796c:	9b02      	ldr	r3, [sp, #8]
 800796e:	f8c2 800c 	str.w	r8, [r2, #12]
 8007972:	6153      	str	r3, [r2, #20]
 8007974:	9b07      	ldr	r3, [sp, #28]
 8007976:	61d1      	str	r1, [r2, #28]
 8007978:	6114      	str	r4, [r2, #16]
 800797a:	6193      	str	r3, [r2, #24]
 800797c:	b009      	add	sp, #36	; 0x24
 800797e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007982:	4628      	mov	r0, r5
 8007984:	e773      	b.n	800786e <D32_GENERIC+0x5a>
 8007986:	bf00      	nop
 8007988:	00060003 	.word	0x00060003
 800798c:	000a000c 	.word	0x000a000c
 8007990:	000c000a 	.word	0x000c000a
 8007994:	00030006 	.word	0x00030006
 8007998:	24000000 	.word	0x24000000

0800799c <D48_GENERIC>:
 800799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	6913      	ldr	r3, [r2, #16]
 80079a2:	b089      	sub	sp, #36	; 0x24
 80079a4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	6953      	ldr	r3, [r2, #20]
 80079aa:	9104      	str	r1, [sp, #16]
 80079ac:	9302      	str	r3, [sp, #8]
 80079ae:	6993      	ldr	r3, [r2, #24]
 80079b0:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80079b4:	9307      	str	r3, [sp, #28]
 80079b6:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 80079ba:	9100      	str	r1, [sp, #0]
 80079bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80079be:	9103      	str	r1, [sp, #12]
 80079c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80079c2:	2c00      	cmp	r4, #0
 80079c4:	f000 80be 	beq.w	8007b44 <D48_GENERIC+0x1a8>
 80079c8:	f001 0420 	and.w	r4, r1, #32
 80079cc:	f001 0110 	and.w	r1, r1, #16
 80079d0:	f04f 0e00 	mov.w	lr, #0
 80079d4:	9105      	str	r1, [sp, #20]
 80079d6:	9406      	str	r4, [sp, #24]
 80079d8:	4962      	ldr	r1, [pc, #392]	; (8007b64 <D48_GENERIC+0x1c8>)
 80079da:	e0a0      	b.n	8007b1e <D48_GENERIC+0x182>
 80079dc:	eb00 0608 	add.w	r6, r0, r8
 80079e0:	f810 a008 	ldrb.w	sl, [r0, r8]
 80079e4:	f810 9005 	ldrb.w	r9, [r0, r5]
 80079e8:	5df4      	ldrb	r4, [r6, r7]
 80079ea:	443e      	add	r6, r7
 80079ec:	f890 b000 	ldrb.w	fp, [r0]
 80079f0:	0420      	lsls	r0, r4, #16
 80079f2:	eb06 0408 	add.w	r4, r6, r8
 80079f6:	f816 6008 	ldrb.w	r6, [r6, r8]
 80079fa:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 80079fe:	f814 8007 	ldrb.w	r8, [r4, r7]
 8007a02:	4427      	add	r7, r4
 8007a04:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8007a08:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8007a0c:	eb0a 040b 	add.w	r4, sl, fp
 8007a10:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8007a14:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8007a18:	b2f7      	uxtb	r7, r6
 8007a1a:	b2e6      	uxtb	r6, r4
 8007a1c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8007a20:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8007a24:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8007a28:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007a2c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8007a30:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8007a34:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8007a38:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8007a3c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8007a40:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007a44:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8007a48:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007a4c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8007a50:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007a54:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8007a58:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007a5c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007a60:	9d00      	ldr	r5, [sp, #0]
 8007a62:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007a66:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007a6a:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8007a6e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007a72:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8007a76:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8007a7a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007a7e:	4c3a      	ldr	r4, [pc, #232]	; (8007b68 <D48_GENERIC+0x1cc>)
 8007a80:	fb26 5a04 	smlad	sl, r6, r4, r5
 8007a84:	4c39      	ldr	r4, [pc, #228]	; (8007b6c <D48_GENERIC+0x1d0>)
 8007a86:	fb29 aa04 	smlad	sl, r9, r4, sl
 8007a8a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8007a8e:	fb27 aa04 	smlad	sl, r7, r4, sl
 8007a92:	4c37      	ldr	r4, [pc, #220]	; (8007b70 <D48_GENERIC+0x1d4>)
 8007a94:	fb26 3304 	smlad	r3, r6, r4, r3
 8007a98:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8007a9c:	fb29 3304 	smlad	r3, r9, r4, r3
 8007aa0:	4c34      	ldr	r4, [pc, #208]	; (8007b74 <D48_GENERIC+0x1d8>)
 8007aa2:	fb27 3304 	smlad	r3, r7, r4, r3
 8007aa6:	2501      	movs	r5, #1
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	fb26 f605 	smuad	r6, r6, r5
 8007aae:	4b32      	ldr	r3, [pc, #200]	; (8007b78 <D48_GENERIC+0x1dc>)
 8007ab0:	fb29 6903 	smlad	r9, r9, r3, r6
 8007ab4:	4b31      	ldr	r3, [pc, #196]	; (8007b7c <D48_GENERIC+0x1e0>)
 8007ab6:	fb27 9303 	smlad	r3, r7, r3, r9
 8007aba:	9c05      	ldr	r4, [sp, #20]
 8007abc:	eb0e 0805 	add.w	r8, lr, r5
 8007ac0:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8007ac4:	b19c      	cbz	r4, 8007aee <D48_GENERIC+0x152>
 8007ac6:	9c01      	ldr	r4, [sp, #4]
 8007ac8:	9d02      	ldr	r5, [sp, #8]
 8007aca:	4454      	add	r4, sl
 8007acc:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8007ad0:	f8cd a008 	str.w	sl, [sp, #8]
 8007ad4:	1b64      	subs	r4, r4, r5
 8007ad6:	fba4 ab09 	umull	sl, fp, r4, r9
 8007ada:	17e7      	asrs	r7, r4, #31
 8007adc:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8007ae0:	fb09 bb07 	mla	fp, r9, r7, fp
 8007ae4:	f14b 0500 	adc.w	r5, fp, #0
 8007ae8:	006c      	lsls	r4, r5, #1
 8007aea:	46a2      	mov	sl, r4
 8007aec:	9401      	str	r4, [sp, #4]
 8007aee:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007af0:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8007af4:	9d03      	ldr	r5, [sp, #12]
 8007af6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007afa:	fb0e f606 	mul.w	r6, lr, r6
 8007afe:	fa1f fe88 	uxth.w	lr, r8
 8007b02:	f04f 0800 	mov.w	r8, #0
 8007b06:	fbc5 780a 	smlal	r7, r8, r5, sl
 8007b0a:	4645      	mov	r5, r8
 8007b0c:	10ac      	asrs	r4, r5, #2
 8007b0e:	9d04      	ldr	r5, [sp, #16]
 8007b10:	f304 040f 	ssat	r4, #16, r4
 8007b14:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8007b18:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007b1a:	4574      	cmp	r4, lr
 8007b1c:	d912      	bls.n	8007b44 <D48_GENERIC+0x1a8>
 8007b1e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8007b20:	b2e5      	uxtb	r5, r4
 8007b22:	2c01      	cmp	r4, #1
 8007b24:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8007b28:	f1c5 0700 	rsb	r7, r5, #0
 8007b2c:	f47f af56 	bne.w	80079dc <D48_GENERIC+0x40>
 8007b30:	9d06      	ldr	r5, [sp, #24]
 8007b32:	e9d0 4600 	ldrd	r4, r6, [r0]
 8007b36:	3006      	adds	r0, #6
 8007b38:	2d00      	cmp	r5, #0
 8007b3a:	f43f af6b 	beq.w	8007a14 <D48_GENERIC+0x78>
 8007b3e:	ba64      	rev16	r4, r4
 8007b40:	ba76      	rev16	r6, r6
 8007b42:	e767      	b.n	8007a14 <D48_GENERIC+0x78>
 8007b44:	6093      	str	r3, [r2, #8]
 8007b46:	2000      	movs	r0, #0
 8007b48:	9b00      	ldr	r3, [sp, #0]
 8007b4a:	f8c2 c01c 	str.w	ip, [r2, #28]
 8007b4e:	60d3      	str	r3, [r2, #12]
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	6113      	str	r3, [r2, #16]
 8007b54:	9b02      	ldr	r3, [sp, #8]
 8007b56:	6153      	str	r3, [r2, #20]
 8007b58:	9b07      	ldr	r3, [sp, #28]
 8007b5a:	6193      	str	r3, [r2, #24]
 8007b5c:	b009      	add	sp, #36	; 0x24
 8007b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b62:	bf00      	nop
 8007b64:	24000000 	.word	0x24000000
 8007b68:	000f000a 	.word	0x000f000a
 8007b6c:	00060003 	.word	0x00060003
 8007b70:	00150019 	.word	0x00150019
 8007b74:	00190015 	.word	0x00190015
 8007b78:	00030006 	.word	0x00030006
 8007b7c:	000a000f 	.word	0x000a000f

08007b80 <D64_GENERIC>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	6913      	ldr	r3, [r2, #16]
 8007b86:	b089      	sub	sp, #36	; 0x24
 8007b88:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	6953      	ldr	r3, [r2, #20]
 8007b8e:	9105      	str	r1, [sp, #20]
 8007b90:	9303      	str	r3, [sp, #12]
 8007b92:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8007b94:	6993      	ldr	r3, [r2, #24]
 8007b96:	69d4      	ldr	r4, [r2, #28]
 8007b98:	9307      	str	r3, [sp, #28]
 8007b9a:	9504      	str	r5, [sp, #16]
 8007b9c:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8007ba0:	2900      	cmp	r1, #0
 8007ba2:	f000 80e8 	beq.w	8007d76 <D64_GENERIC+0x1f6>
 8007ba6:	6a11      	ldr	r1, [r2, #32]
 8007ba8:	2500      	movs	r5, #0
 8007baa:	46b3      	mov	fp, r6
 8007bac:	9302      	str	r3, [sp, #8]
 8007bae:	9106      	str	r1, [sp, #24]
 8007bb0:	4978      	ldr	r1, [pc, #480]	; (8007d94 <D64_GENERIC+0x214>)
 8007bb2:	e0cc      	b.n	8007d4e <D64_GENERIC+0x1ce>
 8007bb4:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8007bb8:	f1ce 0c00 	rsb	ip, lr, #0
 8007bbc:	f890 9000 	ldrb.w	r9, [r0]
 8007bc0:	eb00 0708 	add.w	r7, r0, r8
 8007bc4:	f810 6008 	ldrb.w	r6, [r0, r8]
 8007bc8:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8007bcc:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007bd0:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8007bd4:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8007bd8:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8007bdc:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8007be0:	f817 000c 	ldrb.w	r0, [r7, ip]
 8007be4:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8007be8:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8007bec:	0400      	lsls	r0, r0, #16
 8007bee:	4467      	add	r7, ip
 8007bf0:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8007bf4:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007bf8:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8007bfc:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8007c00:	444e      	add	r6, r9
 8007c02:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8007c06:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8007c0a:	44c2      	add	sl, r8
 8007c0c:	b2f7      	uxtb	r7, r6
 8007c0e:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8007c12:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8007c16:	0e36      	lsrs	r6, r6, #24
 8007c18:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007c1c:	fa5f fc8a 	uxtb.w	ip, sl
 8007c20:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8007c24:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8007c28:	443c      	add	r4, r7
 8007c2a:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8007c2e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007c32:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8007c36:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8007c3a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007c3e:	4b56      	ldr	r3, [pc, #344]	; (8007d98 <D64_GENERIC+0x218>)
 8007c40:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8007c44:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007c48:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8007c4c:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8007c50:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007c54:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8007c58:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8007c5c:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8007c60:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007c64:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007c68:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007c6c:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8007c70:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007c74:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8007c78:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8007c7c:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8007c80:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007c84:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8007c88:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007c8c:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8007c90:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8007c94:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8007c98:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8007c9c:	fb28 b903 	smlad	r9, r8, r3, fp
 8007ca0:	4b3e      	ldr	r3, [pc, #248]	; (8007d9c <D64_GENERIC+0x21c>)
 8007ca2:	fb26 9903 	smlad	r9, r6, r3, r9
 8007ca6:	4b3e      	ldr	r3, [pc, #248]	; (8007da0 <D64_GENERIC+0x220>)
 8007ca8:	fb2c 9703 	smlad	r7, ip, r3, r9
 8007cac:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8007cb0:	fb2a 7909 	smlad	r9, sl, r9, r7
 8007cb4:	4f3b      	ldr	r7, [pc, #236]	; (8007da4 <D64_GENERIC+0x224>)
 8007cb6:	9b02      	ldr	r3, [sp, #8]
 8007cb8:	fb28 3307 	smlad	r3, r8, r7, r3
 8007cbc:	fb2a 3317 	smladx	r3, sl, r7, r3
 8007cc0:	4f39      	ldr	r7, [pc, #228]	; (8007da8 <D64_GENERIC+0x228>)
 8007cc2:	fb26 3307 	smlad	r3, r6, r7, r3
 8007cc6:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8007cca:	f04f 0e01 	mov.w	lr, #1
 8007cce:	fb28 f80e 	smuad	r8, r8, lr
 8007cd2:	4b36      	ldr	r3, [pc, #216]	; (8007dac <D64_GENERIC+0x22c>)
 8007cd4:	fb26 8603 	smlad	r6, r6, r3, r8
 8007cd8:	4b35      	ldr	r3, [pc, #212]	; (8007db0 <D64_GENERIC+0x230>)
 8007cda:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8007cde:	4b35      	ldr	r3, [pc, #212]	; (8007db4 <D64_GENERIC+0x234>)
 8007ce0:	fb2a c303 	smlad	r3, sl, r3, ip
 8007ce4:	9f06      	ldr	r7, [sp, #24]
 8007ce6:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8007cea:	9302      	str	r3, [sp, #8]
 8007cec:	b1cf      	cbz	r7, 8007d22 <D64_GENERIC+0x1a2>
 8007cee:	9b00      	ldr	r3, [sp, #0]
 8007cf0:	444b      	add	r3, r9
 8007cf2:	461e      	mov	r6, r3
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cfa:	1af6      	subs	r6, r6, r3
 8007cfc:	46b0      	mov	r8, r6
 8007cfe:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8007d02:	e9cd 8900 	strd	r8, r9, [sp]
 8007d06:	fba6 8907 	umull	r8, r9, r6, r7
 8007d0a:	9e01      	ldr	r6, [sp, #4]
 8007d0c:	fb07 9306 	mla	r3, r7, r6, r9
 8007d10:	4646      	mov	r6, r8
 8007d12:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8007d16:	f143 0700 	adc.w	r7, r3, #0
 8007d1a:	fa07 f30e 	lsl.w	r3, r7, lr
 8007d1e:	4699      	mov	r9, r3
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8007d26:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8007d2a:	9b04      	ldr	r3, [sp, #16]
 8007d2c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007d30:	2700      	movs	r7, #0
 8007d32:	fb05 fc0c 	mul.w	ip, r5, ip
 8007d36:	3501      	adds	r5, #1
 8007d38:	fbc3 6709 	smlal	r6, r7, r3, r9
 8007d3c:	9b05      	ldr	r3, [sp, #20]
 8007d3e:	10be      	asrs	r6, r7, #2
 8007d40:	f306 060f 	ssat	r6, #16, r6
 8007d44:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8007d48:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007d4a:	42ae      	cmp	r6, r5
 8007d4c:	dd11      	ble.n	8007d72 <D64_GENERIC+0x1f2>
 8007d4e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8007d52:	f1be 0f01 	cmp.w	lr, #1
 8007d56:	f47f af2d 	bne.w	8007bb4 <D64_GENERIC+0x34>
 8007d5a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8007d5c:	f100 0c08 	add.w	ip, r0, #8
 8007d60:	06bb      	lsls	r3, r7, #26
 8007d62:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8007d66:	d513      	bpl.n	8007d90 <D64_GENERIC+0x210>
 8007d68:	ba76      	rev16	r6, r6
 8007d6a:	fa9a fa9a 	rev16.w	sl, sl
 8007d6e:	4660      	mov	r0, ip
 8007d70:	e74c      	b.n	8007c0c <D64_GENERIC+0x8c>
 8007d72:	465e      	mov	r6, fp
 8007d74:	9b02      	ldr	r3, [sp, #8]
 8007d76:	6093      	str	r3, [r2, #8]
 8007d78:	2000      	movs	r0, #0
 8007d7a:	9b00      	ldr	r3, [sp, #0]
 8007d7c:	60d6      	str	r6, [r2, #12]
 8007d7e:	6113      	str	r3, [r2, #16]
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	61d4      	str	r4, [r2, #28]
 8007d84:	6153      	str	r3, [r2, #20]
 8007d86:	9b07      	ldr	r3, [sp, #28]
 8007d88:	6193      	str	r3, [r2, #24]
 8007d8a:	b009      	add	sp, #36	; 0x24
 8007d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d90:	4660      	mov	r0, ip
 8007d92:	e73b      	b.n	8007c0c <D64_GENERIC+0x8c>
 8007d94:	24000000 	.word	0x24000000
 8007d98:	001c0015 	.word	0x001c0015
 8007d9c:	000f000a 	.word	0x000f000a
 8007da0:	00060003 	.word	0x00060003
 8007da4:	0024002a 	.word	0x0024002a
 8007da8:	002e0030 	.word	0x002e0030
 8007dac:	00030006 	.word	0x00030006
 8007db0:	000a000f 	.word	0x000a000f
 8007db4:	0015001c 	.word	0x0015001c

08007db8 <D80_GENERIC>:
 8007db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	b08b      	sub	sp, #44	; 0x2c
 8007dbe:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007dc0:	9107      	str	r1, [sp, #28]
 8007dc2:	6911      	ldr	r1, [r2, #16]
 8007dc4:	9104      	str	r1, [sp, #16]
 8007dc6:	6951      	ldr	r1, [r2, #20]
 8007dc8:	9105      	str	r1, [sp, #20]
 8007dca:	6991      	ldr	r1, [r2, #24]
 8007dcc:	9109      	str	r1, [sp, #36]	; 0x24
 8007dce:	69d1      	ldr	r1, [r2, #28]
 8007dd0:	9102      	str	r1, [sp, #8]
 8007dd2:	6891      	ldr	r1, [r2, #8]
 8007dd4:	9103      	str	r1, [sp, #12]
 8007dd6:	68d1      	ldr	r1, [r2, #12]
 8007dd8:	9101      	str	r1, [sp, #4]
 8007dda:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007ddc:	9106      	str	r1, [sp, #24]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 810b 	beq.w	8007ffa <D80_GENERIC+0x242>
 8007de4:	6a13      	ldr	r3, [r2, #32]
 8007de6:	f04f 0800 	mov.w	r8, #0
 8007dea:	f8df c260 	ldr.w	ip, [pc, #608]	; 800804c <D80_GENERIC+0x294>
 8007dee:	9308      	str	r3, [sp, #32]
 8007df0:	9200      	str	r2, [sp, #0]
 8007df2:	e0ee      	b.n	8007fd2 <D80_GENERIC+0x21a>
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	f890 e000 	ldrb.w	lr, [r0]
 8007dfa:	b219      	sxth	r1, r3
 8007dfc:	425c      	negs	r4, r3
 8007dfe:	f810 9003 	ldrb.w	r9, [r0, r3]
 8007e02:	004e      	lsls	r6, r1, #1
 8007e04:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8007e08:	4431      	add	r1, r6
 8007e0a:	1843      	adds	r3, r0, r1
 8007e0c:	f810 b001 	ldrb.w	fp, [r0, r1]
 8007e10:	1919      	adds	r1, r3, r4
 8007e12:	5d1b      	ldrb	r3, [r3, r4]
 8007e14:	1948      	adds	r0, r1, r5
 8007e16:	f811 a005 	ldrb.w	sl, [r1, r5]
 8007e1a:	041b      	lsls	r3, r3, #16
 8007e1c:	1907      	adds	r7, r0, r4
 8007e1e:	5d01      	ldrb	r1, [r0, r4]
 8007e20:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007e24:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8007e28:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8007e2c:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8007e30:	0409      	lsls	r1, r1, #16
 8007e32:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8007e36:	eb0b 0905 	add.w	r9, fp, r5
 8007e3a:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8007e3e:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8007e42:	eb09 0b04 	add.w	fp, r9, r4
 8007e46:	f819 4004 	ldrb.w	r4, [r9, r4]
 8007e4a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8007e4e:	4473      	add	r3, lr
 8007e50:	eb0b 0006 	add.w	r0, fp, r6
 8007e54:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8007e58:	4439      	add	r1, r7
 8007e5a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8007e5e:	b2df      	uxtb	r7, r3
 8007e60:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8007e64:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8007e68:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8007e6c:	fa5f fa81 	uxtb.w	sl, r1
 8007e70:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007e74:	9c02      	ldr	r4, [sp, #8]
 8007e76:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8007e7a:	441c      	add	r4, r3
 8007e7c:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8007e80:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8007e84:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8007e88:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007e8c:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8007e90:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8007e94:	b2ed      	uxtb	r5, r5
 8007e96:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8007e9a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007e9e:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8007ea2:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8007ea6:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8007eaa:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8007eae:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8007eb2:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007eb6:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8007eba:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8007ebe:	0e09      	lsrs	r1, r1, #24
 8007ec0:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8007ec4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007ec8:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007ecc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007ed0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007ed4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007ed8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007edc:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8007ee0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007ee4:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8007ee8:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8007eec:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8007ef4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007ef8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007efc:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8007f00:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8007f04:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8007f08:	9202      	str	r2, [sp, #8]
 8007f0a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8007f0e:	4a43      	ldr	r2, [pc, #268]	; (800801c <D80_GENERIC+0x264>)
 8007f10:	9f01      	ldr	r7, [sp, #4]
 8007f12:	fb23 7a02 	smlad	sl, r3, r2, r7
 8007f16:	4a42      	ldr	r2, [pc, #264]	; (8008020 <D80_GENERIC+0x268>)
 8007f18:	fb26 aa02 	smlad	sl, r6, r2, sl
 8007f1c:	4a41      	ldr	r2, [pc, #260]	; (8008024 <D80_GENERIC+0x26c>)
 8007f1e:	fb24 aa02 	smlad	sl, r4, r2, sl
 8007f22:	4a41      	ldr	r2, [pc, #260]	; (8008028 <D80_GENERIC+0x270>)
 8007f24:	fb21 a702 	smlad	r7, r1, r2, sl
 8007f28:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8007f2c:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8007f30:	4a3e      	ldr	r2, [pc, #248]	; (800802c <D80_GENERIC+0x274>)
 8007f32:	9f03      	ldr	r7, [sp, #12]
 8007f34:	fb23 7e02 	smlad	lr, r3, r2, r7
 8007f38:	4a3d      	ldr	r2, [pc, #244]	; (8008030 <D80_GENERIC+0x278>)
 8007f3a:	fb26 ee02 	smlad	lr, r6, r2, lr
 8007f3e:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8007f42:	fb24 e707 	smlad	r7, r4, r7, lr
 8007f46:	4a3b      	ldr	r2, [pc, #236]	; (8008034 <D80_GENERIC+0x27c>)
 8007f48:	fb21 7702 	smlad	r7, r1, r2, r7
 8007f4c:	4a3a      	ldr	r2, [pc, #232]	; (8008038 <D80_GENERIC+0x280>)
 8007f4e:	fb25 7202 	smlad	r2, r5, r2, r7
 8007f52:	f04f 0901 	mov.w	r9, #1
 8007f56:	9201      	str	r2, [sp, #4]
 8007f58:	fb23 f909 	smuad	r9, r3, r9
 8007f5c:	4b37      	ldr	r3, [pc, #220]	; (800803c <D80_GENERIC+0x284>)
 8007f5e:	fb26 9603 	smlad	r6, r6, r3, r9
 8007f62:	4f37      	ldr	r7, [pc, #220]	; (8008040 <D80_GENERIC+0x288>)
 8007f64:	fb24 6407 	smlad	r4, r4, r7, r6
 8007f68:	4f36      	ldr	r7, [pc, #216]	; (8008044 <D80_GENERIC+0x28c>)
 8007f6a:	fb21 4707 	smlad	r7, r1, r7, r4
 8007f6e:	4936      	ldr	r1, [pc, #216]	; (8008048 <D80_GENERIC+0x290>)
 8007f70:	fb25 7301 	smlad	r3, r5, r1, r7
 8007f74:	9303      	str	r3, [sp, #12]
 8007f76:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8007f7a:	9b08      	ldr	r3, [sp, #32]
 8007f7c:	b193      	cbz	r3, 8007fa4 <D80_GENERIC+0x1ec>
 8007f7e:	9a04      	ldr	r2, [sp, #16]
 8007f80:	4452      	add	r2, sl
 8007f82:	4614      	mov	r4, r2
 8007f84:	9a05      	ldr	r2, [sp, #20]
 8007f86:	f8cd a014 	str.w	sl, [sp, #20]
 8007f8a:	1aa4      	subs	r4, r4, r2
 8007f8c:	fba4 1203 	umull	r1, r2, r4, r3
 8007f90:	17e7      	asrs	r7, r4, #31
 8007f92:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8007f96:	fb03 2207 	mla	r2, r3, r7, r2
 8007f9a:	f142 0500 	adc.w	r5, r2, #0
 8007f9e:	006b      	lsls	r3, r5, #1
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	9304      	str	r3, [sp, #16]
 8007fa4:	9e00      	ldr	r6, [sp, #0]
 8007fa6:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8007faa:	9a06      	ldr	r2, [sp, #24]
 8007fac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007fb0:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8007fb2:	2500      	movs	r5, #0
 8007fb4:	fb08 f303 	mul.w	r3, r8, r3
 8007fb8:	fbc2 450a 	smlal	r4, r5, r2, sl
 8007fbc:	9a07      	ldr	r2, [sp, #28]
 8007fbe:	f108 0801 	add.w	r8, r8, #1
 8007fc2:	10a9      	asrs	r1, r5, #2
 8007fc4:	f301 010f 	ssat	r1, #16, r1
 8007fc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007fcc:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8007fce:	4543      	cmp	r3, r8
 8007fd0:	dd12      	ble.n	8007ff8 <D80_GENERIC+0x240>
 8007fd2:	9b00      	ldr	r3, [sp, #0]
 8007fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	f47f af0c 	bne.w	8007df4 <D80_GENERIC+0x3c>
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	6885      	ldr	r5, [r0, #8]
 8007fe0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007fe2:	06b2      	lsls	r2, r6, #26
 8007fe4:	e9d0 3100 	ldrd	r3, r1, [r0]
 8007fe8:	f100 000a 	add.w	r0, r0, #10
 8007fec:	f57f af35 	bpl.w	8007e5a <D80_GENERIC+0xa2>
 8007ff0:	ba5b      	rev16	r3, r3
 8007ff2:	ba49      	rev16	r1, r1
 8007ff4:	ba6d      	rev16	r5, r5
 8007ff6:	e730      	b.n	8007e5a <D80_GENERIC+0xa2>
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	9b03      	ldr	r3, [sp, #12]
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	6093      	str	r3, [r2, #8]
 8008000:	9b01      	ldr	r3, [sp, #4]
 8008002:	60d3      	str	r3, [r2, #12]
 8008004:	9b02      	ldr	r3, [sp, #8]
 8008006:	61d3      	str	r3, [r2, #28]
 8008008:	9b04      	ldr	r3, [sp, #16]
 800800a:	6113      	str	r3, [r2, #16]
 800800c:	9b05      	ldr	r3, [sp, #20]
 800800e:	6153      	str	r3, [r2, #20]
 8008010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008012:	6193      	str	r3, [r2, #24]
 8008014:	b00b      	add	sp, #44	; 0x2c
 8008016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801a:	bf00      	nop
 800801c:	002d0024 	.word	0x002d0024
 8008020:	001c0015 	.word	0x001c0015
 8008024:	000f000a 	.word	0x000f000a
 8008028:	00060003 	.word	0x00060003
 800802c:	0037003f 	.word	0x0037003f
 8008030:	00450049 	.word	0x00450049
 8008034:	00490045 	.word	0x00490045
 8008038:	003f0037 	.word	0x003f0037
 800803c:	00030006 	.word	0x00030006
 8008040:	000a000f 	.word	0x000a000f
 8008044:	0015001c 	.word	0x0015001c
 8008048:	0024002d 	.word	0x0024002d
 800804c:	24000000 	.word	0x24000000

08008050 <D128_GENERIC>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	b08d      	sub	sp, #52	; 0x34
 8008056:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008058:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 800805c:	9109      	str	r1, [sp, #36]	; 0x24
 800805e:	6911      	ldr	r1, [r2, #16]
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	9106      	str	r1, [sp, #24]
 8008064:	6951      	ldr	r1, [r2, #20]
 8008066:	9107      	str	r1, [sp, #28]
 8008068:	6991      	ldr	r1, [r2, #24]
 800806a:	910b      	str	r1, [sp, #44]	; 0x2c
 800806c:	6891      	ldr	r1, [r2, #8]
 800806e:	9103      	str	r1, [sp, #12]
 8008070:	68d1      	ldr	r1, [r2, #12]
 8008072:	9102      	str	r1, [sp, #8]
 8008074:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008076:	9108      	str	r1, [sp, #32]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 8183 	beq.w	8008384 <D128_GENERIC+0x334>
 800807e:	2300      	movs	r3, #0
 8008080:	6a12      	ldr	r2, [r2, #32]
 8008082:	4681      	mov	r9, r0
 8008084:	920a      	str	r2, [sp, #40]	; 0x28
 8008086:	e9cd a304 	strd	sl, r3, [sp, #16]
 800808a:	e165      	b.n	8008358 <D128_GENERIC+0x308>
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	f899 b000 	ldrb.w	fp, [r9]
 8008092:	b213      	sxth	r3, r2
 8008094:	4255      	negs	r5, r2
 8008096:	f819 0002 	ldrb.w	r0, [r9, r2]
 800809a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800809e:	009f      	lsls	r7, r3, #2
 80080a0:	eb09 0402 	add.w	r4, r9, r2
 80080a4:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 80080a8:	f819 8002 	ldrb.w	r8, [r9, r2]
 80080ac:	443b      	add	r3, r7
 80080ae:	1962      	adds	r2, r4, r5
 80080b0:	5d64      	ldrb	r4, [r4, r5]
 80080b2:	eb02 0c03 	add.w	ip, r2, r3
 80080b6:	0424      	lsls	r4, r4, #16
 80080b8:	5cd3      	ldrb	r3, [r2, r3]
 80080ba:	eb0c 0e05 	add.w	lr, ip, r5
 80080be:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 80080c2:	f81c 2005 	ldrb.w	r2, [ip, r5]
 80080c6:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 80080ca:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 80080ce:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 80080d2:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 80080d6:	eb0c 0e06 	add.w	lr, ip, r6
 80080da:	f81c a006 	ldrb.w	sl, [ip, r6]
 80080de:	0412      	lsls	r2, r2, #16
 80080e0:	445c      	add	r4, fp
 80080e2:	eb0e 0c05 	add.w	ip, lr, r5
 80080e6:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 80080ea:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80080ee:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80080f2:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80080f6:	041b      	lsls	r3, r3, #16
 80080f8:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80080fc:	eb00 0b06 	add.w	fp, r0, r6
 8008100:	5d80      	ldrb	r0, [r0, r6]
 8008102:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8008106:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800810a:	eb0b 0a05 	add.w	sl, fp, r5
 800810e:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8008112:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8008116:	0436      	lsls	r6, r6, #16
 8008118:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800811c:	4442      	add	r2, r8
 800811e:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8008122:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8008126:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800812a:	44b9      	add	r9, r7
 800812c:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8008130:	4463      	add	r3, ip
 8008132:	eb06 0508 	add.w	r5, r6, r8
 8008136:	b2e7      	uxtb	r7, r4
 8008138:	f3c4 2607 	ubfx	r6, r4, #8, #8
 800813c:	499b      	ldr	r1, [pc, #620]	; (80083ac <D128_GENERIC+0x35c>)
 800813e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8008142:	0e24      	lsrs	r4, r4, #24
 8008144:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8008148:	b2d7      	uxtb	r7, r2
 800814a:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 800814e:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8008152:	9904      	ldr	r1, [sp, #16]
 8008154:	4461      	add	r1, ip
 8008156:	468c      	mov	ip, r1
 8008158:	4994      	ldr	r1, [pc, #592]	; (80083ac <D128_GENERIC+0x35c>)
 800815a:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 800815e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008162:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8008166:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800816a:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 800816e:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8008172:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8008176:	0e12      	lsrs	r2, r2, #24
 8008178:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 800817c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008180:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8008184:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008188:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 800818c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008190:	b2da      	uxtb	r2, r3
 8008192:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008196:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800819a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800819e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80081a2:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 80081a6:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80081aa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80081ae:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 80081b2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80081b6:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 80081ba:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 80081be:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80081c2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80081c6:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 80081ca:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80081ce:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80081d2:	0e1b      	lsrs	r3, r3, #24
 80081d4:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 80081d8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80081dc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80081e0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 80081e4:	b2eb      	uxtb	r3, r5
 80081e6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80081ea:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 80081ee:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80081f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081f6:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 80081fa:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 80081fe:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008202:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008206:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800820a:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 800820e:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8008212:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8008216:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800821a:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800821e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008222:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8008226:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800822a:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 800822e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8008232:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8008236:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800823a:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 800823e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008242:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8008246:	ea4f 219e 	mov.w	r1, lr, lsr #10
 800824a:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800824e:	9104      	str	r1, [sp, #16]
 8008250:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8008254:	9902      	ldr	r1, [sp, #8]
 8008256:	4a56      	ldr	r2, [pc, #344]	; (80083b0 <D128_GENERIC+0x360>)
 8008258:	fb2b 1202 	smlad	r2, fp, r2, r1
 800825c:	4955      	ldr	r1, [pc, #340]	; (80083b4 <D128_GENERIC+0x364>)
 800825e:	fb28 2201 	smlad	r2, r8, r1, r2
 8008262:	4955      	ldr	r1, [pc, #340]	; (80083b8 <D128_GENERIC+0x368>)
 8008264:	fb27 2201 	smlad	r2, r7, r1, r2
 8008268:	4954      	ldr	r1, [pc, #336]	; (80083bc <D128_GENERIC+0x36c>)
 800826a:	fb26 2201 	smlad	r2, r6, r1, r2
 800826e:	4954      	ldr	r1, [pc, #336]	; (80083c0 <D128_GENERIC+0x370>)
 8008270:	fb24 2201 	smlad	r2, r4, r1, r2
 8008274:	4953      	ldr	r1, [pc, #332]	; (80083c4 <D128_GENERIC+0x374>)
 8008276:	fb20 2201 	smlad	r2, r0, r1, r2
 800827a:	4953      	ldr	r1, [pc, #332]	; (80083c8 <D128_GENERIC+0x378>)
 800827c:	fb23 2201 	smlad	r2, r3, r1, r2
 8008280:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8008284:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8008288:	4950      	ldr	r1, [pc, #320]	; (80083cc <D128_GENERIC+0x37c>)
 800828a:	9a03      	ldr	r2, [sp, #12]
 800828c:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8008290:	4a4f      	ldr	r2, [pc, #316]	; (80083d0 <D128_GENERIC+0x380>)
 8008292:	fb28 ce02 	smlad	lr, r8, r2, ip
 8008296:	f8df c150 	ldr.w	ip, [pc, #336]	; 80083e8 <D128_GENERIC+0x398>
 800829a:	fb27 ec0c 	smlad	ip, r7, ip, lr
 800829e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80083ec <D128_GENERIC+0x39c>
 80082a2:	fb26 cc0e 	smlad	ip, r6, lr, ip
 80082a6:	f8df e148 	ldr.w	lr, [pc, #328]	; 80083f0 <D128_GENERIC+0x3a0>
 80082aa:	fb24 ce0e 	smlad	lr, r4, lr, ip
 80082ae:	f8df c144 	ldr.w	ip, [pc, #324]	; 80083f4 <D128_GENERIC+0x3a4>
 80082b2:	fb20 ee0c 	smlad	lr, r0, ip, lr
 80082b6:	f8df c140 	ldr.w	ip, [pc, #320]	; 80083f8 <D128_GENERIC+0x3a8>
 80082ba:	fb23 ec0c 	smlad	ip, r3, ip, lr
 80082be:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80083fc <D128_GENERIC+0x3ac>
 80082c2:	fb25 c20e 	smlad	r2, r5, lr, ip
 80082c6:	f04f 0c01 	mov.w	ip, #1
 80082ca:	9202      	str	r2, [sp, #8]
 80082cc:	fb2b fb0c 	smuad	fp, fp, ip
 80082d0:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8008400 <D128_GENERIC+0x3b0>
 80082d4:	fb28 bb0c 	smlad	fp, r8, ip, fp
 80082d8:	f8df c128 	ldr.w	ip, [pc, #296]	; 8008404 <D128_GENERIC+0x3b4>
 80082dc:	fb27 bb0c 	smlad	fp, r7, ip, fp
 80082e0:	4f3c      	ldr	r7, [pc, #240]	; (80083d4 <D128_GENERIC+0x384>)
 80082e2:	fb26 bb07 	smlad	fp, r6, r7, fp
 80082e6:	4f3c      	ldr	r7, [pc, #240]	; (80083d8 <D128_GENERIC+0x388>)
 80082e8:	fb24 bb07 	smlad	fp, r4, r7, fp
 80082ec:	4f3b      	ldr	r7, [pc, #236]	; (80083dc <D128_GENERIC+0x38c>)
 80082ee:	fb20 bb07 	smlad	fp, r0, r7, fp
 80082f2:	4f3b      	ldr	r7, [pc, #236]	; (80083e0 <D128_GENERIC+0x390>)
 80082f4:	fb23 bb07 	smlad	fp, r3, r7, fp
 80082f8:	4b3a      	ldr	r3, [pc, #232]	; (80083e4 <D128_GENERIC+0x394>)
 80082fa:	fb25 b303 	smlad	r3, r5, r3, fp
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 8008304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008306:	b183      	cbz	r3, 800832a <D128_GENERIC+0x2da>
 8008308:	9a06      	ldr	r2, [sp, #24]
 800830a:	9907      	ldr	r1, [sp, #28]
 800830c:	4422      	add	r2, r4
 800830e:	9407      	str	r4, [sp, #28]
 8008310:	1a52      	subs	r2, r2, r1
 8008312:	fba2 0103 	umull	r0, r1, r2, r3
 8008316:	17d5      	asrs	r5, r2, #31
 8008318:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 800831c:	fb03 1105 	mla	r1, r3, r5, r1
 8008320:	f141 0300 	adc.w	r3, r1, #0
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	461c      	mov	r4, r3
 8008328:	9306      	str	r3, [sp, #24]
 800832a:	9d01      	ldr	r5, [sp, #4]
 800832c:	01e4      	lsls	r4, r4, #7
 800832e:	9e05      	ldr	r6, [sp, #20]
 8008330:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008334:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8008336:	2300      	movs	r3, #0
 8008338:	9908      	ldr	r1, [sp, #32]
 800833a:	fb06 f000 	mul.w	r0, r6, r0
 800833e:	3601      	adds	r6, #1
 8008340:	fbc1 2304 	smlal	r2, r3, r1, r4
 8008344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008346:	109b      	asrs	r3, r3, #2
 8008348:	9605      	str	r6, [sp, #20]
 800834a:	f303 030f 	ssat	r3, #16, r3
 800834e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8008352:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8008354:	42b3      	cmp	r3, r6
 8008356:	dd13      	ble.n	8008380 <D128_GENERIC+0x330>
 8008358:	9b01      	ldr	r3, [sp, #4]
 800835a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800835c:	2a01      	cmp	r2, #1
 800835e:	f47f ae95 	bne.w	800808c <D128_GENERIC+0x3c>
 8008362:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008364:	f109 0610 	add.w	r6, r9, #16
 8008368:	0681      	lsls	r1, r0, #26
 800836a:	e9d9 4200 	ldrd	r4, r2, [r9]
 800836e:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8008372:	d518      	bpl.n	80083a6 <D128_GENERIC+0x356>
 8008374:	ba64      	rev16	r4, r4
 8008376:	ba52      	rev16	r2, r2
 8008378:	ba5b      	rev16	r3, r3
 800837a:	ba6d      	rev16	r5, r5
 800837c:	46b1      	mov	r9, r6
 800837e:	e6da      	b.n	8008136 <D128_GENERIC+0xe6>
 8008380:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008384:	9b01      	ldr	r3, [sp, #4]
 8008386:	2000      	movs	r0, #0
 8008388:	9903      	ldr	r1, [sp, #12]
 800838a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800838c:	6099      	str	r1, [r3, #8]
 800838e:	9902      	ldr	r1, [sp, #8]
 8008390:	f8c3 a01c 	str.w	sl, [r3, #28]
 8008394:	60d9      	str	r1, [r3, #12]
 8008396:	9906      	ldr	r1, [sp, #24]
 8008398:	619a      	str	r2, [r3, #24]
 800839a:	6119      	str	r1, [r3, #16]
 800839c:	9907      	ldr	r1, [sp, #28]
 800839e:	6159      	str	r1, [r3, #20]
 80083a0:	b00d      	add	sp, #52	; 0x34
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a6:	46b1      	mov	r9, r6
 80083a8:	e6c5      	b.n	8008136 <D128_GENERIC+0xe6>
 80083aa:	bf00      	nop
 80083ac:	24000000 	.word	0x24000000
 80083b0:	00780069 	.word	0x00780069
 80083b4:	005b004e 	.word	0x005b004e
 80083b8:	00420037 	.word	0x00420037
 80083bc:	002d0024 	.word	0x002d0024
 80083c0:	001c0015 	.word	0x001c0015
 80083c4:	000f000a 	.word	0x000f000a
 80083c8:	00060003 	.word	0x00060003
 80083cc:	00880096 	.word	0x00880096
 80083d0:	00a200ac 	.word	0x00a200ac
 80083d4:	0015001c 	.word	0x0015001c
 80083d8:	0024002d 	.word	0x0024002d
 80083dc:	00370042 	.word	0x00370042
 80083e0:	004e005b 	.word	0x004e005b
 80083e4:	00690078 	.word	0x00690078
 80083e8:	00b400ba 	.word	0x00b400ba
 80083ec:	00be00c0 	.word	0x00be00c0
 80083f0:	00c000be 	.word	0x00c000be
 80083f4:	00ba00b4 	.word	0x00ba00b4
 80083f8:	00ac00a2 	.word	0x00ac00a2
 80083fc:	00960088 	.word	0x00960088
 8008400:	00030006 	.word	0x00030006
 8008404:	000a000f 	.word	0x000a000f

08008408 <D16_1CH_HTONS_VOL_HP>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	6993      	ldr	r3, [r2, #24]
 800840e:	b087      	sub	sp, #28
 8008410:	4682      	mov	sl, r0
 8008412:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 800841a:	69d3      	ldr	r3, [r2, #28]
 800841c:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8008420:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8008424:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8008428:	9403      	str	r4, [sp, #12]
 800842a:	2800      	cmp	r0, #0
 800842c:	d054      	beq.n	80084d8 <D16_1CH_HTONS_VOL_HP+0xd0>
 800842e:	f1a1 0902 	sub.w	r9, r1, #2
 8008432:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8008436:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80084e4 <D16_1CH_HTONS_VOL_HP+0xdc>
 800843a:	4650      	mov	r0, sl
 800843c:	9101      	str	r1, [sp, #4]
 800843e:	4619      	mov	r1, r3
 8008440:	f8cd b008 	str.w	fp, [sp, #8]
 8008444:	9205      	str	r2, [sp, #20]
 8008446:	f850 3b02 	ldr.w	r3, [r0], #2
 800844a:	ba5b      	rev16	r3, r3
 800844c:	b2dc      	uxtb	r4, r3
 800844e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008452:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008456:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800845a:	4419      	add	r1, r3
 800845c:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8008460:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8008464:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8008468:	0aa1      	lsrs	r1, r4, #10
 800846a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800846e:	4a1b      	ldr	r2, [pc, #108]	; (80084dc <D16_1CH_HTONS_VOL_HP+0xd4>)
 8008470:	fb23 5402 	smlad	r4, r3, r2, r5
 8008474:	4a1a      	ldr	r2, [pc, #104]	; (80084e0 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8008476:	fb23 f502 	smuad	r5, r3, r2
 800847a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800847e:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8008482:	f04f 0b00 	mov.w	fp, #0
 8008486:	19a2      	adds	r2, r4, r6
 8008488:	eba2 020c 	sub.w	r2, r2, ip
 800848c:	46a4      	mov	ip, r4
 800848e:	17d7      	asrs	r7, r2, #31
 8008490:	fba2 230e 	umull	r2, r3, r2, lr
 8008494:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8008498:	fb0e 3307 	mla	r3, lr, r7, r3
 800849c:	f143 0700 	adc.w	r7, r3, #0
 80084a0:	9b02      	ldr	r3, [sp, #8]
 80084a2:	047a      	lsls	r2, r7, #17
 80084a4:	007e      	lsls	r6, r7, #1
 80084a6:	fbc3 ab02 	smlal	sl, fp, r3, r2
 80084aa:	ea4f 03ab 	mov.w	r3, fp, asr #2
 80084ae:	f303 030f 	ssat	r3, #16, r3
 80084b2:	f829 3f02 	strh.w	r3, [r9, #2]!
 80084b6:	9b01      	ldr	r3, [sp, #4]
 80084b8:	4298      	cmp	r0, r3
 80084ba:	d1c4      	bne.n	8008446 <D16_1CH_HTONS_VOL_HP+0x3e>
 80084bc:	460b      	mov	r3, r1
 80084be:	9a05      	ldr	r2, [sp, #20]
 80084c0:	2000      	movs	r0, #0
 80084c2:	9903      	ldr	r1, [sp, #12]
 80084c4:	61d3      	str	r3, [r2, #28]
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	6095      	str	r5, [r2, #8]
 80084ca:	60d1      	str	r1, [r2, #12]
 80084cc:	6193      	str	r3, [r2, #24]
 80084ce:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80084d2:	b007      	add	sp, #28
 80084d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d8:	4664      	mov	r4, ip
 80084da:	e7f1      	b.n	80084c0 <D16_1CH_HTONS_VOL_HP+0xb8>
 80084dc:	00030001 	.word	0x00030001
 80084e0:	00010003 	.word	0x00010003
 80084e4:	24000000 	.word	0x24000000

080084e8 <D24_1CH_HTONS_VOL_HP>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80084ee:	b089      	sub	sp, #36	; 0x24
 80084f0:	6993      	ldr	r3, [r2, #24]
 80084f2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80084f4:	9604      	str	r6, [sp, #16]
 80084f6:	6a16      	ldr	r6, [r2, #32]
 80084f8:	9306      	str	r3, [sp, #24]
 80084fa:	9505      	str	r5, [sp, #20]
 80084fc:	69d3      	ldr	r3, [r2, #28]
 80084fe:	9600      	str	r6, [sp, #0]
 8008500:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8008504:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8008508:	2d00      	cmp	r5, #0
 800850a:	f000 8083 	beq.w	8008614 <D24_1CH_HTONS_VOL_HP+0x12c>
 800850e:	9207      	str	r2, [sp, #28]
 8008510:	2600      	movs	r6, #0
 8008512:	4622      	mov	r2, r4
 8008514:	f1a1 0b02 	sub.w	fp, r1, #2
 8008518:	4f3f      	ldr	r7, [pc, #252]	; (8008618 <D24_1CH_HTONS_VOL_HP+0x130>)
 800851a:	461d      	mov	r5, r3
 800851c:	f8cd a00c 	str.w	sl, [sp, #12]
 8008520:	9c00      	ldr	r4, [sp, #0]
 8008522:	e056      	b.n	80085d2 <D24_1CH_HTONS_VOL_HP+0xea>
 8008524:	7841      	ldrb	r1, [r0, #1]
 8008526:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 800852a:	3002      	adds	r0, #2
 800852c:	4488      	add	r8, r1
 800852e:	fa5f f388 	uxtb.w	r3, r8
 8008532:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8008536:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800853a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800853e:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8008542:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8008546:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 800854a:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800854e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008552:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8008556:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800855a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800855e:	492f      	ldr	r1, [pc, #188]	; (800861c <D24_1CH_HTONS_VOL_HP+0x134>)
 8008560:	fb23 e901 	smlad	r9, r3, r1, lr
 8008564:	492e      	ldr	r1, [pc, #184]	; (8008620 <D24_1CH_HTONS_VOL_HP+0x138>)
 8008566:	fb23 ce01 	smlad	lr, r3, r1, ip
 800856a:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 800856e:	2101      	movs	r1, #1
 8008570:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8008574:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8008578:	fb23 f301 	smuad	r3, r3, r1
 800857c:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8008580:	eb08 0c03 	add.w	ip, r8, r3
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	f04f 0a00 	mov.w	sl, #0
 800858a:	440a      	add	r2, r1
 800858c:	3601      	adds	r6, #1
 800858e:	9103      	str	r1, [sp, #12]
 8008590:	1ad2      	subs	r2, r2, r3
 8008592:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008596:	fba2 2304 	umull	r2, r3, r2, r4
 800859a:	e9cd 2300 	strd	r2, r3, [sp]
 800859e:	fb04 3309 	mla	r3, r4, r9, r3
 80085a2:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ac:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80085b0:	f143 0300 	adc.w	r3, r3, #0
 80085b4:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 80085b8:	005a      	lsls	r2, r3, #1
 80085ba:	9b04      	ldr	r3, [sp, #16]
 80085bc:	fbc3 9a08 	smlal	r9, sl, r3, r8
 80085c0:	ea4f 03aa 	mov.w	r3, sl, asr #2
 80085c4:	f303 030f 	ssat	r3, #16, r3
 80085c8:	f82b 3f02 	strh.w	r3, [fp, #2]!
 80085cc:	9b05      	ldr	r3, [sp, #20]
 80085ce:	429e      	cmp	r6, r3
 80085d0:	d010      	beq.n	80085f4 <D24_1CH_HTONS_VOL_HP+0x10c>
 80085d2:	f890 9003 	ldrb.w	r9, [r0, #3]
 80085d6:	f016 0f01 	tst.w	r6, #1
 80085da:	7801      	ldrb	r1, [r0, #0]
 80085dc:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80085e0:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80085e4:	d09e      	beq.n	8008524 <D24_1CH_HTONS_VOL_HP+0x3c>
 80085e6:	f890 8002 	ldrb.w	r8, [r0, #2]
 80085ea:	3004      	adds	r0, #4
 80085ec:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 80085f0:	4488      	add	r8, r1
 80085f2:	e79c      	b.n	800852e <D24_1CH_HTONS_VOL_HP+0x46>
 80085f4:	4614      	mov	r4, r2
 80085f6:	462b      	mov	r3, r5
 80085f8:	9a07      	ldr	r2, [sp, #28]
 80085fa:	2000      	movs	r0, #0
 80085fc:	61d3      	str	r3, [r2, #28]
 80085fe:	9b06      	ldr	r3, [sp, #24]
 8008600:	f8c2 c008 	str.w	ip, [r2, #8]
 8008604:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008608:	6193      	str	r3, [r2, #24]
 800860a:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800860e:	b009      	add	sp, #36	; 0x24
 8008610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008614:	4651      	mov	r1, sl
 8008616:	e7f0      	b.n	80085fa <D24_1CH_HTONS_VOL_HP+0x112>
 8008618:	24000000 	.word	0x24000000
 800861c:	00030001 	.word	0x00030001
 8008620:	00060007 	.word	0x00060007

08008624 <D32_1CH_HTONS_VOL_HP>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	6993      	ldr	r3, [r2, #24]
 800862a:	b087      	sub	sp, #28
 800862c:	4683      	mov	fp, r0
 800862e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	69d5      	ldr	r5, [r2, #28]
 8008634:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008636:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800863a:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 800863e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008642:	2800      	cmp	r0, #0
 8008644:	d077      	beq.n	8008736 <D32_1CH_HTONS_VOL_HP+0x112>
 8008646:	460f      	mov	r7, r1
 8008648:	46f1      	mov	r9, lr
 800864a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800864e:	f8cd 8000 	str.w	r8, [sp]
 8008652:	4e3a      	ldr	r6, [pc, #232]	; (800873c <D32_1CH_HTONS_VOL_HP+0x118>)
 8008654:	469e      	mov	lr, r3
 8008656:	46a0      	mov	r8, r4
 8008658:	9103      	str	r1, [sp, #12]
 800865a:	9205      	str	r2, [sp, #20]
 800865c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008660:	ba64      	rev16	r4, r4
 8008662:	b2e0      	uxtb	r0, r4
 8008664:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008668:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800866c:	0e24      	lsrs	r4, r4, #24
 800866e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8008672:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008676:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 800867a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800867e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8008682:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8008686:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800868a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800868e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008692:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008696:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800869a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800869e:	f3c5 0009 	ubfx	r0, r5, #0, #10
 80086a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80086a6:	4826      	ldr	r0, [pc, #152]	; (8008740 <D32_1CH_HTONS_VOL_HP+0x11c>)
 80086a8:	fb23 c400 	smlad	r4, r3, r0, ip
 80086ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80086b0:	fb21 4402 	smlad	r4, r1, r2, r4
 80086b4:	4823      	ldr	r0, [pc, #140]	; (8008744 <D32_1CH_HTONS_VOL_HP+0x120>)
 80086b6:	fb23 ec00 	smlad	ip, r3, r0, lr
 80086ba:	4823      	ldr	r0, [pc, #140]	; (8008748 <D32_1CH_HTONS_VOL_HP+0x124>)
 80086bc:	fb21 cc00 	smlad	ip, r1, r0, ip
 80086c0:	2201      	movs	r2, #1
 80086c2:	fb23 f302 	smuad	r3, r3, r2
 80086c6:	4821      	ldr	r0, [pc, #132]	; (800874c <D32_1CH_HTONS_VOL_HP+0x128>)
 80086c8:	fb21 3e00 	smlad	lr, r1, r0, r3
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 80086d2:	4423      	add	r3, r4
 80086d4:	eba3 0209 	sub.w	r2, r3, r9
 80086d8:	46a1      	mov	r9, r4
 80086da:	17d1      	asrs	r1, r2, #31
 80086dc:	fba2 230a 	umull	r2, r3, r2, sl
 80086e0:	e9cd 2300 	strd	r2, r3, [sp]
 80086e4:	fb0a 3301 	mla	r3, sl, r1, r3
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ee:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80086f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086f6:	f143 0300 	adc.w	r3, r3, #0
 80086fa:	0399      	lsls	r1, r3, #14
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	2300      	movs	r3, #0
 8008702:	fbc8 2301 	smlal	r2, r3, r8, r1
 8008706:	109b      	asrs	r3, r3, #2
 8008708:	f303 030f 	ssat	r3, #16, r3
 800870c:	f827 3b02 	strh.w	r3, [r7], #2
 8008710:	9b03      	ldr	r3, [sp, #12]
 8008712:	429f      	cmp	r7, r3
 8008714:	d1a2      	bne.n	800865c <D32_1CH_HTONS_VOL_HP+0x38>
 8008716:	4673      	mov	r3, lr
 8008718:	f8dd 8000 	ldr.w	r8, [sp]
 800871c:	9a05      	ldr	r2, [sp, #20]
 800871e:	6093      	str	r3, [r2, #8]
 8008720:	2000      	movs	r0, #0
 8008722:	9b04      	ldr	r3, [sp, #16]
 8008724:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008728:	61d5      	str	r5, [r2, #28]
 800872a:	6193      	str	r3, [r2, #24]
 800872c:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008730:	b007      	add	sp, #28
 8008732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008736:	4674      	mov	r4, lr
 8008738:	e7f1      	b.n	800871e <D32_1CH_HTONS_VOL_HP+0xfa>
 800873a:	bf00      	nop
 800873c:	24000000 	.word	0x24000000
 8008740:	00060003 	.word	0x00060003
 8008744:	000a000c 	.word	0x000a000c
 8008748:	000c000a 	.word	0x000c000a
 800874c:	00030006 	.word	0x00030006

08008750 <D48_1CH_HTONS_VOL_HP>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8008756:	b087      	sub	sp, #28
 8008758:	6993      	ldr	r3, [r2, #24]
 800875a:	9701      	str	r7, [sp, #4]
 800875c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800875e:	6a17      	ldr	r7, [r2, #32]
 8008760:	9304      	str	r3, [sp, #16]
 8008762:	69d6      	ldr	r6, [r2, #28]
 8008764:	9702      	str	r7, [sp, #8]
 8008766:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 800876a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800876e:	2d00      	cmp	r5, #0
 8008770:	f000 8093 	beq.w	800889a <D48_1CH_HTONS_VOL_HP+0x14a>
 8008774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008778:	f1a1 0b02 	sub.w	fp, r1, #2
 800877c:	46f2      	mov	sl, lr
 800877e:	4f48      	ldr	r7, [pc, #288]	; (80088a0 <D48_1CH_HTONS_VOL_HP+0x150>)
 8008780:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8008784:	469e      	mov	lr, r3
 8008786:	9205      	str	r2, [sp, #20]
 8008788:	9103      	str	r1, [sp, #12]
 800878a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800878e:	3006      	adds	r0, #6
 8008790:	ba5b      	rev16	r3, r3
 8008792:	fa92 f992 	rev16.w	r9, r2
 8008796:	b2dd      	uxtb	r5, r3
 8008798:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800879c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80087a0:	0e1b      	lsrs	r3, r3, #24
 80087a2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80087a6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80087aa:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 80087ae:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 80087b2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80087b6:	fa5f f289 	uxtb.w	r2, r9
 80087ba:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 80087be:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80087c2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80087c6:	f3c6 0809 	ubfx	r8, r6, #0, #10
 80087ca:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80087ce:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 80087d2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80087d6:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 80087da:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80087de:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80087e2:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80087e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ea:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80087ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80087f2:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80087f6:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80087fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80087fe:	4b29      	ldr	r3, [pc, #164]	; (80088a4 <D48_1CH_HTONS_VOL_HP+0x154>)
 8008800:	fb28 c103 	smlad	r1, r8, r3, ip
 8008804:	4b28      	ldr	r3, [pc, #160]	; (80088a8 <D48_1CH_HTONS_VOL_HP+0x158>)
 8008806:	fb25 1103 	smlad	r1, r5, r3, r1
 800880a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800880e:	fb22 1903 	smlad	r9, r2, r3, r1
 8008812:	4b26      	ldr	r3, [pc, #152]	; (80088ac <D48_1CH_HTONS_VOL_HP+0x15c>)
 8008814:	fb28 ec03 	smlad	ip, r8, r3, lr
 8008818:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800881c:	fb25 cc03 	smlad	ip, r5, r3, ip
 8008820:	4b23      	ldr	r3, [pc, #140]	; (80088b0 <D48_1CH_HTONS_VOL_HP+0x160>)
 8008822:	fb22 cc03 	smlad	ip, r2, r3, ip
 8008826:	2101      	movs	r1, #1
 8008828:	fb28 f801 	smuad	r8, r8, r1
 800882c:	4b21      	ldr	r3, [pc, #132]	; (80088b4 <D48_1CH_HTONS_VOL_HP+0x164>)
 800882e:	fb25 8503 	smlad	r5, r5, r3, r8
 8008832:	4b21      	ldr	r3, [pc, #132]	; (80088b8 <D48_1CH_HTONS_VOL_HP+0x168>)
 8008834:	fb22 5e03 	smlad	lr, r2, r3, r5
 8008838:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 800883c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008840:	190a      	adds	r2, r1, r4
 8008842:	9c02      	ldr	r4, [sp, #8]
 8008844:	eba2 020a 	sub.w	r2, r2, sl
 8008848:	468a      	mov	sl, r1
 800884a:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800884e:	fba2 2304 	umull	r2, r3, r2, r4
 8008852:	fb04 3309 	mla	r3, r4, r9, r3
 8008856:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800885a:	f04f 0900 	mov.w	r9, #0
 800885e:	f143 0500 	adc.w	r5, r3, #0
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	032a      	lsls	r2, r5, #12
 8008866:	006c      	lsls	r4, r5, #1
 8008868:	fbc3 8902 	smlal	r8, r9, r3, r2
 800886c:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008870:	f303 030f 	ssat	r3, #16, r3
 8008874:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	4283      	cmp	r3, r0
 800887c:	d185      	bne.n	800878a <D48_1CH_HTONS_VOL_HP+0x3a>
 800887e:	4673      	mov	r3, lr
 8008880:	9a05      	ldr	r2, [sp, #20]
 8008882:	6093      	str	r3, [r2, #8]
 8008884:	2000      	movs	r0, #0
 8008886:	9b04      	ldr	r3, [sp, #16]
 8008888:	f8c2 c00c 	str.w	ip, [r2, #12]
 800888c:	61d6      	str	r6, [r2, #28]
 800888e:	6193      	str	r3, [r2, #24]
 8008890:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8008894:	b007      	add	sp, #28
 8008896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889a:	4671      	mov	r1, lr
 800889c:	e7f1      	b.n	8008882 <D48_1CH_HTONS_VOL_HP+0x132>
 800889e:	bf00      	nop
 80088a0:	24000000 	.word	0x24000000
 80088a4:	000f000a 	.word	0x000f000a
 80088a8:	00060003 	.word	0x00060003
 80088ac:	00150019 	.word	0x00150019
 80088b0:	00190015 	.word	0x00190015
 80088b4:	00030006 	.word	0x00030006
 80088b8:	000a000f 	.word	0x000a000f

080088bc <D64_1CH_HTONS_VOL_HP>:
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	6993      	ldr	r3, [r2, #24]
 80088c6:	4686      	mov	lr, r0
 80088c8:	9503      	str	r5, [sp, #12]
 80088ca:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 80088cc:	6a15      	ldr	r5, [r2, #32]
 80088ce:	9306      	str	r3, [sp, #24]
 80088d0:	69d6      	ldr	r6, [r2, #28]
 80088d2:	9504      	str	r5, [sp, #16]
 80088d4:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 80088d8:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80088dc:	2800      	cmp	r0, #0
 80088de:	f000 80a4 	beq.w	8008a2a <D64_1CH_HTONS_VOL_HP+0x16e>
 80088e2:	460f      	mov	r7, r1
 80088e4:	46f1      	mov	r9, lr
 80088e6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80088ea:	4d56      	ldr	r5, [pc, #344]	; (8008a44 <D64_1CH_HTONS_VOL_HP+0x188>)
 80088ec:	46a2      	mov	sl, r4
 80088ee:	469e      	mov	lr, r3
 80088f0:	9105      	str	r1, [sp, #20]
 80088f2:	9207      	str	r2, [sp, #28]
 80088f4:	f859 1b08 	ldr.w	r1, [r9], #8
 80088f8:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80088fc:	ba49      	rev16	r1, r1
 80088fe:	fa93 fb93 	rev16.w	fp, r3
 8008902:	b2cb      	uxtb	r3, r1
 8008904:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8008908:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800890c:	0e09      	lsrs	r1, r1, #24
 800890e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8008912:	fa5f f38b 	uxtb.w	r3, fp
 8008916:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800891a:	4426      	add	r6, r4
 800891c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8008920:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8008924:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008928:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800892c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008930:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8008934:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8008938:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800893c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008940:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 8008944:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008948:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800894c:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8008950:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 8008954:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008958:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800895c:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8008960:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8008964:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008968:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 800896c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008970:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8008974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008978:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 800897c:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8008980:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008984:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8008988:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800898c:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8008990:	482d      	ldr	r0, [pc, #180]	; (8008a48 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8008992:	fb22 cc00 	smlad	ip, r2, r0, ip
 8008996:	482d      	ldr	r0, [pc, #180]	; (8008a4c <D64_1CH_HTONS_VOL_HP+0x190>)
 8008998:	fb21 cc00 	smlad	ip, r1, r0, ip
 800899c:	482c      	ldr	r0, [pc, #176]	; (8008a50 <D64_1CH_HTONS_VOL_HP+0x194>)
 800899e:	fb23 cc00 	smlad	ip, r3, r0, ip
 80089a2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80089a6:	fb2b c404 	smlad	r4, fp, r4, ip
 80089aa:	482a      	ldr	r0, [pc, #168]	; (8008a54 <D64_1CH_HTONS_VOL_HP+0x198>)
 80089ac:	fb22 ec00 	smlad	ip, r2, r0, lr
 80089b0:	fb2b cc10 	smladx	ip, fp, r0, ip
 80089b4:	4828      	ldr	r0, [pc, #160]	; (8008a58 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80089b6:	fb21 cc00 	smlad	ip, r1, r0, ip
 80089ba:	fb23 cc10 	smladx	ip, r3, r0, ip
 80089be:	f04f 0e01 	mov.w	lr, #1
 80089c2:	fb22 f20e 	smuad	r2, r2, lr
 80089c6:	4825      	ldr	r0, [pc, #148]	; (8008a5c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80089c8:	fb21 2100 	smlad	r1, r1, r0, r2
 80089cc:	4a24      	ldr	r2, [pc, #144]	; (8008a60 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80089ce:	fb23 1302 	smlad	r3, r3, r2, r1
 80089d2:	4a24      	ldr	r2, [pc, #144]	; (8008a64 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80089d4:	fb2b 3e02 	smlad	lr, fp, r2, r3
 80089d8:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 80089dc:	eb04 0208 	add.w	r2, r4, r8
 80089e0:	eba2 020a 	sub.w	r2, r2, sl
 80089e4:	46a2      	mov	sl, r4
 80089e6:	4610      	mov	r0, r2
 80089e8:	17d1      	asrs	r1, r2, #31
 80089ea:	e9cd 0100 	strd	r0, r1, [sp]
 80089ee:	9904      	ldr	r1, [sp, #16]
 80089f0:	9801      	ldr	r0, [sp, #4]
 80089f2:	fba2 2301 	umull	r2, r3, r2, r1
 80089f6:	fb01 3300 	mla	r3, r1, r0, r3
 80089fa:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 80089fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008a02:	f143 0100 	adc.w	r1, r3, #0
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	02ca      	lsls	r2, r1, #11
 8008a0a:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8008a0e:	2100      	movs	r1, #0
 8008a10:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008a14:	108b      	asrs	r3, r1, #2
 8008a16:	f303 030f 	ssat	r3, #16, r3
 8008a1a:	f827 3b02 	strh.w	r3, [r7], #2
 8008a1e:	9b05      	ldr	r3, [sp, #20]
 8008a20:	429f      	cmp	r7, r3
 8008a22:	f47f af67 	bne.w	80088f4 <D64_1CH_HTONS_VOL_HP+0x38>
 8008a26:	4673      	mov	r3, lr
 8008a28:	9a07      	ldr	r2, [sp, #28]
 8008a2a:	6093      	str	r3, [r2, #8]
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	9b06      	ldr	r3, [sp, #24]
 8008a30:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008a34:	61d6      	str	r6, [r2, #28]
 8008a36:	6193      	str	r3, [r2, #24]
 8008a38:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8008a3c:	b009      	add	sp, #36	; 0x24
 8008a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a42:	bf00      	nop
 8008a44:	24000000 	.word	0x24000000
 8008a48:	001c0015 	.word	0x001c0015
 8008a4c:	000f000a 	.word	0x000f000a
 8008a50:	00060003 	.word	0x00060003
 8008a54:	0024002a 	.word	0x0024002a
 8008a58:	002e0030 	.word	0x002e0030
 8008a5c:	00030006 	.word	0x00030006
 8008a60:	000a000f 	.word	0x000a000f
 8008a64:	0015001c 	.word	0x0015001c

08008a68 <D80_1CH_HTONS_VOL_HP>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	6913      	ldr	r3, [r2, #16]
 8008a6e:	b089      	sub	sp, #36	; 0x24
 8008a70:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	9603      	str	r6, [sp, #12]
 8008a76:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8008a78:	6a16      	ldr	r6, [r2, #32]
 8008a7a:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8008a7e:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 8008a82:	9306      	str	r3, [sp, #24]
 8008a84:	9604      	str	r6, [sp, #16]
 8008a86:	69d3      	ldr	r3, [r2, #28]
 8008a88:	2c00      	cmp	r4, #0
 8008a8a:	f000 80ce 	beq.w	8008c2a <D80_1CH_HTONS_VOL_HP+0x1c2>
 8008a8e:	3902      	subs	r1, #2
 8008a90:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008a94:	4e66      	ldr	r6, [pc, #408]	; (8008c30 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 8008a96:	469e      	mov	lr, r3
 8008a98:	9102      	str	r1, [sp, #8]
 8008a9a:	46aa      	mov	sl, r5
 8008a9c:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8008aa0:	9207      	str	r2, [sp, #28]
 8008aa2:	9105      	str	r1, [sp, #20]
 8008aa4:	6883      	ldr	r3, [r0, #8]
 8008aa6:	e9d0 4200 	ldrd	r4, r2, [r0]
 8008aaa:	300a      	adds	r0, #10
 8008aac:	ba64      	rev16	r4, r4
 8008aae:	ba52      	rev16	r2, r2
 8008ab0:	fa93 fb93 	rev16.w	fp, r3
 8008ab4:	b2e5      	uxtb	r5, r4
 8008ab6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8008aba:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8008abe:	0e24      	lsrs	r4, r4, #24
 8008ac0:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8008ac4:	b2d5      	uxtb	r5, r2
 8008ac6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008aca:	44c6      	add	lr, r8
 8008acc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008ad0:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8008ad4:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8008ad8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008adc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008ae0:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8008ae4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aec:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8008af0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8008af4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8008af8:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8008afc:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8008b00:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8008b04:	0e12      	lsrs	r2, r2, #24
 8008b06:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8008b0a:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8008b0e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8008b12:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008b16:	fa5f fb8b 	uxtb.w	fp, fp
 8008b1a:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8008b1e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008b22:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8008b26:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008b2a:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8008b2e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008b32:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008b36:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8008b3a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8008b3e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008b42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008b46:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8008b4a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008b4e:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8008b52:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8008b56:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8008b5a:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8008b5e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8008b62:	4934      	ldr	r1, [pc, #208]	; (8008c34 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8008b64:	fb23 cc01 	smlad	ip, r3, r1, ip
 8008b68:	4933      	ldr	r1, [pc, #204]	; (8008c38 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8008b6a:	fb24 cc01 	smlad	ip, r4, r1, ip
 8008b6e:	4933      	ldr	r1, [pc, #204]	; (8008c3c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008b70:	fb28 cc01 	smlad	ip, r8, r1, ip
 8008b74:	4932      	ldr	r1, [pc, #200]	; (8008c40 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8008b76:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008b7a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008b7e:	fb2b c901 	smlad	r9, fp, r1, ip
 8008b82:	4930      	ldr	r1, [pc, #192]	; (8008c44 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8008b84:	fb23 7701 	smlad	r7, r3, r1, r7
 8008b88:	492f      	ldr	r1, [pc, #188]	; (8008c48 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008b8a:	fb24 7701 	smlad	r7, r4, r1, r7
 8008b8e:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8008b92:	fb28 7c0c 	smlad	ip, r8, ip, r7
 8008b96:	492d      	ldr	r1, [pc, #180]	; (8008c4c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008b98:	fb22 cc01 	smlad	ip, r2, r1, ip
 8008b9c:	492c      	ldr	r1, [pc, #176]	; (8008c50 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008b9e:	fb2b cc01 	smlad	ip, fp, r1, ip
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	fb23 f301 	smuad	r3, r3, r1
 8008ba8:	492a      	ldr	r1, [pc, #168]	; (8008c54 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008baa:	fb24 3401 	smlad	r4, r4, r1, r3
 8008bae:	492a      	ldr	r1, [pc, #168]	; (8008c58 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008bb0:	fb28 4101 	smlad	r1, r8, r1, r4
 8008bb4:	4f29      	ldr	r7, [pc, #164]	; (8008c5c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008bb6:	fb22 1207 	smlad	r2, r2, r7, r1
 8008bba:	4f29      	ldr	r7, [pc, #164]	; (8008c60 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008bbc:	fb2b 2707 	smlad	r7, fp, r7, r2
 8008bc0:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	9c04      	ldr	r4, [sp, #16]
 8008bc8:	440b      	add	r3, r1
 8008bca:	eba3 020a 	sub.w	r2, r3, sl
 8008bce:	468a      	mov	sl, r1
 8008bd0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008bd4:	fba2 2304 	umull	r2, r3, r2, r4
 8008bd8:	fb04 3309 	mla	r3, r4, r9, r3
 8008bdc:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8008be0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008be4:	f143 0500 	adc.w	r5, r3, #0
 8008be8:	006b      	lsls	r3, r5, #1
 8008bea:	02aa      	lsls	r2, r5, #10
 8008bec:	2500      	movs	r5, #0
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	fbc3 4502 	smlal	r4, r5, r3, r2
 8008bf6:	9a02      	ldr	r2, [sp, #8]
 8008bf8:	10ab      	asrs	r3, r5, #2
 8008bfa:	f303 030f 	ssat	r3, #16, r3
 8008bfe:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008c02:	9b05      	ldr	r3, [sp, #20]
 8008c04:	9202      	str	r2, [sp, #8]
 8008c06:	4298      	cmp	r0, r3
 8008c08:	f47f af4c 	bne.w	8008aa4 <D80_1CH_HTONS_VOL_HP+0x3c>
 8008c0c:	4673      	mov	r3, lr
 8008c0e:	9a07      	ldr	r2, [sp, #28]
 8008c10:	61d3      	str	r3, [r2, #28]
 8008c12:	2000      	movs	r0, #0
 8008c14:	9b01      	ldr	r3, [sp, #4]
 8008c16:	6097      	str	r7, [r2, #8]
 8008c18:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008c1c:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8008c20:	9b06      	ldr	r3, [sp, #24]
 8008c22:	6193      	str	r3, [r2, #24]
 8008c24:	b009      	add	sp, #36	; 0x24
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	e7f0      	b.n	8008c10 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8008c2e:	bf00      	nop
 8008c30:	24000000 	.word	0x24000000
 8008c34:	002d0024 	.word	0x002d0024
 8008c38:	001c0015 	.word	0x001c0015
 8008c3c:	000f000a 	.word	0x000f000a
 8008c40:	00060003 	.word	0x00060003
 8008c44:	0037003f 	.word	0x0037003f
 8008c48:	00450049 	.word	0x00450049
 8008c4c:	00490045 	.word	0x00490045
 8008c50:	003f0037 	.word	0x003f0037
 8008c54:	00030006 	.word	0x00030006
 8008c58:	000a000f 	.word	0x000a000f
 8008c5c:	0015001c 	.word	0x0015001c
 8008c60:	0024002d 	.word	0x0024002d

08008c64 <D128_1CH_HTONS_VOL_HP>:
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c68:	6914      	ldr	r4, [r2, #16]
 8008c6a:	b08d      	sub	sp, #52	; 0x34
 8008c6c:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8008c6e:	9404      	str	r4, [sp, #16]
 8008c70:	6954      	ldr	r4, [r2, #20]
 8008c72:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c74:	9405      	str	r4, [sp, #20]
 8008c76:	6994      	ldr	r4, [r2, #24]
 8008c78:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008c7c:	940a      	str	r4, [sp, #40]	; 0x28
 8008c7e:	6894      	ldr	r4, [r2, #8]
 8008c80:	9403      	str	r4, [sp, #12]
 8008c82:	68d4      	ldr	r4, [r2, #12]
 8008c84:	9402      	str	r4, [sp, #8]
 8008c86:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8008c88:	6a12      	ldr	r2, [r2, #32]
 8008c8a:	9407      	str	r4, [sp, #28]
 8008c8c:	9208      	str	r2, [sp, #32]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 812e 	beq.w	8008ef0 <D128_1CH_HTONS_VOL_HP+0x28c>
 8008c94:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008c98:	f100 0b10 	add.w	fp, r0, #16
 8008c9c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8008f30 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8008ca0:	9106      	str	r1, [sp, #24]
 8008ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca4:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8008ca8:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8008cac:	ba40      	rev16	r0, r0
 8008cae:	ba52      	rev16	r2, r2
 8008cb0:	ba5b      	rev16	r3, r3
 8008cb2:	ba76      	rev16	r6, r6
 8008cb4:	b2c5      	uxtb	r5, r0
 8008cb6:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8008cba:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008cbe:	0e00      	lsrs	r0, r0, #24
 8008cc0:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8008cc4:	b2d5      	uxtb	r5, r2
 8008cc6:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8008cca:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008cce:	44bc      	add	ip, r7
 8008cd0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008cd4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8008cd8:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008cdc:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8008ce0:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8008ce4:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008ce8:	0e12      	lsrs	r2, r2, #24
 8008cea:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8008cee:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8008cf2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008cf6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008cfa:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8008cfe:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8008d02:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8008d0c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008d10:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8008d14:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008d18:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8008d1c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008d20:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8008d24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008d28:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8008d2c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008d30:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8008d34:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008d38:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008d3c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008d40:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8008d44:	0e1b      	lsrs	r3, r3, #24
 8008d46:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008d4a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008d4e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8008d52:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8008d56:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8008d5a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008d5e:	b2f3      	uxtb	r3, r6
 8008d60:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8008d64:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8008d68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d6c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8008d70:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008d74:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8008d78:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008d7c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008d80:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8008d84:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8008d88:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8008d8c:	0e36      	lsrs	r6, r6, #24
 8008d8e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8008d92:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008d96:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8008d9a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008d9e:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8008da2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008da6:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8008daa:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8008dae:	9101      	str	r1, [sp, #4]
 8008db0:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8008db4:	9b02      	ldr	r3, [sp, #8]
 8008db6:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8008dba:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8008dc4:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8008dc8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008dcc:	4a49      	ldr	r2, [pc, #292]	; (8008ef4 <D128_1CH_HTONS_VOL_HP+0x290>)
 8008dce:	fb2e 3202 	smlad	r2, lr, r2, r3
 8008dd2:	4b49      	ldr	r3, [pc, #292]	; (8008ef8 <D128_1CH_HTONS_VOL_HP+0x294>)
 8008dd4:	fb27 2203 	smlad	r2, r7, r3, r2
 8008dd8:	4b48      	ldr	r3, [pc, #288]	; (8008efc <D128_1CH_HTONS_VOL_HP+0x298>)
 8008dda:	fb25 2203 	smlad	r2, r5, r3, r2
 8008dde:	4b48      	ldr	r3, [pc, #288]	; (8008f00 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8008de0:	fb24 2203 	smlad	r2, r4, r3, r2
 8008de4:	4b47      	ldr	r3, [pc, #284]	; (8008f04 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8008de6:	fb20 2803 	smlad	r8, r0, r3, r2
 8008dea:	4b47      	ldr	r3, [pc, #284]	; (8008f08 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8008dec:	9a01      	ldr	r2, [sp, #4]
 8008dee:	fb22 8203 	smlad	r2, r2, r3, r8
 8008df2:	4b46      	ldr	r3, [pc, #280]	; (8008f0c <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8008df4:	9102      	str	r1, [sp, #8]
 8008df6:	fb21 2203 	smlad	r2, r1, r3, r2
 8008dfa:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8008dfe:	fb26 2308 	smlad	r3, r6, r8, r2
 8008e02:	4619      	mov	r1, r3
 8008e04:	9a03      	ldr	r2, [sp, #12]
 8008e06:	4b42      	ldr	r3, [pc, #264]	; (8008f10 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8008e08:	fb2e 2803 	smlad	r8, lr, r3, r2
 8008e0c:	4b41      	ldr	r3, [pc, #260]	; (8008f14 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8008e0e:	fb27 8a03 	smlad	sl, r7, r3, r8
 8008e12:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008f34 <D128_1CH_HTONS_VOL_HP+0x2d0>
 8008e16:	fb25 a808 	smlad	r8, r5, r8, sl
 8008e1a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8008f38 <D128_1CH_HTONS_VOL_HP+0x2d4>
 8008e1e:	fb24 880a 	smlad	r8, r4, sl, r8
 8008e22:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008f3c <D128_1CH_HTONS_VOL_HP+0x2d8>
 8008e26:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8008e2a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8008f40 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	fb23 aa08 	smlad	sl, r3, r8, sl
 8008e34:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008f44 <D128_1CH_HTONS_VOL_HP+0x2e0>
 8008e38:	9a02      	ldr	r2, [sp, #8]
 8008e3a:	fb22 a808 	smlad	r8, r2, r8, sl
 8008e3e:	f8df a108 	ldr.w	sl, [pc, #264]	; 8008f48 <D128_1CH_HTONS_VOL_HP+0x2e4>
 8008e42:	fb26 830a 	smlad	r3, r6, sl, r8
 8008e46:	f04f 0801 	mov.w	r8, #1
 8008e4a:	9302      	str	r3, [sp, #8]
 8008e4c:	fb2e fe08 	smuad	lr, lr, r8
 8008e50:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8008f4c <D128_1CH_HTONS_VOL_HP+0x2e8>
 8008e54:	fb27 ee08 	smlad	lr, r7, r8, lr
 8008e58:	4f2f      	ldr	r7, [pc, #188]	; (8008f18 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8008e5a:	fb25 ee07 	smlad	lr, r5, r7, lr
 8008e5e:	4f2f      	ldr	r7, [pc, #188]	; (8008f1c <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8008e60:	fb24 ee07 	smlad	lr, r4, r7, lr
 8008e64:	4f2e      	ldr	r7, [pc, #184]	; (8008f20 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8008e66:	fb20 ee07 	smlad	lr, r0, r7, lr
 8008e6a:	4f2e      	ldr	r7, [pc, #184]	; (8008f24 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	fb23 ee07 	smlad	lr, r3, r7, lr
 8008e72:	4f2d      	ldr	r7, [pc, #180]	; (8008f28 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8008e74:	fb22 e707 	smlad	r7, r2, r7, lr
 8008e78:	4b2c      	ldr	r3, [pc, #176]	; (8008f2c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008e7a:	fb26 7303 	smlad	r3, r6, r3, r7
 8008e7e:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8008e82:	9303      	str	r3, [sp, #12]
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008e8a:	9f08      	ldr	r7, [sp, #32]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4433      	add	r3, r6
 8008e90:	f10b 0b10 	add.w	fp, fp, #16
 8008e94:	461a      	mov	r2, r3
 8008e96:	9b05      	ldr	r3, [sp, #20]
 8008e98:	9605      	str	r6, [sp, #20]
 8008e9a:	1ad2      	subs	r2, r2, r3
 8008e9c:	17d5      	asrs	r5, r2, #31
 8008e9e:	fba2 2307 	umull	r2, r3, r2, r7
 8008ea2:	1814      	adds	r4, r2, r0
 8008ea4:	fb07 3305 	mla	r3, r7, r5, r3
 8008ea8:	eb43 0501 	adc.w	r5, r3, r1
 8008eac:	006b      	lsls	r3, r5, #1
 8008eae:	022a      	lsls	r2, r5, #8
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	9b07      	ldr	r3, [sp, #28]
 8008eb4:	fbc3 0102 	smlal	r0, r1, r3, r2
 8008eb8:	9a06      	ldr	r2, [sp, #24]
 8008eba:	108b      	asrs	r3, r1, #2
 8008ebc:	f303 030f 	ssat	r3, #16, r3
 8008ec0:	f822 3b02 	strh.w	r3, [r2], #2
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	9206      	str	r2, [sp, #24]
 8008ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	f47f aeea 	bne.w	8008ca4 <D128_1CH_HTONS_VOL_HP+0x40>
 8008ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	9903      	ldr	r1, [sp, #12]
 8008ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed8:	6099      	str	r1, [r3, #8]
 8008eda:	9902      	ldr	r1, [sp, #8]
 8008edc:	f8c3 c01c 	str.w	ip, [r3, #28]
 8008ee0:	60d9      	str	r1, [r3, #12]
 8008ee2:	9904      	ldr	r1, [sp, #16]
 8008ee4:	619a      	str	r2, [r3, #24]
 8008ee6:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8008eea:	b00d      	add	sp, #52	; 0x34
 8008eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef0:	9e05      	ldr	r6, [sp, #20]
 8008ef2:	e7ed      	b.n	8008ed0 <D128_1CH_HTONS_VOL_HP+0x26c>
 8008ef4:	00780069 	.word	0x00780069
 8008ef8:	005b004e 	.word	0x005b004e
 8008efc:	00420037 	.word	0x00420037
 8008f00:	002d0024 	.word	0x002d0024
 8008f04:	001c0015 	.word	0x001c0015
 8008f08:	000f000a 	.word	0x000f000a
 8008f0c:	00060003 	.word	0x00060003
 8008f10:	00880096 	.word	0x00880096
 8008f14:	00a200ac 	.word	0x00a200ac
 8008f18:	000a000f 	.word	0x000a000f
 8008f1c:	0015001c 	.word	0x0015001c
 8008f20:	0024002d 	.word	0x0024002d
 8008f24:	00370042 	.word	0x00370042
 8008f28:	004e005b 	.word	0x004e005b
 8008f2c:	00690078 	.word	0x00690078
 8008f30:	24000000 	.word	0x24000000
 8008f34:	00b400ba 	.word	0x00b400ba
 8008f38:	00be00c0 	.word	0x00be00c0
 8008f3c:	00c000be 	.word	0x00c000be
 8008f40:	00ba00b4 	.word	0x00ba00b4
 8008f44:	00ac00a2 	.word	0x00ac00a2
 8008f48:	00960088 	.word	0x00960088
 8008f4c:	00030006 	.word	0x00030006

08008f50 <PDM_Filter_Init>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	2240      	movs	r2, #64	; 0x40
 8008f54:	2100      	movs	r1, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	300c      	adds	r0, #12
 8008f5a:	f000 f9ed 	bl	8009338 <memset>
 8008f5e:	4a56      	ldr	r2, [pc, #344]	; (80090b8 <PDM_Filter_Init+0x168>)
 8008f60:	4856      	ldr	r0, [pc, #344]	; (80090bc <PDM_Filter_Init+0x16c>)
 8008f62:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8008f66:	6813      	ldr	r3, [r2, #0]
 8008f68:	f24c 2540 	movw	r5, #49728	; 0xc240
 8008f6c:	f023 0301 	bic.w	r3, r3, #1
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	6803      	ldr	r3, [r0, #0]
 8008f74:	400b      	ands	r3, r1
 8008f76:	42ab      	cmp	r3, r5
 8008f78:	d040      	beq.n	8008ffc <PDM_Filter_Init+0xac>
 8008f7a:	6803      	ldr	r3, [r0, #0]
 8008f7c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8008f80:	4019      	ands	r1, r3
 8008f82:	4291      	cmp	r1, r2
 8008f84:	d03a      	beq.n	8008ffc <PDM_Filter_Init+0xac>
 8008f86:	4b4e      	ldr	r3, [pc, #312]	; (80090c0 <PDM_Filter_Init+0x170>)
 8008f88:	2101      	movs	r1, #1
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	6019      	str	r1, [r3, #0]
 8008f8e:	6813      	ldr	r3, [r2, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1fc      	bne.n	8008f8e <PDM_Filter_Init+0x3e>
 8008f94:	4b4b      	ldr	r3, [pc, #300]	; (80090c4 <PDM_Filter_Init+0x174>)
 8008f96:	494c      	ldr	r1, [pc, #304]	; (80090c8 <PDM_Filter_Init+0x178>)
 8008f98:	4a4c      	ldr	r2, [pc, #304]	; (80090cc <PDM_Filter_Init+0x17c>)
 8008f9a:	6019      	str	r1, [r3, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	8820      	ldrh	r0, [r4, #0]
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	8961      	ldrh	r1, [r4, #10]
 8008fa4:	f04f 0300 	mov.w	r3, #0
 8008fa8:	8922      	ldrh	r2, [r4, #8]
 8008faa:	bf14      	ite	ne
 8008fac:	2500      	movne	r5, #0
 8008fae:	4d47      	ldreq	r5, [pc, #284]	; (80090cc <PDM_Filter_Init+0x17c>)
 8008fb0:	2801      	cmp	r0, #1
 8008fb2:	61a3      	str	r3, [r4, #24]
 8008fb4:	6465      	str	r5, [r4, #68]	; 0x44
 8008fb6:	60e3      	str	r3, [r4, #12]
 8008fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8008fba:	6423      	str	r3, [r4, #64]	; 0x40
 8008fbc:	86a1      	strh	r1, [r4, #52]	; 0x34
 8008fbe:	86e2      	strh	r2, [r4, #54]	; 0x36
 8008fc0:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8008fc4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8008fc8:	d936      	bls.n	8009038 <PDM_Filter_Init+0xe8>
 8008fca:	2003      	movs	r0, #3
 8008fcc:	2302      	movs	r3, #2
 8008fce:	8862      	ldrh	r2, [r4, #2]
 8008fd0:	2a01      	cmp	r2, #1
 8008fd2:	d92e      	bls.n	8009032 <PDM_Filter_Init+0xe2>
 8008fd4:	2140      	movs	r1, #64	; 0x40
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008fda:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8008fde:	d101      	bne.n	8008fe4 <PDM_Filter_Init+0x94>
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	6421      	str	r1, [r4, #64]	; 0x40
 8008fe4:	6862      	ldr	r2, [r4, #4]
 8008fe6:	b11a      	cbz	r2, 8008ff0 <PDM_Filter_Init+0xa0>
 8008fe8:	f043 0310 	orr.w	r3, r3, #16
 8008fec:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008fee:	6423      	str	r3, [r4, #64]	; 0x40
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	8722      	strh	r2, [r4, #56]	; 0x38
 8008ff4:	b908      	cbnz	r0, 8008ffa <PDM_Filter_Init+0xaa>
 8008ff6:	3380      	adds	r3, #128	; 0x80
 8008ff8:	6423      	str	r3, [r4, #64]	; 0x40
 8008ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffc:	4b34      	ldr	r3, [pc, #208]	; (80090d0 <PDM_Filter_Init+0x180>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1c0      	bne.n	8008f86 <PDM_Filter_Init+0x36>
 8009004:	4a33      	ldr	r2, [pc, #204]	; (80090d4 <PDM_Filter_Init+0x184>)
 8009006:	6813      	ldr	r3, [r2, #0]
 8009008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800900c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009010:	d006      	beq.n	8009020 <PDM_Filter_Init+0xd0>
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	f240 4283 	movw	r2, #1155	; 0x483
 8009018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800901c:	4293      	cmp	r3, r2
 800901e:	d1b2      	bne.n	8008f86 <PDM_Filter_Init+0x36>
 8009020:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <PDM_Filter_Init+0x188>)
 8009022:	2101      	movs	r1, #1
 8009024:	461a      	mov	r2, r3
 8009026:	6019      	str	r1, [r3, #0]
 8009028:	6813      	ldr	r3, [r2, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1fc      	bne.n	8009028 <PDM_Filter_Init+0xd8>
 800902e:	4b2b      	ldr	r3, [pc, #172]	; (80090dc <PDM_Filter_Init+0x18c>)
 8009030:	e7b1      	b.n	8008f96 <PDM_Filter_Init+0x46>
 8009032:	d03a      	beq.n	80090aa <PDM_Filter_Init+0x15a>
 8009034:	4618      	mov	r0, r3
 8009036:	e7cd      	b.n	8008fd4 <PDM_Filter_Init+0x84>
 8009038:	4d29      	ldr	r5, [pc, #164]	; (80090e0 <PDM_Filter_Init+0x190>)
 800903a:	782a      	ldrb	r2, [r5, #0]
 800903c:	d01b      	beq.n	8009076 <PDM_Filter_Init+0x126>
 800903e:	2a01      	cmp	r2, #1
 8009040:	d001      	beq.n	8009046 <PDM_Filter_Init+0xf6>
 8009042:	2001      	movs	r0, #1
 8009044:	e7c3      	b.n	8008fce <PDM_Filter_Init+0x7e>
 8009046:	4927      	ldr	r1, [pc, #156]	; (80090e4 <PDM_Filter_Init+0x194>)
 8009048:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80090ec <PDM_Filter_Init+0x19c>
 800904c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009050:	4e25      	ldr	r6, [pc, #148]	; (80090e8 <PDM_Filter_Init+0x198>)
 8009052:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009056:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800905a:	ea02 0006 	and.w	r0, r2, r6
 800905e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009062:	428f      	cmp	r7, r1
 8009064:	ea43 0300 	orr.w	r3, r3, r0
 8009068:	4413      	add	r3, r2
 800906a:	600b      	str	r3, [r1, #0]
 800906c:	d1f1      	bne.n	8009052 <PDM_Filter_Init+0x102>
 800906e:	2300      	movs	r3, #0
 8009070:	2001      	movs	r0, #1
 8009072:	702b      	strb	r3, [r5, #0]
 8009074:	e7ab      	b.n	8008fce <PDM_Filter_Init+0x7e>
 8009076:	2a00      	cmp	r2, #0
 8009078:	d1a9      	bne.n	8008fce <PDM_Filter_Init+0x7e>
 800907a:	491a      	ldr	r1, [pc, #104]	; (80090e4 <PDM_Filter_Init+0x194>)
 800907c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80090ec <PDM_Filter_Init+0x19c>
 8009080:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8009084:	4e18      	ldr	r6, [pc, #96]	; (80090e8 <PDM_Filter_Init+0x198>)
 8009086:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800908a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800908e:	ea02 0006 	and.w	r0, r2, r6
 8009092:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009096:	428f      	cmp	r7, r1
 8009098:	ea43 0300 	orr.w	r3, r3, r0
 800909c:	4413      	add	r3, r2
 800909e:	600b      	str	r3, [r1, #0]
 80090a0:	d1f1      	bne.n	8009086 <PDM_Filter_Init+0x136>
 80090a2:	2001      	movs	r0, #1
 80090a4:	2300      	movs	r3, #0
 80090a6:	7028      	strb	r0, [r5, #0]
 80090a8:	e791      	b.n	8008fce <PDM_Filter_Init+0x7e>
 80090aa:	2220      	movs	r2, #32
 80090ac:	4618      	mov	r0, r3
 80090ae:	2160      	movs	r1, #96	; 0x60
 80090b0:	6422      	str	r2, [r4, #64]	; 0x40
 80090b2:	4613      	mov	r3, r2
 80090b4:	e790      	b.n	8008fd8 <PDM_Filter_Init+0x88>
 80090b6:	bf00      	nop
 80090b8:	e0002000 	.word	0xe0002000
 80090bc:	e000ed00 	.word	0xe000ed00
 80090c0:	40023008 	.word	0x40023008
 80090c4:	40023000 	.word	0x40023000
 80090c8:	f407a5c2 	.word	0xf407a5c2
 80090cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80090d0:	e0042000 	.word	0xe0042000
 80090d4:	5c001000 	.word	0x5c001000
 80090d8:	58024c08 	.word	0x58024c08
 80090dc:	58024c00 	.word	0x58024c00
 80090e0:	24000490 	.word	0x24000490
 80090e4:	23fffffc 	.word	0x23fffffc
 80090e8:	000ffc00 	.word	0x000ffc00
 80090ec:	3ff00000 	.word	0x3ff00000

080090f0 <PDM_Filter_setConfig>:
 80090f0:	4b67      	ldr	r3, [pc, #412]	; (8009290 <PDM_Filter_setConfig+0x1a0>)
 80090f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d128      	bne.n	800914a <PDM_Filter_setConfig+0x5a>
 80090f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80090fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090fc:	880e      	ldrh	r6, [r1, #0]
 80090fe:	460d      	mov	r5, r1
 8009100:	4604      	mov	r4, r0
 8009102:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009106:	1e73      	subs	r3, r6, #1
 8009108:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800910c:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8009110:	2b06      	cmp	r3, #6
 8009112:	ed2d 8b02 	vpush	{d8}
 8009116:	6421      	str	r1, [r4, #64]	; 0x40
 8009118:	b083      	sub	sp, #12
 800911a:	d820      	bhi.n	800915e <PDM_Filter_setConfig+0x6e>
 800911c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800911e:	42b3      	cmp	r3, r6
 8009120:	d03d      	beq.n	800919e <PDM_Filter_setConfig+0xae>
 8009122:	4b5c      	ldr	r3, [pc, #368]	; (8009294 <PDM_Filter_setConfig+0x1a4>)
 8009124:	4013      	ands	r3, r2
 8009126:	4333      	orrs	r3, r6
 8009128:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800912c:	6423      	str	r3, [r4, #64]	; 0x40
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	2a70      	cmp	r2, #112	; 0x70
 8009134:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009138:	d009      	beq.n	800914e <PDM_Filter_setConfig+0x5e>
 800913a:	2b06      	cmp	r3, #6
 800913c:	d824      	bhi.n	8009188 <PDM_Filter_setConfig+0x98>
 800913e:	e8df f003 	tbb	[pc, r3]
 8009142:	878a      	.short	0x878a
 8009144:	7b7e8184 	.word	0x7b7e8184
 8009148:	78          	.byte	0x78
 8009149:	00          	.byte	0x00
 800914a:	2004      	movs	r0, #4
 800914c:	4770      	bx	lr
 800914e:	2b06      	cmp	r3, #6
 8009150:	d81a      	bhi.n	8009188 <PDM_Filter_setConfig+0x98>
 8009152:	e8df f003 	tbb	[pc, r3]
 8009156:	8f92      	.short	0x8f92
 8009158:	8617898c 	.word	0x8617898c
 800915c:	83          	.byte	0x83
 800915d:	00          	.byte	0x00
 800915e:	4287      	cmp	r7, r0
 8009160:	f000 808e 	beq.w	8009280 <PDM_Filter_setConfig+0x190>
 8009164:	f117 0f0c 	cmn.w	r7, #12
 8009168:	f04f 0008 	mov.w	r0, #8
 800916c:	da11      	bge.n	8009192 <PDM_Filter_setConfig+0xa2>
 800916e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8009172:	3040      	adds	r0, #64	; 0x40
 8009174:	80ab      	strh	r3, [r5, #4]
 8009176:	886b      	ldrh	r3, [r5, #2]
 8009178:	8626      	strh	r6, [r4, #48]	; 0x30
 800917a:	8663      	strh	r3, [r4, #50]	; 0x32
 800917c:	b003      	add	sp, #12
 800917e:	ecbd 8b02 	vpop	{d8}
 8009182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009184:	4b44      	ldr	r3, [pc, #272]	; (8009298 <PDM_Filter_setConfig+0x1a8>)
 8009186:	64a3      	str	r3, [r4, #72]	; 0x48
 8009188:	f117 0f0c 	cmn.w	r7, #12
 800918c:	f04f 0000 	mov.w	r0, #0
 8009190:	dbed      	blt.n	800916e <PDM_Filter_setConfig+0x7e>
 8009192:	2f33      	cmp	r7, #51	; 0x33
 8009194:	dd10      	ble.n	80091b8 <PDM_Filter_setConfig+0xc8>
 8009196:	2333      	movs	r3, #51	; 0x33
 8009198:	3040      	adds	r0, #64	; 0x40
 800919a:	80ab      	strh	r3, [r5, #4]
 800919c:	e7eb      	b.n	8009176 <PDM_Filter_setConfig+0x86>
 800919e:	4287      	cmp	r7, r0
 80091a0:	d1f2      	bne.n	8009188 <PDM_Filter_setConfig+0x98>
 80091a2:	886b      	ldrh	r3, [r5, #2]
 80091a4:	8663      	strh	r3, [r4, #50]	; 0x32
 80091a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091a8:	2000      	movs	r0, #0
 80091aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ae:	6423      	str	r3, [r4, #64]	; 0x40
 80091b0:	b003      	add	sp, #12
 80091b2:	ecbd 8b02 	vpop	{d8}
 80091b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	3b01      	subs	r3, #1
 80091c0:	2b06      	cmp	r3, #6
 80091c2:	d831      	bhi.n	8009228 <PDM_Filter_setConfig+0x138>
 80091c4:	4a35      	ldr	r2, [pc, #212]	; (800929c <PDM_Filter_setConfig+0x1ac>)
 80091c6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80091ca:	eddf 0a35 	vldr	s1, [pc, #212]	; 80092a0 <PDM_Filter_setConfig+0x1b0>
 80091ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091d2:	9001      	str	r0, [sp, #4]
 80091d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80091d8:	ed93 8a00 	vldr	s16, [r3]
 80091dc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80091e0:	f000 f8ca 	bl	8009378 <powf>
 80091e4:	eef0 8a40 	vmov.f32	s17, s0
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	ee07 7a90 	vmov	s15, r7
 80091ee:	ee28 8a28 	vmul.f32	s16, s16, s17
 80091f2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80091f6:	9001      	str	r0, [sp, #4]
 80091f8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80091fc:	eddf 7a29 	vldr	s15, [pc, #164]	; 80092a4 <PDM_Filter_setConfig+0x1b4>
 8009200:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009204:	f000 f8b8 	bl	8009378 <powf>
 8009208:	ee28 8a00 	vmul.f32	s16, s16, s0
 800920c:	886b      	ldrh	r3, [r5, #2]
 800920e:	9801      	ldr	r0, [sp, #4]
 8009210:	feb8 8a48 	vrinta.f32	s16, s16
 8009214:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8009218:	8727      	strh	r7, [r4, #56]	; 0x38
 800921a:	8663      	strh	r3, [r4, #50]	; 0x32
 800921c:	8626      	strh	r6, [r4, #48]	; 0x30
 800921e:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 8009222:	2800      	cmp	r0, #0
 8009224:	d0bf      	beq.n	80091a6 <PDM_Filter_setConfig+0xb6>
 8009226:	e7a9      	b.n	800917c <PDM_Filter_setConfig+0x8c>
 8009228:	eddf 8a1f 	vldr	s17, [pc, #124]	; 80092a8 <PDM_Filter_setConfig+0x1b8>
 800922c:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 80092ac <PDM_Filter_setConfig+0x1bc>
 8009230:	e7db      	b.n	80091ea <PDM_Filter_setConfig+0xfa>
 8009232:	4b1f      	ldr	r3, [pc, #124]	; (80092b0 <PDM_Filter_setConfig+0x1c0>)
 8009234:	64a3      	str	r3, [r4, #72]	; 0x48
 8009236:	e7a7      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 8009238:	4b1e      	ldr	r3, [pc, #120]	; (80092b4 <PDM_Filter_setConfig+0x1c4>)
 800923a:	64a3      	str	r3, [r4, #72]	; 0x48
 800923c:	e7a4      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 800923e:	4b1e      	ldr	r3, [pc, #120]	; (80092b8 <PDM_Filter_setConfig+0x1c8>)
 8009240:	64a3      	str	r3, [r4, #72]	; 0x48
 8009242:	e7a1      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 8009244:	4b1d      	ldr	r3, [pc, #116]	; (80092bc <PDM_Filter_setConfig+0x1cc>)
 8009246:	64a3      	str	r3, [r4, #72]	; 0x48
 8009248:	e79e      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 800924a:	4b1d      	ldr	r3, [pc, #116]	; (80092c0 <PDM_Filter_setConfig+0x1d0>)
 800924c:	64a3      	str	r3, [r4, #72]	; 0x48
 800924e:	e79b      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 8009250:	4b1c      	ldr	r3, [pc, #112]	; (80092c4 <PDM_Filter_setConfig+0x1d4>)
 8009252:	64a3      	str	r3, [r4, #72]	; 0x48
 8009254:	e798      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 8009256:	4b1c      	ldr	r3, [pc, #112]	; (80092c8 <PDM_Filter_setConfig+0x1d8>)
 8009258:	64a3      	str	r3, [r4, #72]	; 0x48
 800925a:	e795      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 800925c:	4b1b      	ldr	r3, [pc, #108]	; (80092cc <PDM_Filter_setConfig+0x1dc>)
 800925e:	64a3      	str	r3, [r4, #72]	; 0x48
 8009260:	e792      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 8009262:	4b1b      	ldr	r3, [pc, #108]	; (80092d0 <PDM_Filter_setConfig+0x1e0>)
 8009264:	64a3      	str	r3, [r4, #72]	; 0x48
 8009266:	e78f      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 8009268:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <PDM_Filter_setConfig+0x1e4>)
 800926a:	64a3      	str	r3, [r4, #72]	; 0x48
 800926c:	e78c      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 800926e:	4b1a      	ldr	r3, [pc, #104]	; (80092d8 <PDM_Filter_setConfig+0x1e8>)
 8009270:	64a3      	str	r3, [r4, #72]	; 0x48
 8009272:	e789      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 8009274:	4b19      	ldr	r3, [pc, #100]	; (80092dc <PDM_Filter_setConfig+0x1ec>)
 8009276:	64a3      	str	r3, [r4, #72]	; 0x48
 8009278:	e786      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 800927a:	4b19      	ldr	r3, [pc, #100]	; (80092e0 <PDM_Filter_setConfig+0x1f0>)
 800927c:	64a3      	str	r3, [r4, #72]	; 0x48
 800927e:	e783      	b.n	8009188 <PDM_Filter_setConfig+0x98>
 8009280:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009282:	42b3      	cmp	r3, r6
 8009284:	f47f af6e 	bne.w	8009164 <PDM_Filter_setConfig+0x74>
 8009288:	886b      	ldrh	r3, [r5, #2]
 800928a:	2008      	movs	r0, #8
 800928c:	8663      	strh	r3, [r4, #50]	; 0x32
 800928e:	e775      	b.n	800917c <PDM_Filter_setConfig+0x8c>
 8009290:	b5e8b5cd 	.word	0xb5e8b5cd
 8009294:	fffffef0 	.word	0xfffffef0
 8009298:	08008409 	.word	0x08008409
 800929c:	080096e8 	.word	0x080096e8
 80092a0:	42000000 	.word	0x42000000
 80092a4:	3d4ccccd 	.word	0x3d4ccccd
 80092a8:	4f800000 	.word	0x4f800000
 80092ac:	00000000 	.word	0x00000000
 80092b0:	08007815 	.word	0x08007815
 80092b4:	0800769d 	.word	0x0800769d
 80092b8:	0800758d 	.word	0x0800758d
 80092bc:	08008051 	.word	0x08008051
 80092c0:	08007db9 	.word	0x08007db9
 80092c4:	08007b81 	.word	0x08007b81
 80092c8:	0800799d 	.word	0x0800799d
 80092cc:	08008625 	.word	0x08008625
 80092d0:	080084e9 	.word	0x080084e9
 80092d4:	08008c65 	.word	0x08008c65
 80092d8:	08008a69 	.word	0x08008a69
 80092dc:	080088bd 	.word	0x080088bd
 80092e0:	08008751 	.word	0x08008751

080092e4 <__errno>:
 80092e4:	4b01      	ldr	r3, [pc, #4]	; (80092ec <__errno+0x8>)
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	24000410 	.word	0x24000410

080092f0 <__libc_init_array>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	4d0d      	ldr	r5, [pc, #52]	; (8009328 <__libc_init_array+0x38>)
 80092f4:	4c0d      	ldr	r4, [pc, #52]	; (800932c <__libc_init_array+0x3c>)
 80092f6:	1b64      	subs	r4, r4, r5
 80092f8:	10a4      	asrs	r4, r4, #2
 80092fa:	2600      	movs	r6, #0
 80092fc:	42a6      	cmp	r6, r4
 80092fe:	d109      	bne.n	8009314 <__libc_init_array+0x24>
 8009300:	4d0b      	ldr	r5, [pc, #44]	; (8009330 <__libc_init_array+0x40>)
 8009302:	4c0c      	ldr	r4, [pc, #48]	; (8009334 <__libc_init_array+0x44>)
 8009304:	f000 f9e4 	bl	80096d0 <_init>
 8009308:	1b64      	subs	r4, r4, r5
 800930a:	10a4      	asrs	r4, r4, #2
 800930c:	2600      	movs	r6, #0
 800930e:	42a6      	cmp	r6, r4
 8009310:	d105      	bne.n	800931e <__libc_init_array+0x2e>
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	f855 3b04 	ldr.w	r3, [r5], #4
 8009318:	4798      	blx	r3
 800931a:	3601      	adds	r6, #1
 800931c:	e7ee      	b.n	80092fc <__libc_init_array+0xc>
 800931e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009322:	4798      	blx	r3
 8009324:	3601      	adds	r6, #1
 8009326:	e7f2      	b.n	800930e <__libc_init_array+0x1e>
 8009328:	080099a8 	.word	0x080099a8
 800932c:	080099a8 	.word	0x080099a8
 8009330:	080099a8 	.word	0x080099a8
 8009334:	080099ac 	.word	0x080099ac

08009338 <memset>:
 8009338:	4402      	add	r2, r0
 800933a:	4603      	mov	r3, r0
 800933c:	4293      	cmp	r3, r2
 800933e:	d100      	bne.n	8009342 <memset+0xa>
 8009340:	4770      	bx	lr
 8009342:	f803 1b01 	strb.w	r1, [r3], #1
 8009346:	e7f9      	b.n	800933c <memset+0x4>

08009348 <checkint>:
 8009348:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800934c:	2b7e      	cmp	r3, #126	; 0x7e
 800934e:	dd10      	ble.n	8009372 <checkint+0x2a>
 8009350:	2b96      	cmp	r3, #150	; 0x96
 8009352:	dc0c      	bgt.n	800936e <checkint+0x26>
 8009354:	2201      	movs	r2, #1
 8009356:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800935a:	fa02 f303 	lsl.w	r3, r2, r3
 800935e:	1e5a      	subs	r2, r3, #1
 8009360:	4202      	tst	r2, r0
 8009362:	d106      	bne.n	8009372 <checkint+0x2a>
 8009364:	4203      	tst	r3, r0
 8009366:	bf0c      	ite	eq
 8009368:	2002      	moveq	r0, #2
 800936a:	2001      	movne	r0, #1
 800936c:	4770      	bx	lr
 800936e:	2002      	movs	r0, #2
 8009370:	4770      	bx	lr
 8009372:	2000      	movs	r0, #0
 8009374:	4770      	bx	lr
	...

08009378 <powf>:
 8009378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800937a:	ee10 1a10 	vmov	r1, s0
 800937e:	ee10 6a90 	vmov	r6, s1
 8009382:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8009386:	0072      	lsls	r2, r6, #1
 8009388:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800938c:	b085      	sub	sp, #20
 800938e:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8009392:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8009396:	d256      	bcs.n	8009446 <powf+0xce>
 8009398:	4298      	cmp	r0, r3
 800939a:	d256      	bcs.n	800944a <powf+0xd2>
 800939c:	2000      	movs	r0, #0
 800939e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80093a2:	4ea3      	ldr	r6, [pc, #652]	; (8009630 <powf+0x2b8>)
 80093a4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80093a8:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80093ac:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 80093b0:	0dd2      	lsrs	r2, r2, #23
 80093b2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 80093b6:	05d2      	lsls	r2, r2, #23
 80093b8:	1a8b      	subs	r3, r1, r2
 80093ba:	ed97 5b00 	vldr	d5, [r7]
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	15d2      	asrs	r2, r2, #23
 80093c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80093c8:	eea5 6b07 	vfma.f64	d6, d5, d7
 80093cc:	ed97 5b02 	vldr	d5, [r7, #8]
 80093d0:	ee26 2b06 	vmul.f64	d2, d6, d6
 80093d4:	ee22 1b02 	vmul.f64	d1, d2, d2
 80093d8:	ee07 2a90 	vmov	s15, r2
 80093dc:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 80093e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80093e4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80093e8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 80093ec:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 80093f0:	eea6 5b04 	vfma.f64	d5, d6, d4
 80093f4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 80093f8:	eea6 4b03 	vfma.f64	d4, d6, d3
 80093fc:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8009400:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8009404:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009408:	eea2 7b04 	vfma.f64	d7, d2, d4
 800940c:	eea5 7b01 	vfma.f64	d7, d5, d1
 8009410:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009414:	ee10 1a90 	vmov	r1, s1
 8009418:	2300      	movs	r3, #0
 800941a:	2700      	movs	r7, #0
 800941c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8009420:	f248 06be 	movw	r6, #32958	; 0x80be
 8009424:	429f      	cmp	r7, r3
 8009426:	bf08      	it	eq
 8009428:	4296      	cmpeq	r6, r2
 800942a:	f080 80b1 	bcs.w	8009590 <powf+0x218>
 800942e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 8009610 <powf+0x298>
 8009432:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943a:	dd79      	ble.n	8009530 <powf+0x1b8>
 800943c:	b005      	add	sp, #20
 800943e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009442:	f000 b91f 	b.w	8009684 <__math_oflowf>
 8009446:	4298      	cmp	r0, r3
 8009448:	d32d      	bcc.n	80094a6 <powf+0x12e>
 800944a:	b952      	cbnz	r2, 8009462 <powf+0xea>
 800944c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8009456:	f240 80cd 	bls.w	80095f4 <powf+0x27c>
 800945a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800945e:	b005      	add	sp, #20
 8009460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009462:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8009466:	d105      	bne.n	8009474 <powf+0xfc>
 8009468:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800946c:	0076      	lsls	r6, r6, #1
 800946e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8009472:	e7f0      	b.n	8009456 <powf+0xde>
 8009474:	004b      	lsls	r3, r1, #1
 8009476:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800947a:	d8ee      	bhi.n	800945a <powf+0xe2>
 800947c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8009480:	d1eb      	bne.n	800945a <powf+0xe2>
 8009482:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009486:	f000 80b5 	beq.w	80095f4 <powf+0x27c>
 800948a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800948e:	ea6f 0606 	mvn.w	r6, r6
 8009492:	bf34      	ite	cc
 8009494:	2300      	movcc	r3, #0
 8009496:	2301      	movcs	r3, #1
 8009498:	0ff6      	lsrs	r6, r6, #31
 800949a:	42b3      	cmp	r3, r6
 800949c:	f040 80ad 	bne.w	80095fa <powf+0x282>
 80094a0:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80094a4:	e7db      	b.n	800945e <powf+0xe6>
 80094a6:	004f      	lsls	r7, r1, #1
 80094a8:	1e7a      	subs	r2, r7, #1
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d31c      	bcc.n	80094e8 <powf+0x170>
 80094ae:	2900      	cmp	r1, #0
 80094b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80094b4:	da0f      	bge.n	80094d6 <powf+0x15e>
 80094b6:	ee10 0a90 	vmov	r0, s1
 80094ba:	f7ff ff45 	bl	8009348 <checkint>
 80094be:	2801      	cmp	r0, #1
 80094c0:	d109      	bne.n	80094d6 <powf+0x15e>
 80094c2:	eeb1 0a40 	vneg.f32	s0, s0
 80094c6:	b947      	cbnz	r7, 80094da <powf+0x162>
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	dac8      	bge.n	800945e <powf+0xe6>
 80094cc:	b005      	add	sp, #20
 80094ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80094d2:	f000 b8dd 	b.w	8009690 <__math_divzerof>
 80094d6:	2000      	movs	r0, #0
 80094d8:	e7f5      	b.n	80094c6 <powf+0x14e>
 80094da:	2e00      	cmp	r6, #0
 80094dc:	dabf      	bge.n	800945e <powf+0xe6>
 80094de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80094e2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80094e6:	e7ba      	b.n	800945e <powf+0xe6>
 80094e8:	2900      	cmp	r1, #0
 80094ea:	da1f      	bge.n	800952c <powf+0x1b4>
 80094ec:	ee10 0a90 	vmov	r0, s1
 80094f0:	f7ff ff2a 	bl	8009348 <checkint>
 80094f4:	b920      	cbnz	r0, 8009500 <powf+0x188>
 80094f6:	b005      	add	sp, #20
 80094f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80094fc:	f000 b8d8 	b.w	80096b0 <__math_invalidf>
 8009500:	2801      	cmp	r0, #1
 8009502:	bf14      	ite	ne
 8009504:	2000      	movne	r0, #0
 8009506:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800950a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800950e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8009512:	f4bf af44 	bcs.w	800939e <powf+0x26>
 8009516:	eddf 7a47 	vldr	s15, [pc, #284]	; 8009634 <powf+0x2bc>
 800951a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800951e:	ee10 3a10 	vmov	r3, s0
 8009522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009526:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800952a:	e738      	b.n	800939e <powf+0x26>
 800952c:	2000      	movs	r0, #0
 800952e:	e7ee      	b.n	800950e <powf+0x196>
 8009530:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8009618 <powf+0x2a0>
 8009534:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953c:	dd10      	ble.n	8009560 <powf+0x1e8>
 800953e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8009542:	2800      	cmp	r0, #0
 8009544:	d15c      	bne.n	8009600 <powf+0x288>
 8009546:	9302      	str	r3, [sp, #8]
 8009548:	eddd 7a02 	vldr	s15, [sp, #8]
 800954c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009550:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009554:	eef4 7a47 	vcmp.f32	s15, s14
 8009558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955c:	f47f af6e 	bne.w	800943c <powf+0xc4>
 8009560:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009620 <powf+0x2a8>
 8009564:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956c:	d804      	bhi.n	8009578 <powf+0x200>
 800956e:	b005      	add	sp, #20
 8009570:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009574:	f000 b87a 	b.w	800966c <__math_uflowf>
 8009578:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009628 <powf+0x2b0>
 800957c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009584:	d504      	bpl.n	8009590 <powf+0x218>
 8009586:	b005      	add	sp, #20
 8009588:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800958c:	f000 b874 	b.w	8009678 <__math_may_uflowf>
 8009590:	4b29      	ldr	r3, [pc, #164]	; (8009638 <powf+0x2c0>)
 8009592:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8009596:	ee30 6b07 	vadd.f64	d6, d0, d7
 800959a:	ed8d 6b00 	vstr	d6, [sp]
 800959e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095a2:	ee30 7b47 	vsub.f64	d7, d0, d7
 80095a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80095aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80095ae:	f006 011f 	and.w	r1, r6, #31
 80095b2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80095b6:	e9d1 ce00 	ldrd	ip, lr, [r1]
 80095ba:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80095be:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80095c2:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 80095c6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80095ca:	ee27 5b07 	vmul.f64	d5, d7, d7
 80095ce:	1836      	adds	r6, r6, r0
 80095d0:	2300      	movs	r3, #0
 80095d2:	eb13 040c 	adds.w	r4, r3, ip
 80095d6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 80095da:	eb41 050e 	adc.w	r5, r1, lr
 80095de:	eea7 0b04 	vfma.f64	d0, d7, d4
 80095e2:	ec45 4b17 	vmov	d7, r4, r5
 80095e6:	eea6 0b05 	vfma.f64	d0, d6, d5
 80095ea:	ee20 0b07 	vmul.f64	d0, d0, d7
 80095ee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80095f2:	e734      	b.n	800945e <powf+0xe6>
 80095f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80095f8:	e731      	b.n	800945e <powf+0xe6>
 80095fa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800963c <powf+0x2c4>
 80095fe:	e72e      	b.n	800945e <powf+0xe6>
 8009600:	9303      	str	r3, [sp, #12]
 8009602:	eddd 7a03 	vldr	s15, [sp, #12]
 8009606:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800960a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800960e:	e7a1      	b.n	8009554 <powf+0x1dc>
 8009610:	ffd1d571 	.word	0xffd1d571
 8009614:	405fffff 	.word	0x405fffff
 8009618:	ffa3aae2 	.word	0xffa3aae2
 800961c:	405fffff 	.word	0x405fffff
 8009620:	00000000 	.word	0x00000000
 8009624:	c062c000 	.word	0xc062c000
 8009628:	00000000 	.word	0x00000000
 800962c:	c062a000 	.word	0xc062a000
 8009630:	08009738 	.word	0x08009738
 8009634:	4b000000 	.word	0x4b000000
 8009638:	08009860 	.word	0x08009860
 800963c:	00000000 	.word	0x00000000

08009640 <with_errnof>:
 8009640:	b513      	push	{r0, r1, r4, lr}
 8009642:	4604      	mov	r4, r0
 8009644:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009648:	f7ff fe4c 	bl	80092e4 <__errno>
 800964c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009650:	6004      	str	r4, [r0, #0]
 8009652:	b002      	add	sp, #8
 8009654:	bd10      	pop	{r4, pc}

08009656 <xflowf>:
 8009656:	b130      	cbz	r0, 8009666 <xflowf+0x10>
 8009658:	eef1 7a40 	vneg.f32	s15, s0
 800965c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009660:	2022      	movs	r0, #34	; 0x22
 8009662:	f7ff bfed 	b.w	8009640 <with_errnof>
 8009666:	eef0 7a40 	vmov.f32	s15, s0
 800966a:	e7f7      	b.n	800965c <xflowf+0x6>

0800966c <__math_uflowf>:
 800966c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009674 <__math_uflowf+0x8>
 8009670:	f7ff bff1 	b.w	8009656 <xflowf>
 8009674:	10000000 	.word	0x10000000

08009678 <__math_may_uflowf>:
 8009678:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009680 <__math_may_uflowf+0x8>
 800967c:	f7ff bfeb 	b.w	8009656 <xflowf>
 8009680:	1a200000 	.word	0x1a200000

08009684 <__math_oflowf>:
 8009684:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800968c <__math_oflowf+0x8>
 8009688:	f7ff bfe5 	b.w	8009656 <xflowf>
 800968c:	70000000 	.word	0x70000000

08009690 <__math_divzerof>:
 8009690:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009694:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009698:	2800      	cmp	r0, #0
 800969a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800969e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80096ac <__math_divzerof+0x1c>
 80096a2:	2022      	movs	r0, #34	; 0x22
 80096a4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80096a8:	f7ff bfca 	b.w	8009640 <with_errnof>
 80096ac:	00000000 	.word	0x00000000

080096b0 <__math_invalidf>:
 80096b0:	eef0 7a40 	vmov.f32	s15, s0
 80096b4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80096b8:	eef4 7a67 	vcmp.f32	s15, s15
 80096bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80096c4:	d602      	bvs.n	80096cc <__math_invalidf+0x1c>
 80096c6:	2021      	movs	r0, #33	; 0x21
 80096c8:	f7ff bfba 	b.w	8009640 <with_errnof>
 80096cc:	4770      	bx	lr
	...

080096d0 <_init>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	bf00      	nop
 80096d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d6:	bc08      	pop	{r3}
 80096d8:	469e      	mov	lr, r3
 80096da:	4770      	bx	lr

080096dc <_fini>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	bf00      	nop
 80096e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e2:	bc08      	pop	{r3}
 80096e4:	469e      	mov	lr, r3
 80096e6:	4770      	bx	lr
